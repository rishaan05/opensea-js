"use strict";function cov_10kpgbmj1j(){var path="/Users/rg/dev/opensea-js/test/api/getOrders.spec.ts";var hash="dad0fd3b18795321412c0bb457cf4eec421a189e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/test/api/getOrders.spec.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:26}},"2":{start:{line:4,column:15},end:{line:4,column:30}},"3":{start:{line:5,column:16},end:{line:5,column:32}},"4":{start:{line:6,column:16},end:{line:6,column:42}},"5":{start:{line:7,column:20},end:{line:7,column:49}},"6":{start:{line:8,column:16},end:{line:8,column:41}},"7":{start:{line:9,column:0},end:{line:40,column:3}},"8":{start:{line:10,column:4},end:{line:18,column:7}},"9":{start:{line:11,column:8},end:{line:17,column:11}},"10":{start:{line:12,column:26},end:{line:15,column:14}},"11":{start:{line:16,column:12},end:{line:16,column:49}},"12":{start:{line:19,column:4},end:{line:27,column:7}},"13":{start:{line:20,column:8},end:{line:26,column:80}},"14":{start:{line:28,column:4},end:{line:39,column:7}},"15":{start:{line:29,column:8},end:{line:38,column:11}},"16":{start:{line:30,column:37},end:{line:35,column:14}},"17":{start:{line:36,column:12},end:{line:36,column:72}},"18":{start:{line:36,column:34},end:{line:36,column:70}},"19":{start:{line:37,column:12},end:{line:37,column:57}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:37},end:{line:9,column:38}},loc:{start:{line:9,column:43},end:{line:40,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:65},end:{line:10,column:66}},loc:{start:{line:10,column:75},end:{line:18,column:5}},line:10},"2":{name:"(anonymous_2)",decl:{start:{line:11,column:77},end:{line:11,column:78}},loc:{start:{line:11,column:89},end:{line:17,column:9}},line:11},"3":{name:"(anonymous_3)",decl:{start:{line:19,column:65},end:{line:19,column:66}},loc:{start:{line:19,column:77},end:{line:27,column:5}},line:19},"4":{name:"(anonymous_4)",decl:{start:{line:28,column:65},end:{line:28,column:66}},loc:{start:{line:28,column:75},end:{line:39,column:5}},line:28},"5":{name:"(anonymous_5)",decl:{start:{line:29,column:80},end:{line:29,column:81}},loc:{start:{line:29,column:92},end:{line:38,column:9}},line:29},"6":{name:"(anonymous_6)",decl:{start:{line:36,column:23},end:{line:36,column:24}},loc:{start:{line:36,column:34},end:{line:36,column:70}},line:36}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/test/api/getOrders.spec.ts",sources:["/Users/rg/dev/opensea-js/test/api/getOrders.spec.ts"],names:[],mappings:";;AAAA,0BAAwB;AACxB,+BAA8B;AAC9B,iCAAoC;AACpC,2CAA4C;AAC5C,kDAI4B;AAC5B,0CAAkD;AAElD,IAAA,aAAK,EAAC,gBAAgB,EAAE,GAAG,EAAE;IAC3B,CAAC,iBAAS,CAAC,OAAO,EAAE,iBAAS,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACpD,IAAA,YAAI,EAAC,2CAA2C,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,KAAK,GAAG,MAAM,mBAAO,CAAC,QAAQ,CAAC;gBACnC,QAAQ,EAAE,SAAS;gBACnB,IAAI;aACL,CAAC,CAAC;YACH,IAAA,wBAAgB,EAAC,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,YAAI,EAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,IAAA,aAAM,EACV,mBAAO,CAAC,QAAQ,CAAC;YACf,QAAQ,EAAE,SAAS;YACnB,IAAI,EAAE,iBAAS,CAAC,OAAO;YACvB,KAAK,EAAE,4CAA4C;SACpD,CAAC,CACH;aACE,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC;aACrD,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,oCAAoC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,CAAC,iBAAS,CAAC,OAAO,EAAE,iBAAS,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACpD,IAAA,YAAI,EAAC,8CAA8C,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,mBAAO,CAAC,SAAS,CAAC;gBAC/C,QAAQ,EAAE,SAAS;gBACnB,IAAI;gBACJ,QAAQ,EAAE,0BAAc;gBACxB,oBAAoB,EAAE,iCAAqB;aAC5C,CAAC,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAA,wBAAgB,EAAC,KAAK,CAAC,CAAC,CAAC;YAC/C,IAAA,aAAM,EAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,SAAS,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["import \"../utils/setup\";\nimport { expect } from \"chai\";\nimport { suite, test } from \"mocha\";\nimport { OrderSide } from \"../../src/types\";\nimport {\n  BAYC_CONTRACT_ADDRESS,\n  BAYC_TOKEN_IDS,\n  mainAPI,\n} from \"../utils/constants\";\nimport { expectValidOrder } from \"../utils/utils\";\n\nsuite(\"Getting orders\", () => {\n  [OrderSide.LISTING, OrderSide.OFFER].forEach((side) => {\n    test(`getOrder should return a single order > ${side}`, async () => {\n      const order = await mainAPI.getOrder({\n        protocol: \"seaport\",\n        side,\n      });\n      expectValidOrder(order);\n    });\n  });\n\n  test(`getOrder should throw if no order found`, async () => {\n    await expect(\n      mainAPI.getOrder({\n        protocol: \"seaport\",\n        side: OrderSide.LISTING,\n        maker: \"0x000000000000000000000000000000000000dEaD\",\n      }),\n    )\n      .to.eventually.be.rejected.and.be.an.instanceOf(Error)\n      .and.have.property(\"message\", \"Not found: no matching order found\");\n  });\n\n  [OrderSide.LISTING, OrderSide.OFFER].forEach((side) => {\n    test(`getOrders should return a list of orders > ${side}`, async () => {\n      const { orders, next } = await mainAPI.getOrders({\n        protocol: \"seaport\",\n        side,\n        tokenIds: BAYC_TOKEN_IDS,\n        assetContractAddress: BAYC_CONTRACT_ADDRESS,\n      });\n      orders.map((order) => expectValidOrder(order));\n      expect(next).to.not.be.undefined;\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dad0fd3b18795321412c0bb457cf4eec421a189e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_10kpgbmj1j=function(){return actualCoverage;};}return actualCoverage;}cov_10kpgbmj1j();cov_10kpgbmj1j().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_10kpgbmj1j().s[1]++;require("../utils/setup");const chai_1=(cov_10kpgbmj1j().s[2]++,require("chai"));const mocha_1=(cov_10kpgbmj1j().s[3]++,require("mocha"));const types_1=(cov_10kpgbmj1j().s[4]++,require("../../src/types"));const constants_1=(cov_10kpgbmj1j().s[5]++,require("../utils/constants"));const utils_1=(cov_10kpgbmj1j().s[6]++,require("../utils/utils"));cov_10kpgbmj1j().s[7]++;(0,mocha_1.suite)("Getting orders",()=>{cov_10kpgbmj1j().f[0]++;cov_10kpgbmj1j().s[8]++;[types_1.OrderSide.LISTING,types_1.OrderSide.OFFER].forEach(side=>{cov_10kpgbmj1j().f[1]++;cov_10kpgbmj1j().s[9]++;(0,mocha_1.test)(`getOrder should return a single order > ${side}`,async()=>{cov_10kpgbmj1j().f[2]++;const order=(cov_10kpgbmj1j().s[10]++,await constants_1.mainAPI.getOrder({protocol:"seaport",side}));cov_10kpgbmj1j().s[11]++;(0,utils_1.expectValidOrder)(order);});});cov_10kpgbmj1j().s[12]++;(0,mocha_1.test)(`getOrder should throw if no order found`,async()=>{cov_10kpgbmj1j().f[3]++;cov_10kpgbmj1j().s[13]++;await(0,chai_1.expect)(constants_1.mainAPI.getOrder({protocol:"seaport",side:types_1.OrderSide.LISTING,maker:"0x000000000000000000000000000000000000dEaD"})).to.eventually.be.rejected.and.be.an.instanceOf(Error).and.have.property("message","Not found: no matching order found");});cov_10kpgbmj1j().s[14]++;[types_1.OrderSide.LISTING,types_1.OrderSide.OFFER].forEach(side=>{cov_10kpgbmj1j().f[4]++;cov_10kpgbmj1j().s[15]++;(0,mocha_1.test)(`getOrders should return a list of orders > ${side}`,async()=>{cov_10kpgbmj1j().f[5]++;const{orders,next}=(cov_10kpgbmj1j().s[16]++,await constants_1.mainAPI.getOrders({protocol:"seaport",side,tokenIds:constants_1.BAYC_TOKEN_IDS,assetContractAddress:constants_1.BAYC_CONTRACT_ADDRESS}));cov_10kpgbmj1j().s[17]++;orders.map(order=>{cov_10kpgbmj1j().f[6]++;cov_10kpgbmj1j().s[18]++;return(0,utils_1.expectValidOrder)(order);});cov_10kpgbmj1j().s[19]++;(0,chai_1.expect)(next).to.not.be.undefined;});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JnL2Rldi9vcGVuc2VhLWpzL3Rlc3QvYXBpL2dldE9yZGVycy5zcGVjLnRzIiwic291cmNlcyI6WyIvVXNlcnMvcmcvZGV2L29wZW5zZWEtanMvdGVzdC9hcGkvZ2V0T3JkZXJzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQkFBd0I7QUFDeEIsK0JBQThCO0FBQzlCLGlDQUFvQztBQUNwQywyQ0FBNEM7QUFDNUMsa0RBSTRCO0FBQzVCLDBDQUFrRDtBQUVsRCxJQUFBLGFBQUssRUFBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDM0IsQ0FBQyxpQkFBUyxDQUFDLE9BQU8sRUFBRSxpQkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ3BELElBQUEsWUFBSSxFQUFDLDJDQUEyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNqRSxNQUFNLEtBQUssR0FBRyxNQUFNLG1CQUFPLENBQUMsUUFBUSxDQUFDO2dCQUNuQyxRQUFRLEVBQUUsU0FBUztnQkFDbkIsSUFBSTthQUNMLENBQUMsQ0FBQztZQUNILElBQUEsd0JBQWdCLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsWUFBSSxFQUFDLHlDQUF5QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3pELE1BQU0sSUFBQSxhQUFNLEVBQ1YsbUJBQU8sQ0FBQyxRQUFRLENBQUM7WUFDZixRQUFRLEVBQUUsU0FBUztZQUNuQixJQUFJLEVBQUUsaUJBQVMsQ0FBQyxPQUFPO1lBQ3ZCLEtBQUssRUFBRSw0Q0FBNEM7U0FDcEQsQ0FBQyxDQUNIO2FBQ0UsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7YUFDckQsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLG9DQUFvQyxDQUFDLENBQUM7SUFDeEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxDQUFDLGlCQUFTLENBQUMsT0FBTyxFQUFFLGlCQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDcEQsSUFBQSxZQUFJLEVBQUMsOENBQThDLElBQUksRUFBRSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3BFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxtQkFBTyxDQUFDLFNBQVMsQ0FBQztnQkFDL0MsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLElBQUk7Z0JBQ0osUUFBUSxFQUFFLDBCQUFjO2dCQUN4QixvQkFBb0IsRUFBRSxpQ0FBcUI7YUFDNUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBQSx3QkFBZ0IsRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQy9DLElBQUEsYUFBTSxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi91dGlscy9zZXR1cFwiO1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSBcImNoYWlcIjtcbmltcG9ydCB7IHN1aXRlLCB0ZXN0IH0gZnJvbSBcIm1vY2hhXCI7XG5pbXBvcnQgeyBPcmRlclNpZGUgfSBmcm9tIFwiLi4vLi4vc3JjL3R5cGVzXCI7XG5pbXBvcnQge1xuICBCQVlDX0NPTlRSQUNUX0FERFJFU1MsXG4gIEJBWUNfVE9LRU5fSURTLFxuICBtYWluQVBJLFxufSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBleHBlY3RWYWxpZE9yZGVyIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzXCI7XG5cbnN1aXRlKFwiR2V0dGluZyBvcmRlcnNcIiwgKCkgPT4ge1xuICBbT3JkZXJTaWRlLkxJU1RJTkcsIE9yZGVyU2lkZS5PRkZFUl0uZm9yRWFjaCgoc2lkZSkgPT4ge1xuICAgIHRlc3QoYGdldE9yZGVyIHNob3VsZCByZXR1cm4gYSBzaW5nbGUgb3JkZXIgPiAke3NpZGV9YCwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb3JkZXIgPSBhd2FpdCBtYWluQVBJLmdldE9yZGVyKHtcbiAgICAgICAgcHJvdG9jb2w6IFwic2VhcG9ydFwiLFxuICAgICAgICBzaWRlLFxuICAgICAgfSk7XG4gICAgICBleHBlY3RWYWxpZE9yZGVyKG9yZGVyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdChgZ2V0T3JkZXIgc2hvdWxkIHRocm93IGlmIG5vIG9yZGVyIGZvdW5kYCwgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGV4cGVjdChcbiAgICAgIG1haW5BUEkuZ2V0T3JkZXIoe1xuICAgICAgICBwcm90b2NvbDogXCJzZWFwb3J0XCIsXG4gICAgICAgIHNpZGU6IE9yZGVyU2lkZS5MSVNUSU5HLFxuICAgICAgICBtYWtlcjogXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGRFYURcIixcbiAgICAgIH0pLFxuICAgIClcbiAgICAgIC50by5ldmVudHVhbGx5LmJlLnJlamVjdGVkLmFuZC5iZS5hbi5pbnN0YW5jZU9mKEVycm9yKVxuICAgICAgLmFuZC5oYXZlLnByb3BlcnR5KFwibWVzc2FnZVwiLCBcIk5vdCBmb3VuZDogbm8gbWF0Y2hpbmcgb3JkZXIgZm91bmRcIik7XG4gIH0pO1xuXG4gIFtPcmRlclNpZGUuTElTVElORywgT3JkZXJTaWRlLk9GRkVSXS5mb3JFYWNoKChzaWRlKSA9PiB7XG4gICAgdGVzdChgZ2V0T3JkZXJzIHNob3VsZCByZXR1cm4gYSBsaXN0IG9mIG9yZGVycyA+ICR7c2lkZX1gLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IG9yZGVycywgbmV4dCB9ID0gYXdhaXQgbWFpbkFQSS5nZXRPcmRlcnMoe1xuICAgICAgICBwcm90b2NvbDogXCJzZWFwb3J0XCIsXG4gICAgICAgIHNpZGUsXG4gICAgICAgIHRva2VuSWRzOiBCQVlDX1RPS0VOX0lEUyxcbiAgICAgICAgYXNzZXRDb250cmFjdEFkZHJlc3M6IEJBWUNfQ09OVFJBQ1RfQUREUkVTUyxcbiAgICAgIH0pO1xuICAgICAgb3JkZXJzLm1hcCgob3JkZXIpID0+IGV4cGVjdFZhbGlkT3JkZXIob3JkZXIpKTtcbiAgICAgIGV4cGVjdChuZXh0KS50by5ub3QuYmUudW5kZWZpbmVkO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTBrcGdibWoxaiIsImFjdHVhbENvdmVyYWdlIiwicyIsInJlcXVpcmUiLCJjaGFpXzEiLCJtb2NoYV8xIiwidHlwZXNfMSIsImNvbnN0YW50c18xIiwidXRpbHNfMSIsInN1aXRlIiwiZiIsIk9yZGVyU2lkZSIsIkxJU1RJTkciLCJPRkZFUiIsImZvckVhY2giLCJzaWRlIiwidGVzdCIsIm9yZGVyIiwibWFpbkFQSSIsImdldE9yZGVyIiwicHJvdG9jb2wiLCJleHBlY3RWYWxpZE9yZGVyIiwiZXhwZWN0IiwibWFrZXIiLCJ0byIsImV2ZW50dWFsbHkiLCJiZSIsInJlamVjdGVkIiwiYW5kIiwiYW4iLCJpbnN0YW5jZU9mIiwiRXJyb3IiLCJoYXZlIiwicHJvcGVydHkiLCJvcmRlcnMiLCJuZXh0IiwiZ2V0T3JkZXJzIiwidG9rZW5JZHMiLCJCQVlDX1RPS0VOX0lEUyIsImFzc2V0Q29udHJhY3RBZGRyZXNzIiwiQkFZQ19DT05UUkFDVF9BRERSRVNTIiwibWFwIiwibm90IiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsiL1VzZXJzL3JnL2Rldi9vcGVuc2VhLWpzL3Rlc3QvYXBpL2dldE9yZGVycy5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL3V0aWxzL3NldHVwXCI7XG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHsgc3VpdGUsIHRlc3QgfSBmcm9tIFwibW9jaGFcIjtcbmltcG9ydCB7IE9yZGVyU2lkZSB9IGZyb20gXCIuLi8uLi9zcmMvdHlwZXNcIjtcbmltcG9ydCB7XG4gIEJBWUNfQ09OVFJBQ1RfQUREUkVTUyxcbiAgQkFZQ19UT0tFTl9JRFMsXG4gIG1haW5BUEksXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHNcIjtcbmltcG9ydCB7IGV4cGVjdFZhbGlkT3JkZXIgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcblxuc3VpdGUoXCJHZXR0aW5nIG9yZGVyc1wiLCAoKSA9PiB7XG4gIFtPcmRlclNpZGUuTElTVElORywgT3JkZXJTaWRlLk9GRkVSXS5mb3JFYWNoKChzaWRlKSA9PiB7XG4gICAgdGVzdChgZ2V0T3JkZXIgc2hvdWxkIHJldHVybiBhIHNpbmdsZSBvcmRlciA+ICR7c2lkZX1gLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcmRlciA9IGF3YWl0IG1haW5BUEkuZ2V0T3JkZXIoe1xuICAgICAgICBwcm90b2NvbDogXCJzZWFwb3J0XCIsXG4gICAgICAgIHNpZGUsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdFZhbGlkT3JkZXIob3JkZXIpO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KGBnZXRPcmRlciBzaG91bGQgdGhyb3cgaWYgbm8gb3JkZXIgZm91bmRgLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZXhwZWN0KFxuICAgICAgbWFpbkFQSS5nZXRPcmRlcih7XG4gICAgICAgIHByb3RvY29sOiBcInNlYXBvcnRcIixcbiAgICAgICAgc2lkZTogT3JkZXJTaWRlLkxJU1RJTkcsXG4gICAgICAgIG1ha2VyOiBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZEVhRFwiLFxuICAgICAgfSksXG4gICAgKVxuICAgICAgLnRvLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWQuYW5kLmJlLmFuLmluc3RhbmNlT2YoRXJyb3IpXG4gICAgICAuYW5kLmhhdmUucHJvcGVydHkoXCJtZXNzYWdlXCIsIFwiTm90IGZvdW5kOiBubyBtYXRjaGluZyBvcmRlciBmb3VuZFwiKTtcbiAgfSk7XG5cbiAgW09yZGVyU2lkZS5MSVNUSU5HLCBPcmRlclNpZGUuT0ZGRVJdLmZvckVhY2goKHNpZGUpID0+IHtcbiAgICB0ZXN0KGBnZXRPcmRlcnMgc2hvdWxkIHJldHVybiBhIGxpc3Qgb2Ygb3JkZXJzID4gJHtzaWRlfWAsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgb3JkZXJzLCBuZXh0IH0gPSBhd2FpdCBtYWluQVBJLmdldE9yZGVycyh7XG4gICAgICAgIHByb3RvY29sOiBcInNlYXBvcnRcIixcbiAgICAgICAgc2lkZSxcbiAgICAgICAgdG9rZW5JZHM6IEJBWUNfVE9LRU5fSURTLFxuICAgICAgICBhc3NldENvbnRyYWN0QWRkcmVzczogQkFZQ19DT05UUkFDVF9BRERSRVNTLFxuICAgICAgfSk7XG4gICAgICBvcmRlcnMubWFwKChvcmRlcikgPT4gZXhwZWN0VmFsaWRPcmRlcihvcmRlcikpO1xuICAgICAgZXhwZWN0KG5leHQpLnRvLm5vdC5iZS51bmRlZmluZWQ7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiIreUxBa0JNO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQUFBQSxjQUFBLEdBQUFFLENBQUEsTSxpRkFsQk5DLE9BQUEsbUJBQ0EsTUFBQUMsTUFBQSxFQUFBSixjQUFBLEdBQUFFLENBQUEsTUFBQUMsT0FBQSxVQUNBLE1BQUFFLE9BQUEsRUFBQUwsY0FBQSxHQUFBRSxDQUFBLE1BQUFDLE9BQUEsV0FDQSxNQUFBRyxPQUFBLEVBQUFOLGNBQUEsR0FBQUUsQ0FBQSxNQUFBQyxPQUFBLHFCQUNBLE1BQUFJLFdBQUEsRUFBQVAsY0FBQSxHQUFBRSxDQUFBLE1BQUFDLE9BQUEsd0JBS0EsTUFBQUssT0FBQSxFQUFBUixjQUFBLEdBQUFFLENBQUEsTUFBQUMsT0FBQSxvQkFBa0RILGNBQUEsR0FBQUUsQ0FBQSxNQUVsRCxHQUFBRyxPQUFBLENBQUFJLEtBQUssRUFBQyxnQkFBZ0IsQ0FBRSxJQUFLLENBQUFULGNBQUEsR0FBQVUsQ0FBQSxNQUFBVixjQUFBLEdBQUFFLENBQUEsTUFDM0IsQ0FBQ0ksT0FBQSxDQUFBSyxTQUFTLENBQUNDLE9BQU8sQ0FBRU4sT0FBQSxDQUFBSyxTQUFTLENBQUNFLEtBQUssQ0FBQyxDQUFDQyxPQUFPLENBQUVDLElBQUksRUFBSSxDQUFBZixjQUFBLEdBQUFVLENBQUEsTUFBQVYsY0FBQSxHQUFBRSxDQUFBLE1BQ3BELEdBQUFHLE9BQUEsQ0FBQVcsSUFBSSxFQUFDLDJDQUEyQ0QsSUFBSSxFQUFFLENBQUUsU0FBVyxDQUFBZixjQUFBLEdBQUFVLENBQUEsTUFDakUsS0FBTSxDQUFBTyxLQUFLLEVBQUFqQixjQUFBLEdBQUFFLENBQUEsT0FBRyxLQUFNLENBQUFLLFdBQUEsQ0FBQVcsT0FBTyxDQUFDQyxRQUFRLENBQUMsQ0FDbkNDLFFBQVEsQ0FBRSxTQUFTLENBQ25CTCxJLENBQ0QsQ0FBQyxFQUFDZixjQUFBLEdBQUFFLENBQUEsT0FDSCxHQUFBTSxPQUFBLENBQUFhLGdCQUFnQixFQUFDSixLQUFLLENBQUMsQ0FDekIsQ0FBQyxDQUFDLENBQ0osQ0FBQyxDQUFDLENBQUNqQixjQUFBLEdBQUFFLENBQUEsT0FFSCxHQUFBRyxPQUFBLENBQUFXLElBQUksRUFBQyx5Q0FBeUMsQ0FBRSxTQUFXLENBQUFoQixjQUFBLEdBQUFVLENBQUEsTUFBQVYsY0FBQSxHQUFBRSxDQUFBLE9BQ3pELEtBQU0sR0FBQUUsTUFBQSxDQUFBa0IsTUFBTSxFQUNWZixXQUFBLENBQUFXLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLENBQ2ZDLFFBQVEsQ0FBRSxTQUFTLENBQ25CTCxJQUFJLENBQUVULE9BQUEsQ0FBQUssU0FBUyxDQUFDQyxPQUFPLENBQ3ZCVyxLQUFLLENBQUUsNEMsQ0FDUixDQUFDLENBQ0gsQ0FDRUMsRUFBRSxDQUFDQyxVQUFVLENBQUNDLEVBQUUsQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLENBQUNGLEVBQUUsQ0FBQ0csRUFBRSxDQUFDQyxVQUFVLENBQUNDLEtBQUssQ0FBQyxDQUNyREgsR0FBRyxDQUFDSSxJQUFJLENBQUNDLFFBQVEsQ0FBQyxTQUFTLENBQUUsb0NBQW9DLENBQUMsQ0FDdkUsQ0FBQyxDQUFDLENBQUNqQyxjQUFBLEdBQUFFLENBQUEsT0FFSCxDQUFDSSxPQUFBLENBQUFLLFNBQVMsQ0FBQ0MsT0FBTyxDQUFFTixPQUFBLENBQUFLLFNBQVMsQ0FBQ0UsS0FBSyxDQUFDLENBQUNDLE9BQU8sQ0FBRUMsSUFBSSxFQUFJLENBQUFmLGNBQUEsR0FBQVUsQ0FBQSxNQUFBVixjQUFBLEdBQUFFLENBQUEsT0FDcEQsR0FBQUcsT0FBQSxDQUFBVyxJQUFJLEVBQUMsOENBQThDRCxJQUFJLEVBQUUsQ0FBRSxTQUFXLENBQUFmLGNBQUEsR0FBQVUsQ0FBQSxNQUNwRSxLQUFNLENBQUV3QixNQUFNLENBQUVDLElBQUksQ0FBRSxFQUFBbkMsY0FBQSxHQUFBRSxDQUFBLE9BQUcsS0FBTSxDQUFBSyxXQUFBLENBQUFXLE9BQU8sQ0FBQ2tCLFNBQVMsQ0FBQyxDQUMvQ2hCLFFBQVEsQ0FBRSxTQUFTLENBQ25CTCxJQUFJLENBQ0pzQixRQUFRLENBQUU5QixXQUFBLENBQUErQixjQUFjLENBQ3hCQyxvQkFBb0IsQ0FBRWhDLFdBQUEsQ0FBQWlDLHFCLENBQ3ZCLENBQUMsRUFBQ3hDLGNBQUEsR0FBQUUsQ0FBQSxPQUNIZ0MsTUFBTSxDQUFDTyxHQUFHLENBQUV4QixLQUFLLEVBQUssQ0FBQWpCLGNBQUEsR0FBQVUsQ0FBQSxNQUFBVixjQUFBLEdBQUFFLENBQUEsZ0JBQUFNLE9BQUEsQ0FBQWEsZ0JBQWdCLEVBQUNKLEtBQUssQ0FBQyxDQUFELENBQUMsQ0FBQyxDQUFDakIsY0FBQSxHQUFBRSxDQUFBLE9BQy9DLEdBQUFFLE1BQUEsQ0FBQWtCLE1BQU0sRUFBQ2EsSUFBSSxDQUFDLENBQUNYLEVBQUUsQ0FBQ2tCLEdBQUcsQ0FBQ2hCLEVBQUUsQ0FBQ2lCLFNBQVMsQ0FDbEMsQ0FBQyxDQUFDLENBQ0osQ0FBQyxDQUFDLENBQ0osQ0FBQyxDQUFDLEMiLCJpZ25vcmVMaXN0IjpbXX0=