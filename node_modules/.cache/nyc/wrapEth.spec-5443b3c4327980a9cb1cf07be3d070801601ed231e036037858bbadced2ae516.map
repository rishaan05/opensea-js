{"version":3,"file":"/Users/rg/dev/opensea-js/test/integration/wrapEth.spec.ts","sources":["/Users/rg/dev/opensea-js/test/integration/wrapEth.spec.ts"],"names":[],"mappings":";;AAAA,+BAA8B;AAC9B,mCAAoC;AACpC,iCAAuC;AACvC,mCAA0D;AAC1D,2CAAgD;AAChD,2CAAiD;AAEjD,IAAA,gBAAQ,EAAC,WAAW,EAAE,GAAG,EAAE;IACzB,IAAA,YAAI,EAAC,qBAAqB,EAAE,KAAK;QAC/B,IAAI,CAAC,mBAAW,EAAE,CAAC;YACjB,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC;QAED,MAAM,SAAS,GAAG;YAChB,YAAY,EAAE,IAAA,sBAAc,EAAC,WAAG,CAAC,KAAK,CAAC;YACvC,OAAO,EAAE,IAAI;YACb,aAAa,EAAE,qBAAa,CAAC,KAAK;SACnC,CAAC;QACF,MAAM,mBAAmB,GAAG,MAAM,WAAG,CAAC,UAAU,CAAC;YAC/C,cAAc,EAAE,qBAAa;YAC7B,KAAK,EAAE,SAAS;SACjB,CAAC,CAAC;QAEH,MAAM,WAAG,CAAC,OAAO,CAAC;YAChB,WAAW,EAAE,mBAAW;YACxB,cAAc,EAAE,qBAAa;SAC9B,CAAC,CAAC;QAEH,MAAM,iBAAiB,GAAG,MAAM,WAAG,CAAC,UAAU,CAAC;YAC7C,cAAc,EAAE,qBAAa;YAC7B,KAAK,EAAE,SAAS;SACjB,CAAC,CAAC;QAEH,MAAM,cAAc,GAAG,IAAA,mBAAU,EAAC,mBAAW,CAAC,CAAC;QAE/C,aAAM,CAAC,KAAK,CACV,mBAAmB,GAAG,cAAc,EACpC,iBAAiB,EACjB,wBAAwB,CACzB,CAAC;QAEF,MAAM,WAAG,CAAC,UAAU,CAAC;YACnB,WAAW,EAAE,mBAAW;YACxB,cAAc,EAAE,qBAAa;SAC9B,CAAC,CAAC;QAEH,MAAM,gBAAgB,GAAG,MAAM,WAAG,CAAC,UAAU,CAAC;YAC5C,cAAc,EAAE,qBAAa;YAC7B,KAAK,EAAE,SAAS;SACjB,CAAC,CAAC;QACH,aAAM,CAAC,KAAK,CACV,mBAAmB,CAAC,QAAQ,EAAE,EAC9B,gBAAgB,CAAC,QAAQ,EAAE,EAC3B,wBAAwB,CACzB,CAAC;IACJ,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from \"chai\";\nimport { parseEther } from \"ethers\";\nimport { describe, test } from \"mocha\";\nimport { ETH_TO_WRAP, sdk, walletAddress } from \"./setup\";\nimport { TokenStandard } from \"../../src/types\";\nimport { getWETHAddress } from \"../../src/utils\";\n\ndescribe(\"SDK: WETH\", () => {\n  test(\"Wrap ETH and Unwrap\", async function () {\n    if (!ETH_TO_WRAP) {\n      this.skip();\n    }\n\n    const wethAsset = {\n      tokenAddress: getWETHAddress(sdk.chain),\n      tokenId: null,\n      tokenStandard: TokenStandard.ERC20,\n    };\n    const startingWethBalance = await sdk.getBalance({\n      accountAddress: walletAddress,\n      asset: wethAsset,\n    });\n\n    await sdk.wrapEth({\n      amountInEth: ETH_TO_WRAP,\n      accountAddress: walletAddress,\n    });\n\n    const endingWethBalance = await sdk.getBalance({\n      accountAddress: walletAddress,\n      asset: wethAsset,\n    });\n\n    const ethToWrapInWei = parseEther(ETH_TO_WRAP);\n\n    assert.equal(\n      startingWethBalance + ethToWrapInWei,\n      endingWethBalance,\n      \"Balances should match.\",\n    );\n\n    await sdk.unwrapWeth({\n      amountInEth: ETH_TO_WRAP,\n      accountAddress: walletAddress,\n    });\n\n    const finalWethBalance = await sdk.getBalance({\n      accountAddress: walletAddress,\n      asset: wethAsset,\n    });\n    assert.equal(\n      startingWethBalance.toString(),\n      finalWethBalance.toString(),\n      \"Balances should match.\",\n    );\n  }).timeout(30000);\n});\n"]}