"use strict";function cov_1v9tp8m4ry(){var path="/Users/rg/dev/opensea-js/src/api/types.ts";var hash="e816d4803ea3aee82758ac182a51add67cbfd072";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/src/api/types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:68}},"2":{start:{line:5,column:0},end:{line:12,column:96}},"3":{start:{line:6,column:4},end:{line:6,column:61}},"4":{start:{line:7,column:4},end:{line:7,column:65}},"5":{start:{line:8,column:4},end:{line:8,column:69}},"6":{start:{line:9,column:4},end:{line:9,column:69}},"7":{start:{line:10,column:4},end:{line:10,column:57}},"8":{start:{line:11,column:4},end:{line:11,column:57}},"9":{start:{line:18,column:0},end:{line:26,column:75}},"10":{start:{line:19,column:4},end:{line:19,column:42}},"11":{start:{line:20,column:4},end:{line:20,column:62}},"12":{start:{line:21,column:4},end:{line:21,column:54}},"13":{start:{line:22,column:4},end:{line:22,column:42}},"14":{start:{line:23,column:4},end:{line:23,column:38}},"15":{start:{line:25,column:4},end:{line:25,column:38}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:1},end:{line:5,column:2}},loc:{start:{line:5,column:36},end:{line:12,column:1}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:1},end:{line:18,column:2}},loc:{start:{line:18,column:29},end:{line:26,column:1}},line:18}},branchMap:{"0":{loc:{start:{line:12,column:3},end:{line:12,column:94}},type:"binary-expr",locations:[{start:{line:12,column:3},end:{line:12,column:26}},{start:{line:12,column:31},end:{line:12,column:93}}],line:12},"1":{loc:{start:{line:26,column:3},end:{line:26,column:73}},type:"binary-expr",locations:[{start:{line:26,column:3},end:{line:26,column:19}},{start:{line:26,column:24},end:{line:26,column:72}}],line:26}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/src/api/types.ts",sources:["/Users/rg/dev/opensea-js/src/api/types.ts"],names:[],mappings:";;;AAuFA,IAAY,uBAOX;AAPD,WAAY,uBAAuB;IACjC,wDAA6B,CAAA;IAC7B,4DAAiC,CAAA;IACjC,gEAAqC,CAAA;IACrC,gEAAqC,CAAA;IACrC,oDAAyB,CAAA;IACzB,oDAAyB,CAAA;AAC3B,CAAC,EAPW,uBAAuB,uCAAvB,uBAAuB,QAOlC;AA6MD;;;GAGG;AACH,IAAY,gBAQX;AARD,WAAY,gBAAgB;IAC1B,qCAAiB,CAAA;IACjB,yDAAqC,CAAA;IACrC,iDAA6B,CAAA;IAC7B,qCAAiB,CAAA;IACjB,iCAAa,CAAA;IACb,uCAAuC;IACvC,iCAAa,CAAA;AACf,CAAC,EARW,gBAAgB,gCAAhB,gBAAgB,QAQ3B",sourcesContent:["import { ConsiderationItem } from \"@opensea/seaport-js/lib/types\";\nimport {\n  OrderType,\n  OrderV2,\n  ProtocolData,\n  QueryCursors,\n} from \"../orders/types\";\nimport { OpenSeaCollection } from \"../types\";\n\n/**\n * Response from OpenSea API for building an offer.\n * @category API Response Types\n */\nexport type BuildOfferResponse = {\n  /** A portion of the parameters needed to submit a criteria offer, i.e. collection offer. */\n  partialParameters: PartialParameters;\n};\n\ntype PartialParameters = {\n  consideration: ConsiderationItem[];\n  zone: string;\n  zoneHash: string;\n};\n\n/**\n * Criteria for collection or trait offers.\n * @category API Response Types\n */\ntype Criteria = {\n  /** The collection for the criteria */\n  collection: CollectionCriteria;\n  /** The contract for the criteria */\n  contract: ContractCriteria;\n  /** Represents a list of token ids which can be used to fulfill the criteria offer. */\n  encoded_token_ids?: string;\n  /** The trait for the criteria */\n  trait?: TraitCriteria;\n};\n\n/**\n * Criteria for trait offers.\n * @category API Response Types\n */\ntype TraitCriteria = {\n  type: string;\n  value: string;\n};\n\ntype CollectionCriteria = {\n  slug: string;\n};\n\ntype ContractCriteria = {\n  address: string;\n};\n\n/**\n * Query args for Get Collections\n * @category API Query Args\n */\nexport interface GetCollectionsArgs {\n  order_by?: string;\n  limit?: number;\n  next?: string;\n  chain?: string;\n  creator_username?: string;\n  include_hidden?: boolean;\n}\n\n/**\n * Response from OpenSea API for fetching a single collection.\n * @category API Response Types\n */\nexport type GetCollectionResponse = {\n  /** Collection object. See {@link OpenSeaCollection} */\n  collection: OpenSeaCollection;\n};\n\n/**\n * Response from OpenSea API for fetching a list of collections.\n * @category API Response Types\n */\nexport type GetCollectionsResponse = QueryCursorsV2 & {\n  /** List of collections. See {@link OpenSeaCollection} */\n  collections: OpenSeaCollection[];\n};\n\nexport enum CollectionOrderByOption {\n  CREATED_DATE = \"created_date\",\n  ONE_DAY_CHANGE = \"one_day_change\",\n  SEVEN_DAY_VOLUME = \"seven_day_volume\",\n  SEVEN_DAY_CHANGE = \"seven_day_change\",\n  NUM_OWNERS = \"num_owners\",\n  MARKET_CAP = \"market_cap\",\n}\n\n/**\n * Base Order type shared between Listings and Offers.\n * @category API Models\n */\nexport type Order = {\n  /** Offer Identifier */\n  order_hash: string;\n  /** Chain the offer exists on */\n  chain: string;\n  /** The protocol data for the order. Only 'seaport' is currently supported. */\n  protocol_data: ProtocolData;\n  /** The contract address of the protocol. */\n  protocol_address: string;\n  /** The price of the order. */\n  price: Price;\n};\n\n/**\n * Offer type.\n * @category API Models\n */\nexport type Offer = Order & {\n  /** The criteria for the offer if it is a collection or trait offer. */\n  criteria?: Criteria;\n};\n\n/**\n * Collection Offer type.\n * @category API Models\n */\nexport type CollectionOffer = Required<Pick<Offer, \"criteria\">> & Offer;\n\n/**\n * Price response.\n * @category API Models\n */\nexport type Price = {\n  current: {\n    currency: string;\n    decimals: number;\n    value: string;\n  };\n};\n\n/**\n * Listing order type.\n * @category API Models\n */\nexport type Listing = Order & {\n  /** The order type of the listing. */\n  type: OrderType;\n};\n\n/**\n * Response from OpenSea API for fetching a list of collection offers.\n * @category API Response Types\n */\nexport type ListCollectionOffersResponse = {\n  /** List of {@link Offer} */\n  offers: CollectionOffer[];\n};\n\n/**\n * Response from OpenSea API for fetching a list of NFTs.\n * @category API Response Types\n */\nexport type ListNFTsResponse = {\n  /** List of {@link NFT} */\n  nfts: NFT[];\n  /** Cursor for next page of results. */\n  next: string;\n};\n\n/**\n * Response from OpenSea API for fetching a single NFT.\n * @category API Response Types\n */\nexport type GetNFTResponse = {\n  /** See {@link NFT} */\n  nft: NFT;\n};\n\n/**\n * Response from OpenSea API for fetching Orders.\n * @category API Response Types\n */\nexport type GetOrdersResponse = QueryCursors & {\n  /** List of {@link OrderV2} */\n  orders: OrderV2[];\n};\n\n/**\n * Base query cursors response from OpenSea API.\n * @category API Response Types\n */\nexport type QueryCursorsV2 = {\n  next?: string;\n};\n\n/**\n * Response from OpenSea API for fetching offers.\n * @category API Response Types\n */\nexport type GetOffersResponse = QueryCursorsV2 & {\n  offers: Offer[];\n};\n\n/**\n * Response from OpenSea API for fetching listings.\n * @category API Response Types\n */\nexport type GetListingsResponse = QueryCursorsV2 & {\n  listings: Listing[];\n};\n\n/**\n * Response from OpenSea API for fetching a best offer.\n * @category API Response Types\n */\nexport type GetBestOfferResponse = Offer | CollectionOffer;\n\n/**\n * Response from OpenSea API for fetching a best listing.\n * @category API Response Types\n */\nexport type GetBestListingResponse = Listing;\n\n/**\n * Response from OpenSea API for offchain canceling an order.\n * @category API Response Types\n */\nexport type CancelOrderResponse = {\n  last_signature_issued_valid_until: string | null;\n};\n\n/**\n * NFT type returned by OpenSea API.\n * @category API Models\n */\nexport type NFT = {\n  /** NFT Identifier (also commonly referred to as tokenId) */\n  identifier: string;\n  /** Slug identifier of collection */\n  collection: string;\n  /** Address of contract */\n  contract: string;\n  /** Token standard, i.e. ERC721, ERC1155, etc. */\n  token_standard: string;\n  /** Name of NFT */\n  name: string;\n  /** Description of NFT */\n  description: string;\n  /** URL of image */\n  image_url: string;\n  /** URL of metadata */\n  metadata_url: string;\n  /** URL on OpenSea */\n  opensea_url: string;\n  /** Date of latest NFT update */\n  updated_at: string;\n  /** Whether NFT is disabled for trading on OpenSea */\n  is_disabled: boolean;\n  /** Whether NFT is NSFW (Not Safe For Work) */\n  is_nsfw: boolean;\n  /** Traits for the NFT, returns null if the NFT has than 50 traits */\n  traits: Trait[] | null;\n  /** Creator of the NFT */\n  creator: string;\n  /** Owners of the NFT */\n  owners: {\n    address: string;\n    quantity: number;\n  }[];\n  /** Rarity of the NFT */\n  rarity: null | {\n    strategy_id: string | null;\n    strategy_version: string | null;\n    rank: number | null;\n    score: number | null;\n    calculated_at: string;\n    max_rank: number | null;\n    tokens_scored: number | null;\n    ranking_features: null | {\n      unique_attribute_count: number;\n    };\n  };\n};\n\n/**\n * Trait type returned by OpenSea API.\n * @category API Models\n */\nexport type Trait = {\n  /** The name of the trait category (e.g. 'Background') */\n  trait_type: string;\n  /** A field indicating how to display. None is used for string traits. */\n  display_type: TraitDisplayType;\n  /** Ceiling for possible numeric trait values */\n  max_value: string;\n  /** The value of the trait (e.g. 'Red') */\n  value: string | number | Date;\n};\n\n/**\n * Trait display type returned by OpenSea API.\n * @category API Models\n */\nexport enum TraitDisplayType {\n  NUMBER = \"number\",\n  BOOST_PERCENTAGE = \"boost_percentage\",\n  BOOST_NUMBER = \"boost_number\",\n  AUTHOR = \"author\",\n  DATE = \"date\",\n  /** \"None\" is used for string traits */\n  NONE = \"None\",\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e816d4803ea3aee82758ac182a51add67cbfd072"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1v9tp8m4ry=function(){return actualCoverage;};}return actualCoverage;}cov_1v9tp8m4ry();cov_1v9tp8m4ry().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1v9tp8m4ry().s[1]++;exports.TraitDisplayType=exports.CollectionOrderByOption=void 0;var CollectionOrderByOption;cov_1v9tp8m4ry().s[2]++;(function(CollectionOrderByOption){cov_1v9tp8m4ry().f[0]++;cov_1v9tp8m4ry().s[3]++;CollectionOrderByOption["CREATED_DATE"]="created_date";cov_1v9tp8m4ry().s[4]++;CollectionOrderByOption["ONE_DAY_CHANGE"]="one_day_change";cov_1v9tp8m4ry().s[5]++;CollectionOrderByOption["SEVEN_DAY_VOLUME"]="seven_day_volume";cov_1v9tp8m4ry().s[6]++;CollectionOrderByOption["SEVEN_DAY_CHANGE"]="seven_day_change";cov_1v9tp8m4ry().s[7]++;CollectionOrderByOption["NUM_OWNERS"]="num_owners";cov_1v9tp8m4ry().s[8]++;CollectionOrderByOption["MARKET_CAP"]="market_cap";})((cov_1v9tp8m4ry().b[0][0]++,CollectionOrderByOption)||(cov_1v9tp8m4ry().b[0][1]++,exports.CollectionOrderByOption=CollectionOrderByOption={}));/**
 * Trait display type returned by OpenSea API.
 * @category API Models
 */var TraitDisplayType;cov_1v9tp8m4ry().s[9]++;(function(TraitDisplayType){cov_1v9tp8m4ry().f[1]++;cov_1v9tp8m4ry().s[10]++;TraitDisplayType["NUMBER"]="number";cov_1v9tp8m4ry().s[11]++;TraitDisplayType["BOOST_PERCENTAGE"]="boost_percentage";cov_1v9tp8m4ry().s[12]++;TraitDisplayType["BOOST_NUMBER"]="boost_number";cov_1v9tp8m4ry().s[13]++;TraitDisplayType["AUTHOR"]="author";cov_1v9tp8m4ry().s[14]++;TraitDisplayType["DATE"]="date";/** "None" is used for string traits */cov_1v9tp8m4ry().s[15]++;TraitDisplayType["NONE"]="None";})((cov_1v9tp8m4ry().b[1][0]++,TraitDisplayType)||(cov_1v9tp8m4ry().b[1][1]++,exports.TraitDisplayType=TraitDisplayType={}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JnL2Rldi9vcGVuc2VhLWpzL3NyYy9hcGkvdHlwZXMudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yZy9kZXYvb3BlbnNlYS1qcy9zcmMvYXBpL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQXVGQSxJQUFZLHVCQU9YO0FBUEQsV0FBWSx1QkFBdUI7SUFDakMsd0RBQTZCLENBQUE7SUFDN0IsNERBQWlDLENBQUE7SUFDakMsZ0VBQXFDLENBQUE7SUFDckMsZ0VBQXFDLENBQUE7SUFDckMsb0RBQXlCLENBQUE7SUFDekIsb0RBQXlCLENBQUE7QUFDM0IsQ0FBQyxFQVBXLHVCQUF1Qix1Q0FBdkIsdUJBQXVCLFFBT2xDO0FBNk1EOzs7R0FHRztBQUNILElBQVksZ0JBUVg7QUFSRCxXQUFZLGdCQUFnQjtJQUMxQixxQ0FBaUIsQ0FBQTtJQUNqQix5REFBcUMsQ0FBQTtJQUNyQyxpREFBNkIsQ0FBQTtJQUM3QixxQ0FBaUIsQ0FBQTtJQUNqQixpQ0FBYSxDQUFBO0lBQ2IsdUNBQXVDO0lBQ3ZDLGlDQUFhLENBQUE7QUFDZixDQUFDLEVBUlcsZ0JBQWdCLGdDQUFoQixnQkFBZ0IsUUFRM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zaWRlcmF0aW9uSXRlbSB9IGZyb20gXCJAb3BlbnNlYS9zZWFwb3J0LWpzL2xpYi90eXBlc1wiO1xuaW1wb3J0IHtcbiAgT3JkZXJUeXBlLFxuICBPcmRlclYyLFxuICBQcm90b2NvbERhdGEsXG4gIFF1ZXJ5Q3Vyc29ycyxcbn0gZnJvbSBcIi4uL29yZGVycy90eXBlc1wiO1xuaW1wb3J0IHsgT3BlblNlYUNvbGxlY3Rpb24gfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuLyoqXG4gKiBSZXNwb25zZSBmcm9tIE9wZW5TZWEgQVBJIGZvciBidWlsZGluZyBhbiBvZmZlci5cbiAqIEBjYXRlZ29yeSBBUEkgUmVzcG9uc2UgVHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgQnVpbGRPZmZlclJlc3BvbnNlID0ge1xuICAvKiogQSBwb3J0aW9uIG9mIHRoZSBwYXJhbWV0ZXJzIG5lZWRlZCB0byBzdWJtaXQgYSBjcml0ZXJpYSBvZmZlciwgaS5lLiBjb2xsZWN0aW9uIG9mZmVyLiAqL1xuICBwYXJ0aWFsUGFyYW1ldGVyczogUGFydGlhbFBhcmFtZXRlcnM7XG59O1xuXG50eXBlIFBhcnRpYWxQYXJhbWV0ZXJzID0ge1xuICBjb25zaWRlcmF0aW9uOiBDb25zaWRlcmF0aW9uSXRlbVtdO1xuICB6b25lOiBzdHJpbmc7XG4gIHpvbmVIYXNoOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIENyaXRlcmlhIGZvciBjb2xsZWN0aW9uIG9yIHRyYWl0IG9mZmVycy5cbiAqIEBjYXRlZ29yeSBBUEkgUmVzcG9uc2UgVHlwZXNcbiAqL1xudHlwZSBDcml0ZXJpYSA9IHtcbiAgLyoqIFRoZSBjb2xsZWN0aW9uIGZvciB0aGUgY3JpdGVyaWEgKi9cbiAgY29sbGVjdGlvbjogQ29sbGVjdGlvbkNyaXRlcmlhO1xuICAvKiogVGhlIGNvbnRyYWN0IGZvciB0aGUgY3JpdGVyaWEgKi9cbiAgY29udHJhY3Q6IENvbnRyYWN0Q3JpdGVyaWE7XG4gIC8qKiBSZXByZXNlbnRzIGEgbGlzdCBvZiB0b2tlbiBpZHMgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVsZmlsbCB0aGUgY3JpdGVyaWEgb2ZmZXIuICovXG4gIGVuY29kZWRfdG9rZW5faWRzPzogc3RyaW5nO1xuICAvKiogVGhlIHRyYWl0IGZvciB0aGUgY3JpdGVyaWEgKi9cbiAgdHJhaXQ/OiBUcmFpdENyaXRlcmlhO1xufTtcblxuLyoqXG4gKiBDcml0ZXJpYSBmb3IgdHJhaXQgb2ZmZXJzLlxuICogQGNhdGVnb3J5IEFQSSBSZXNwb25zZSBUeXBlc1xuICovXG50eXBlIFRyYWl0Q3JpdGVyaWEgPSB7XG4gIHR5cGU6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn07XG5cbnR5cGUgQ29sbGVjdGlvbkNyaXRlcmlhID0ge1xuICBzbHVnOiBzdHJpbmc7XG59O1xuXG50eXBlIENvbnRyYWN0Q3JpdGVyaWEgPSB7XG4gIGFkZHJlc3M6IHN0cmluZztcbn07XG5cbi8qKlxuICogUXVlcnkgYXJncyBmb3IgR2V0IENvbGxlY3Rpb25zXG4gKiBAY2F0ZWdvcnkgQVBJIFF1ZXJ5IEFyZ3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHZXRDb2xsZWN0aW9uc0FyZ3Mge1xuICBvcmRlcl9ieT86IHN0cmluZztcbiAgbGltaXQ/OiBudW1iZXI7XG4gIG5leHQ/OiBzdHJpbmc7XG4gIGNoYWluPzogc3RyaW5nO1xuICBjcmVhdG9yX3VzZXJuYW1lPzogc3RyaW5nO1xuICBpbmNsdWRlX2hpZGRlbj86IGJvb2xlYW47XG59XG5cbi8qKlxuICogUmVzcG9uc2UgZnJvbSBPcGVuU2VhIEFQSSBmb3IgZmV0Y2hpbmcgYSBzaW5nbGUgY29sbGVjdGlvbi5cbiAqIEBjYXRlZ29yeSBBUEkgUmVzcG9uc2UgVHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgR2V0Q29sbGVjdGlvblJlc3BvbnNlID0ge1xuICAvKiogQ29sbGVjdGlvbiBvYmplY3QuIFNlZSB7QGxpbmsgT3BlblNlYUNvbGxlY3Rpb259ICovXG4gIGNvbGxlY3Rpb246IE9wZW5TZWFDb2xsZWN0aW9uO1xufTtcblxuLyoqXG4gKiBSZXNwb25zZSBmcm9tIE9wZW5TZWEgQVBJIGZvciBmZXRjaGluZyBhIGxpc3Qgb2YgY29sbGVjdGlvbnMuXG4gKiBAY2F0ZWdvcnkgQVBJIFJlc3BvbnNlIFR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIEdldENvbGxlY3Rpb25zUmVzcG9uc2UgPSBRdWVyeUN1cnNvcnNWMiAmIHtcbiAgLyoqIExpc3Qgb2YgY29sbGVjdGlvbnMuIFNlZSB7QGxpbmsgT3BlblNlYUNvbGxlY3Rpb259ICovXG4gIGNvbGxlY3Rpb25zOiBPcGVuU2VhQ29sbGVjdGlvbltdO1xufTtcblxuZXhwb3J0IGVudW0gQ29sbGVjdGlvbk9yZGVyQnlPcHRpb24ge1xuICBDUkVBVEVEX0RBVEUgPSBcImNyZWF0ZWRfZGF0ZVwiLFxuICBPTkVfREFZX0NIQU5HRSA9IFwib25lX2RheV9jaGFuZ2VcIixcbiAgU0VWRU5fREFZX1ZPTFVNRSA9IFwic2V2ZW5fZGF5X3ZvbHVtZVwiLFxuICBTRVZFTl9EQVlfQ0hBTkdFID0gXCJzZXZlbl9kYXlfY2hhbmdlXCIsXG4gIE5VTV9PV05FUlMgPSBcIm51bV9vd25lcnNcIixcbiAgTUFSS0VUX0NBUCA9IFwibWFya2V0X2NhcFwiLFxufVxuXG4vKipcbiAqIEJhc2UgT3JkZXIgdHlwZSBzaGFyZWQgYmV0d2VlbiBMaXN0aW5ncyBhbmQgT2ZmZXJzLlxuICogQGNhdGVnb3J5IEFQSSBNb2RlbHNcbiAqL1xuZXhwb3J0IHR5cGUgT3JkZXIgPSB7XG4gIC8qKiBPZmZlciBJZGVudGlmaWVyICovXG4gIG9yZGVyX2hhc2g6IHN0cmluZztcbiAgLyoqIENoYWluIHRoZSBvZmZlciBleGlzdHMgb24gKi9cbiAgY2hhaW46IHN0cmluZztcbiAgLyoqIFRoZSBwcm90b2NvbCBkYXRhIGZvciB0aGUgb3JkZXIuIE9ubHkgJ3NlYXBvcnQnIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuICovXG4gIHByb3RvY29sX2RhdGE6IFByb3RvY29sRGF0YTtcbiAgLyoqIFRoZSBjb250cmFjdCBhZGRyZXNzIG9mIHRoZSBwcm90b2NvbC4gKi9cbiAgcHJvdG9jb2xfYWRkcmVzczogc3RyaW5nO1xuICAvKiogVGhlIHByaWNlIG9mIHRoZSBvcmRlci4gKi9cbiAgcHJpY2U6IFByaWNlO1xufTtcblxuLyoqXG4gKiBPZmZlciB0eXBlLlxuICogQGNhdGVnb3J5IEFQSSBNb2RlbHNcbiAqL1xuZXhwb3J0IHR5cGUgT2ZmZXIgPSBPcmRlciAmIHtcbiAgLyoqIFRoZSBjcml0ZXJpYSBmb3IgdGhlIG9mZmVyIGlmIGl0IGlzIGEgY29sbGVjdGlvbiBvciB0cmFpdCBvZmZlci4gKi9cbiAgY3JpdGVyaWE/OiBDcml0ZXJpYTtcbn07XG5cbi8qKlxuICogQ29sbGVjdGlvbiBPZmZlciB0eXBlLlxuICogQGNhdGVnb3J5IEFQSSBNb2RlbHNcbiAqL1xuZXhwb3J0IHR5cGUgQ29sbGVjdGlvbk9mZmVyID0gUmVxdWlyZWQ8UGljazxPZmZlciwgXCJjcml0ZXJpYVwiPj4gJiBPZmZlcjtcblxuLyoqXG4gKiBQcmljZSByZXNwb25zZS5cbiAqIEBjYXRlZ29yeSBBUEkgTW9kZWxzXG4gKi9cbmV4cG9ydCB0eXBlIFByaWNlID0ge1xuICBjdXJyZW50OiB7XG4gICAgY3VycmVuY3k6IHN0cmluZztcbiAgICBkZWNpbWFsczogbnVtYmVyO1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gIH07XG59O1xuXG4vKipcbiAqIExpc3Rpbmcgb3JkZXIgdHlwZS5cbiAqIEBjYXRlZ29yeSBBUEkgTW9kZWxzXG4gKi9cbmV4cG9ydCB0eXBlIExpc3RpbmcgPSBPcmRlciAmIHtcbiAgLyoqIFRoZSBvcmRlciB0eXBlIG9mIHRoZSBsaXN0aW5nLiAqL1xuICB0eXBlOiBPcmRlclR5cGU7XG59O1xuXG4vKipcbiAqIFJlc3BvbnNlIGZyb20gT3BlblNlYSBBUEkgZm9yIGZldGNoaW5nIGEgbGlzdCBvZiBjb2xsZWN0aW9uIG9mZmVycy5cbiAqIEBjYXRlZ29yeSBBUEkgUmVzcG9uc2UgVHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgTGlzdENvbGxlY3Rpb25PZmZlcnNSZXNwb25zZSA9IHtcbiAgLyoqIExpc3Qgb2Yge0BsaW5rIE9mZmVyfSAqL1xuICBvZmZlcnM6IENvbGxlY3Rpb25PZmZlcltdO1xufTtcblxuLyoqXG4gKiBSZXNwb25zZSBmcm9tIE9wZW5TZWEgQVBJIGZvciBmZXRjaGluZyBhIGxpc3Qgb2YgTkZUcy5cbiAqIEBjYXRlZ29yeSBBUEkgUmVzcG9uc2UgVHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgTGlzdE5GVHNSZXNwb25zZSA9IHtcbiAgLyoqIExpc3Qgb2Yge0BsaW5rIE5GVH0gKi9cbiAgbmZ0czogTkZUW107XG4gIC8qKiBDdXJzb3IgZm9yIG5leHQgcGFnZSBvZiByZXN1bHRzLiAqL1xuICBuZXh0OiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIFJlc3BvbnNlIGZyb20gT3BlblNlYSBBUEkgZm9yIGZldGNoaW5nIGEgc2luZ2xlIE5GVC5cbiAqIEBjYXRlZ29yeSBBUEkgUmVzcG9uc2UgVHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgR2V0TkZUUmVzcG9uc2UgPSB7XG4gIC8qKiBTZWUge0BsaW5rIE5GVH0gKi9cbiAgbmZ0OiBORlQ7XG59O1xuXG4vKipcbiAqIFJlc3BvbnNlIGZyb20gT3BlblNlYSBBUEkgZm9yIGZldGNoaW5nIE9yZGVycy5cbiAqIEBjYXRlZ29yeSBBUEkgUmVzcG9uc2UgVHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgR2V0T3JkZXJzUmVzcG9uc2UgPSBRdWVyeUN1cnNvcnMgJiB7XG4gIC8qKiBMaXN0IG9mIHtAbGluayBPcmRlclYyfSAqL1xuICBvcmRlcnM6IE9yZGVyVjJbXTtcbn07XG5cbi8qKlxuICogQmFzZSBxdWVyeSBjdXJzb3JzIHJlc3BvbnNlIGZyb20gT3BlblNlYSBBUEkuXG4gKiBAY2F0ZWdvcnkgQVBJIFJlc3BvbnNlIFR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIFF1ZXJ5Q3Vyc29yc1YyID0ge1xuICBuZXh0Pzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBSZXNwb25zZSBmcm9tIE9wZW5TZWEgQVBJIGZvciBmZXRjaGluZyBvZmZlcnMuXG4gKiBAY2F0ZWdvcnkgQVBJIFJlc3BvbnNlIFR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIEdldE9mZmVyc1Jlc3BvbnNlID0gUXVlcnlDdXJzb3JzVjIgJiB7XG4gIG9mZmVyczogT2ZmZXJbXTtcbn07XG5cbi8qKlxuICogUmVzcG9uc2UgZnJvbSBPcGVuU2VhIEFQSSBmb3IgZmV0Y2hpbmcgbGlzdGluZ3MuXG4gKiBAY2F0ZWdvcnkgQVBJIFJlc3BvbnNlIFR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIEdldExpc3RpbmdzUmVzcG9uc2UgPSBRdWVyeUN1cnNvcnNWMiAmIHtcbiAgbGlzdGluZ3M6IExpc3RpbmdbXTtcbn07XG5cbi8qKlxuICogUmVzcG9uc2UgZnJvbSBPcGVuU2VhIEFQSSBmb3IgZmV0Y2hpbmcgYSBiZXN0IG9mZmVyLlxuICogQGNhdGVnb3J5IEFQSSBSZXNwb25zZSBUeXBlc1xuICovXG5leHBvcnQgdHlwZSBHZXRCZXN0T2ZmZXJSZXNwb25zZSA9IE9mZmVyIHwgQ29sbGVjdGlvbk9mZmVyO1xuXG4vKipcbiAqIFJlc3BvbnNlIGZyb20gT3BlblNlYSBBUEkgZm9yIGZldGNoaW5nIGEgYmVzdCBsaXN0aW5nLlxuICogQGNhdGVnb3J5IEFQSSBSZXNwb25zZSBUeXBlc1xuICovXG5leHBvcnQgdHlwZSBHZXRCZXN0TGlzdGluZ1Jlc3BvbnNlID0gTGlzdGluZztcblxuLyoqXG4gKiBSZXNwb25zZSBmcm9tIE9wZW5TZWEgQVBJIGZvciBvZmZjaGFpbiBjYW5jZWxpbmcgYW4gb3JkZXIuXG4gKiBAY2F0ZWdvcnkgQVBJIFJlc3BvbnNlIFR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIENhbmNlbE9yZGVyUmVzcG9uc2UgPSB7XG4gIGxhc3Rfc2lnbmF0dXJlX2lzc3VlZF92YWxpZF91bnRpbDogc3RyaW5nIHwgbnVsbDtcbn07XG5cbi8qKlxuICogTkZUIHR5cGUgcmV0dXJuZWQgYnkgT3BlblNlYSBBUEkuXG4gKiBAY2F0ZWdvcnkgQVBJIE1vZGVsc1xuICovXG5leHBvcnQgdHlwZSBORlQgPSB7XG4gIC8qKiBORlQgSWRlbnRpZmllciAoYWxzbyBjb21tb25seSByZWZlcnJlZCB0byBhcyB0b2tlbklkKSAqL1xuICBpZGVudGlmaWVyOiBzdHJpbmc7XG4gIC8qKiBTbHVnIGlkZW50aWZpZXIgb2YgY29sbGVjdGlvbiAqL1xuICBjb2xsZWN0aW9uOiBzdHJpbmc7XG4gIC8qKiBBZGRyZXNzIG9mIGNvbnRyYWN0ICovXG4gIGNvbnRyYWN0OiBzdHJpbmc7XG4gIC8qKiBUb2tlbiBzdGFuZGFyZCwgaS5lLiBFUkM3MjEsIEVSQzExNTUsIGV0Yy4gKi9cbiAgdG9rZW5fc3RhbmRhcmQ6IHN0cmluZztcbiAgLyoqIE5hbWUgb2YgTkZUICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqIERlc2NyaXB0aW9uIG9mIE5GVCAqL1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAvKiogVVJMIG9mIGltYWdlICovXG4gIGltYWdlX3VybDogc3RyaW5nO1xuICAvKiogVVJMIG9mIG1ldGFkYXRhICovXG4gIG1ldGFkYXRhX3VybDogc3RyaW5nO1xuICAvKiogVVJMIG9uIE9wZW5TZWEgKi9cbiAgb3BlbnNlYV91cmw6IHN0cmluZztcbiAgLyoqIERhdGUgb2YgbGF0ZXN0IE5GVCB1cGRhdGUgKi9cbiAgdXBkYXRlZF9hdDogc3RyaW5nO1xuICAvKiogV2hldGhlciBORlQgaXMgZGlzYWJsZWQgZm9yIHRyYWRpbmcgb24gT3BlblNlYSAqL1xuICBpc19kaXNhYmxlZDogYm9vbGVhbjtcbiAgLyoqIFdoZXRoZXIgTkZUIGlzIE5TRlcgKE5vdCBTYWZlIEZvciBXb3JrKSAqL1xuICBpc19uc2Z3OiBib29sZWFuO1xuICAvKiogVHJhaXRzIGZvciB0aGUgTkZULCByZXR1cm5zIG51bGwgaWYgdGhlIE5GVCBoYXMgdGhhbiA1MCB0cmFpdHMgKi9cbiAgdHJhaXRzOiBUcmFpdFtdIHwgbnVsbDtcbiAgLyoqIENyZWF0b3Igb2YgdGhlIE5GVCAqL1xuICBjcmVhdG9yOiBzdHJpbmc7XG4gIC8qKiBPd25lcnMgb2YgdGhlIE5GVCAqL1xuICBvd25lcnM6IHtcbiAgICBhZGRyZXNzOiBzdHJpbmc7XG4gICAgcXVhbnRpdHk6IG51bWJlcjtcbiAgfVtdO1xuICAvKiogUmFyaXR5IG9mIHRoZSBORlQgKi9cbiAgcmFyaXR5OiBudWxsIHwge1xuICAgIHN0cmF0ZWd5X2lkOiBzdHJpbmcgfCBudWxsO1xuICAgIHN0cmF0ZWd5X3ZlcnNpb246IHN0cmluZyB8IG51bGw7XG4gICAgcmFuazogbnVtYmVyIHwgbnVsbDtcbiAgICBzY29yZTogbnVtYmVyIHwgbnVsbDtcbiAgICBjYWxjdWxhdGVkX2F0OiBzdHJpbmc7XG4gICAgbWF4X3Jhbms6IG51bWJlciB8IG51bGw7XG4gICAgdG9rZW5zX3Njb3JlZDogbnVtYmVyIHwgbnVsbDtcbiAgICByYW5raW5nX2ZlYXR1cmVzOiBudWxsIHwge1xuICAgICAgdW5pcXVlX2F0dHJpYnV0ZV9jb3VudDogbnVtYmVyO1xuICAgIH07XG4gIH07XG59O1xuXG4vKipcbiAqIFRyYWl0IHR5cGUgcmV0dXJuZWQgYnkgT3BlblNlYSBBUEkuXG4gKiBAY2F0ZWdvcnkgQVBJIE1vZGVsc1xuICovXG5leHBvcnQgdHlwZSBUcmFpdCA9IHtcbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSB0cmFpdCBjYXRlZ29yeSAoZS5nLiAnQmFja2dyb3VuZCcpICovXG4gIHRyYWl0X3R5cGU6IHN0cmluZztcbiAgLyoqIEEgZmllbGQgaW5kaWNhdGluZyBob3cgdG8gZGlzcGxheS4gTm9uZSBpcyB1c2VkIGZvciBzdHJpbmcgdHJhaXRzLiAqL1xuICBkaXNwbGF5X3R5cGU6IFRyYWl0RGlzcGxheVR5cGU7XG4gIC8qKiBDZWlsaW5nIGZvciBwb3NzaWJsZSBudW1lcmljIHRyYWl0IHZhbHVlcyAqL1xuICBtYXhfdmFsdWU6IHN0cmluZztcbiAgLyoqIFRoZSB2YWx1ZSBvZiB0aGUgdHJhaXQgKGUuZy4gJ1JlZCcpICovXG4gIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBEYXRlO1xufTtcblxuLyoqXG4gKiBUcmFpdCBkaXNwbGF5IHR5cGUgcmV0dXJuZWQgYnkgT3BlblNlYSBBUEkuXG4gKiBAY2F0ZWdvcnkgQVBJIE1vZGVsc1xuICovXG5leHBvcnQgZW51bSBUcmFpdERpc3BsYXlUeXBlIHtcbiAgTlVNQkVSID0gXCJudW1iZXJcIixcbiAgQk9PU1RfUEVSQ0VOVEFHRSA9IFwiYm9vc3RfcGVyY2VudGFnZVwiLFxuICBCT09TVF9OVU1CRVIgPSBcImJvb3N0X251bWJlclwiLFxuICBBVVRIT1IgPSBcImF1dGhvclwiLFxuICBEQVRFID0gXCJkYXRlXCIsXG4gIC8qKiBcIk5vbmVcIiBpcyB1c2VkIGZvciBzdHJpbmcgdHJhaXRzICovXG4gIE5PTkUgPSBcIk5vbmVcIixcbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,