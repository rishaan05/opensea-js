"use strict";function cov_1wcoa2qd2y(){var path="/Users/rg/dev/opensea-js/test/api/postOrder.validation.spec.ts";var hash="fb80ab506194438c13ca1c023dd4229e42f2f5fa";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/test/api/postOrder.validation.spec.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:15},end:{line:3,column:30}},"2":{start:{line:4,column:16},end:{line:4,column:32}},"3":{start:{line:5,column:14},end:{line:5,column:42}},"4":{start:{line:6,column:16},end:{line:6,column:42}},"5":{start:{line:8,column:0},end:{line:103,column:3}},"6":{start:{line:9,column:16},end:{line:9,column:70}},"7":{start:{line:10,column:22},end:{line:25,column:5}},"8":{start:{line:26,column:4},end:{line:37,column:7}},"9":{start:{line:27,column:27},end:{line:29,column:9}},"10":{start:{line:30,column:8},end:{line:36,column:9}},"11":{start:{line:31,column:12},end:{line:31,column:55}},"12":{start:{line:32,column:12},end:{line:32,column:62}},"13":{start:{line:35,column:12},end:{line:35,column:86}},"14":{start:{line:38,column:4},end:{line:49,column:7}},"15":{start:{line:39,column:27},end:{line:41,column:9}},"16":{start:{line:42,column:8},end:{line:48,column:9}},"17":{start:{line:43,column:12},end:{line:43,column:55}},"18":{start:{line:44,column:12},end:{line:44,column:62}},"19":{start:{line:47,column:12},end:{line:47,column:97}},"20":{start:{line:50,column:4},end:{line:62,column:7}},"21":{start:{line:51,column:27},end:{line:54,column:9}},"22":{start:{line:55,column:8},end:{line:61,column:9}},"23":{start:{line:56,column:12},end:{line:56,column:50}},"24":{start:{line:57,column:12},end:{line:57,column:62}},"25":{start:{line:60,column:12},end:{line:60,column:81}},"26":{start:{line:63,column:4},end:{line:76,column:7}},"27":{start:{line:64,column:27},end:{line:68,column:9}},"28":{start:{line:69,column:8},end:{line:75,column:9}},"29":{start:{line:70,column:12},end:{line:70,column:55}},"30":{start:{line:71,column:12},end:{line:71,column:62}},"31":{start:{line:74,column:12},end:{line:74,column:105}},"32":{start:{line:77,column:4},end:{line:89,column:7}},"33":{start:{line:78,column:27},end:{line:81,column:9}},"34":{start:{line:82,column:8},end:{line:88,column:9}},"35":{start:{line:83,column:12},end:{line:83,column:55}},"36":{start:{line:84,column:12},end:{line:84,column:62}},"37":{start:{line:87,column:12},end:{line:87,column:93}},"38":{start:{line:90,column:4},end:{line:102,column:7}},"39":{start:{line:91,column:27},end:{line:94,column:9}},"40":{start:{line:95,column:8},end:{line:101,column:9}},"41":{start:{line:96,column:12},end:{line:96,column:55}},"42":{start:{line:97,column:12},end:{line:97,column:62}},"43":{start:{line:100,column:12},end:{line:100,column:90}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:8,column:48},end:{line:8,column:49}},loc:{start:{line:8,column:54},end:{line:103,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:26,column:65},end:{line:26,column:66}},loc:{start:{line:26,column:77},end:{line:37,column:5}},line:26},"2":{name:"(anonymous_2)",decl:{start:{line:38,column:76},end:{line:38,column:77}},loc:{start:{line:38,column:88},end:{line:49,column:5}},line:38},"3":{name:"(anonymous_3)",decl:{start:{line:50,column:66},end:{line:50,column:67}},loc:{start:{line:50,column:78},end:{line:62,column:5}},line:50},"4":{name:"(anonymous_4)",decl:{start:{line:63,column:69},end:{line:63,column:70}},loc:{start:{line:63,column:81},end:{line:76,column:5}},line:63},"5":{name:"(anonymous_5)",decl:{start:{line:77,column:67},end:{line:77,column:68}},loc:{start:{line:77,column:79},end:{line:89,column:5}},line:77},"6":{name:"(anonymous_6)",decl:{start:{line:90,column:80},end:{line:90,column:81}},loc:{start:{line:90,column:92},end:{line:102,column:5}},line:90}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/test/api/postOrder.validation.spec.ts",sources:["/Users/rg/dev/opensea-js/test/api/postOrder.validation.spec.ts"],names:[],mappings:"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",sourcesContent:["import { expect } from \"chai\";\nimport { suite, test } from \"mocha\";\nimport { OpenSeaAPI } from \"../../src/api/api\";\nimport { OrderAPIOptions } from \"../../src/orders/types\";\nimport { Chain, OrderSide } from \"../../src/types\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nsuite(\"API: postOrder validation\", () => {\n  const api = new OpenSeaAPI({ chain: Chain.Mainnet });\n  const mockOrder: any = {\n    parameters: {\n      offerer: \"0x1234567890123456789012345678901234567890\",\n      zone: \"0x1234567890123456789012345678901234567890\",\n      orderType: 0,\n      startTime: \"1234567890\",\n      endTime: \"9876543210\",\n      zoneHash:\n        \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n      salt: \"1234567890\",\n      offer: [],\n      consideration: [],\n      totalOriginalConsiderationItems: 0,\n      conduitKey:\n        \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    },\n    signature: \"0x\",\n  };\n\n  test(\"should throw error when side is missing\", async () => {\n    const apiOptions = {\n      protocolAddress: \"0x1234567890123456789012345678901234567890\",\n    };\n\n    try {\n      await api.postOrder(mockOrder, apiOptions as OrderAPIOptions);\n      expect.fail(\"Should have thrown an error\");\n    } catch (error: any) {\n      expect(error.message).to.equal(\"apiOptions.side is required\");\n    }\n  });\n\n  test(\"should throw error when protocolAddress is missing\", async () => {\n    const apiOptions = {\n      side: OrderSide.LISTING,\n    };\n\n    try {\n      await api.postOrder(mockOrder, apiOptions as OrderAPIOptions);\n      expect.fail(\"Should have thrown an error\");\n    } catch (error: any) {\n      expect(error.message).to.equal(\"apiOptions.protocolAddress is required\");\n    }\n  });\n\n  test(\"should throw error when order is missing\", async () => {\n    const apiOptions = {\n      side: OrderSide.LISTING,\n      protocolAddress: \"0x1234567890123456789012345678901234567890\",\n    } as OrderAPIOptions;\n\n    try {\n      await api.postOrder(null as any, apiOptions);\n      expect.fail(\"Should have thrown an error\");\n    } catch (error: any) {\n      expect(error.message).to.equal(\"order data is required\");\n    }\n  });\n\n  test(\"should throw error for unsupported protocol\", async () => {\n    const apiOptions = {\n      protocol: \"unsupported\" as \"seaport\",\n      side: OrderSide.LISTING,\n      protocolAddress: \"0x1234567890123456789012345678901234567890\",\n    };\n\n    try {\n      await api.postOrder(mockOrder, apiOptions);\n      expect.fail(\"Should have thrown an error\");\n    } catch (error: any) {\n      expect(error.message).to.equal(\n        \"Currently only 'seaport' protocol is supported\",\n      );\n    }\n  });\n\n  test(\"should throw error for invalid side value\", async () => {\n    const apiOptions = {\n      side: \"invalid_side\" as OrderSide,\n      protocolAddress: \"0x1234567890123456789012345678901234567890\",\n    };\n\n    try {\n      await api.postOrder(mockOrder, apiOptions);\n      expect.fail(\"Should have thrown an error\");\n    } catch (error: any) {\n      expect(error.message).to.equal(\"side must be either 'ask' or 'bid'\");\n    }\n  });\n\n  test(\"should throw error for invalid protocol address format\", async () => {\n    const apiOptions = {\n      side: OrderSide.LISTING,\n      protocolAddress: \"invalid_address\",\n    } as OrderAPIOptions;\n\n    try {\n      await api.postOrder(mockOrder, apiOptions);\n      expect.fail(\"Should have thrown an error\");\n    } catch (error: any) {\n      expect(error.message).to.equal(\"Invalid protocol address format\");\n    }\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fb80ab506194438c13ca1c023dd4229e42f2f5fa"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1wcoa2qd2y=function(){return actualCoverage;};}return actualCoverage;}cov_1wcoa2qd2y();cov_1wcoa2qd2y().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const chai_1=(cov_1wcoa2qd2y().s[1]++,require("chai"));const mocha_1=(cov_1wcoa2qd2y().s[2]++,require("mocha"));const api_1=(cov_1wcoa2qd2y().s[3]++,require("../../src/api/api"));const types_1=(cov_1wcoa2qd2y().s[4]++,require("../../src/types"));/* eslint-disable @typescript-eslint/no-explicit-any */cov_1wcoa2qd2y().s[5]++;(0,mocha_1.suite)("API: postOrder validation",()=>{cov_1wcoa2qd2y().f[0]++;const api=(cov_1wcoa2qd2y().s[6]++,new api_1.OpenSeaAPI({chain:types_1.Chain.Mainnet}));const mockOrder=(cov_1wcoa2qd2y().s[7]++,{parameters:{offerer:"0x1234567890123456789012345678901234567890",zone:"0x1234567890123456789012345678901234567890",orderType:0,startTime:"1234567890",endTime:"9876543210",zoneHash:"0x0000000000000000000000000000000000000000000000000000000000000000",salt:"1234567890",offer:[],consideration:[],totalOriginalConsiderationItems:0,conduitKey:"0x0000000000000000000000000000000000000000000000000000000000000000"},signature:"0x"});cov_1wcoa2qd2y().s[8]++;(0,mocha_1.test)("should throw error when side is missing",async()=>{cov_1wcoa2qd2y().f[1]++;const apiOptions=(cov_1wcoa2qd2y().s[9]++,{protocolAddress:"0x1234567890123456789012345678901234567890"});cov_1wcoa2qd2y().s[10]++;try{cov_1wcoa2qd2y().s[11]++;await api.postOrder(mockOrder,apiOptions);cov_1wcoa2qd2y().s[12]++;chai_1.expect.fail("Should have thrown an error");}catch(error){cov_1wcoa2qd2y().s[13]++;(0,chai_1.expect)(error.message).to.equal("apiOptions.side is required");}});cov_1wcoa2qd2y().s[14]++;(0,mocha_1.test)("should throw error when protocolAddress is missing",async()=>{cov_1wcoa2qd2y().f[2]++;const apiOptions=(cov_1wcoa2qd2y().s[15]++,{side:types_1.OrderSide.LISTING});cov_1wcoa2qd2y().s[16]++;try{cov_1wcoa2qd2y().s[17]++;await api.postOrder(mockOrder,apiOptions);cov_1wcoa2qd2y().s[18]++;chai_1.expect.fail("Should have thrown an error");}catch(error){cov_1wcoa2qd2y().s[19]++;(0,chai_1.expect)(error.message).to.equal("apiOptions.protocolAddress is required");}});cov_1wcoa2qd2y().s[20]++;(0,mocha_1.test)("should throw error when order is missing",async()=>{cov_1wcoa2qd2y().f[3]++;const apiOptions=(cov_1wcoa2qd2y().s[21]++,{side:types_1.OrderSide.LISTING,protocolAddress:"0x1234567890123456789012345678901234567890"});cov_1wcoa2qd2y().s[22]++;try{cov_1wcoa2qd2y().s[23]++;await api.postOrder(null,apiOptions);cov_1wcoa2qd2y().s[24]++;chai_1.expect.fail("Should have thrown an error");}catch(error){cov_1wcoa2qd2y().s[25]++;(0,chai_1.expect)(error.message).to.equal("order data is required");}});cov_1wcoa2qd2y().s[26]++;(0,mocha_1.test)("should throw error for unsupported protocol",async()=>{cov_1wcoa2qd2y().f[4]++;const apiOptions=(cov_1wcoa2qd2y().s[27]++,{protocol:"unsupported",side:types_1.OrderSide.LISTING,protocolAddress:"0x1234567890123456789012345678901234567890"});cov_1wcoa2qd2y().s[28]++;try{cov_1wcoa2qd2y().s[29]++;await api.postOrder(mockOrder,apiOptions);cov_1wcoa2qd2y().s[30]++;chai_1.expect.fail("Should have thrown an error");}catch(error){cov_1wcoa2qd2y().s[31]++;(0,chai_1.expect)(error.message).to.equal("Currently only 'seaport' protocol is supported");}});cov_1wcoa2qd2y().s[32]++;(0,mocha_1.test)("should throw error for invalid side value",async()=>{cov_1wcoa2qd2y().f[5]++;const apiOptions=(cov_1wcoa2qd2y().s[33]++,{side:"invalid_side",protocolAddress:"0x1234567890123456789012345678901234567890"});cov_1wcoa2qd2y().s[34]++;try{cov_1wcoa2qd2y().s[35]++;await api.postOrder(mockOrder,apiOptions);cov_1wcoa2qd2y().s[36]++;chai_1.expect.fail("Should have thrown an error");}catch(error){cov_1wcoa2qd2y().s[37]++;(0,chai_1.expect)(error.message).to.equal("side must be either 'ask' or 'bid'");}});cov_1wcoa2qd2y().s[38]++;(0,mocha_1.test)("should throw error for invalid protocol address format",async()=>{cov_1wcoa2qd2y().f[6]++;const apiOptions=(cov_1wcoa2qd2y().s[39]++,{side:types_1.OrderSide.LISTING,protocolAddress:"invalid_address"});cov_1wcoa2qd2y().s[40]++;try{cov_1wcoa2qd2y().s[41]++;await api.postOrder(mockOrder,apiOptions);cov_1wcoa2qd2y().s[42]++;chai_1.expect.fail("Should have thrown an error");}catch(error){cov_1wcoa2qd2y().s[43]++;(0,chai_1.expect)(error.message).to.equal("Invalid protocol address format");}});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,