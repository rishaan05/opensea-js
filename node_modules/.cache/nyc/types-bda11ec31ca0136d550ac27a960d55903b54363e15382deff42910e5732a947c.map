{"version":3,"file":"/Users/rg/dev/opensea-js/src/orders/types.ts","sources":["/Users/rg/dev/opensea-js/src/orders/types.ts"],"names":[],"mappings":";;;AAYA,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,4BAAe,CAAA;IACf,gCAAmB,CAAA;IACnB,kCAAqB,CAAA;AACvB,CAAC,EAJW,SAAS,yBAAT,SAAS,QAIpB","sourcesContent":["import { BasicOrderParametersStruct } from \"@opensea/seaport-js/lib/typechain-types/seaport/contracts/Seaport\";\nimport { AdvancedOrder, OrderWithCounter } from \"@opensea/seaport-js/lib/types\";\nimport { OpenSeaAccount, OrderSide } from \"../types\";\n\n// Protocol data\ntype OrderProtocolToProtocolData = {\n  seaport: OrderWithCounter;\n};\nexport type OrderProtocol = keyof OrderProtocolToProtocolData;\nexport type ProtocolData =\n  OrderProtocolToProtocolData[keyof OrderProtocolToProtocolData];\n\nexport enum OrderType {\n  BASIC = \"basic\",\n  ENGLISH = \"english\",\n  CRITERIA = \"criteria\",\n}\n\ntype OrderFee = {\n  account: OpenSeaAccount;\n  basisPoints: string;\n};\n\n/**\n * The latest OpenSea Order schema.\n */\nexport type OrderV2 = {\n  /** The date the order was created. */\n  createdDate: string;\n  /** The date the order was closed. */\n  closingDate: string | null;\n  /** The date the order was listed. Order can be created before the listing time. */\n  listingTime: number;\n  /** The date the order expires. */\n  expirationTime: number;\n  /** The hash of the order. */\n  orderHash: string | null;\n  /** The account that created the order. */\n  maker: OpenSeaAccount;\n  /** The account that filled the order. */\n  taker: OpenSeaAccount | null;\n  /** The protocol data for the order. Only 'seaport' is currently supported. */\n  protocolData: ProtocolData;\n  /** The contract address of the protocol. */\n  protocolAddress: string;\n  /** The current price of the order. */\n  currentPrice: bigint;\n  /** The maker fees for the order. */\n  makerFees: OrderFee[];\n  /** The taker fees for the order. */\n  takerFees: OrderFee[];\n  /** The side of the order. Listing/Offer */\n  side: OrderSide;\n  /** The type of the order. Basic/English/Criteria */\n  orderType: OrderType;\n  /** Whether or not the maker has cancelled the order. */\n  cancelled: boolean;\n  /** Whether or not the order is finalized. */\n  finalized: boolean;\n  /** Whether or not the order is marked invalid and therefore not fillable. */\n  markedInvalid: boolean;\n  /** The signature the order is signed with. */\n  clientSignature: string | null;\n  /** Amount of items left in the order which can be taken. */\n  remainingQuantity: number;\n};\n\nexport type FulfillmentDataResponse = {\n  protocol: string;\n  fulfillment_data: FulfillmentData;\n};\n\ntype FulfillmentData = {\n  transaction: Transaction;\n  orders: ProtocolData[];\n};\n\ntype Transaction = {\n  function: string;\n  chain: number;\n  to: string;\n  value: number;\n  input_data: {\n    orders: OrderWithCounter[] | AdvancedOrder[] | BasicOrderParametersStruct[];\n  };\n};\n\n// API query types\ntype OpenOrderOrderingOption = \"created_date\" | \"eth_price\";\ntype OrderByDirection = \"asc\" | \"desc\";\n\nexport type OrderAPIOptions = {\n  protocol?: OrderProtocol;\n  protocolAddress?: string;\n  side: OrderSide;\n};\n\nexport type OrdersQueryOptions = OrderAPIOptions & {\n  limit?: number;\n  cursor?: string;\n  next?: string;\n\n  paymentTokenAddress?: string;\n  maker?: string;\n  taker?: string;\n  owner?: string;\n  listedAfter?: number | string;\n  listedBefore?: number | string;\n  tokenId?: string;\n  tokenIds?: string[];\n  assetContractAddress?: string;\n  orderBy?: OpenOrderOrderingOption;\n  orderDirection?: OrderByDirection;\n  onlyEnglish?: boolean;\n};\n\nexport type SerializedOrderV2 = {\n  created_date: string;\n  closing_date: string | null;\n  listing_time: number;\n  expiration_time: number;\n  order_hash: string | null;\n  maker: unknown;\n  taker: unknown | null;\n  protocol_data: ProtocolData;\n  protocol_address: string;\n  current_price: string;\n  maker_fees: {\n    account: unknown;\n    basis_points: string;\n  }[];\n  taker_fees: {\n    account: unknown;\n    basis_points: string;\n  }[];\n  side: OrderSide;\n  order_type: OrderType;\n  cancelled: boolean;\n  finalized: boolean;\n  marked_invalid: boolean;\n  client_signature: string | null;\n  remaining_quantity: number;\n};\n\nexport type QueryCursors = {\n  next: string | null;\n  previous: string | null;\n};\n\nexport type OrdersQueryResponse = QueryCursors & {\n  orders: SerializedOrderV2[];\n};\n\nexport type OrdersPostQueryResponse = { order: SerializedOrderV2 };\n"]}