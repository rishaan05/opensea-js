{"version":3,"file":"/Users/rg/dev/opensea-js/test/api/getOrders.spec.ts","sources":["/Users/rg/dev/opensea-js/test/api/getOrders.spec.ts"],"names":[],"mappings":";;AAAA,0BAAwB;AACxB,+BAA8B;AAC9B,iCAAoC;AACpC,2CAA4C;AAC5C,kDAAoE;AACpE,0CAAkD;AAElD,IAAA,aAAK,EAAC,gBAAgB,EAAE,GAAG,EAAE;IAC3B,CAAC,iBAAS,CAAC,OAAO,EAAE,iBAAS,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACpD,IAAA,YAAI,EAAC,2CAA2C,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,KAAK,GAAG,MAAM,mBAAO,CAAC,QAAQ,CAAC;gBACnC,QAAQ,EAAE,SAAS;gBACnB,IAAI;aACL,CAAC,CAAC;YACH,IAAA,wBAAgB,EAAC,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,YAAI,EAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,IAAA,aAAM,EACV,mBAAO,CAAC,QAAQ,CAAC;YACf,QAAQ,EAAE,SAAS;YACnB,IAAI,EAAE,iBAAS,CAAC,OAAO;YACvB,KAAK,EAAE,4CAA4C;SACpD,CAAC,CACH;aACE,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC;aACrD,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,oCAAoC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,CAAC,iBAAS,CAAC,OAAO,EAAE,iBAAS,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACpD,IAAA,YAAI,EAAC,8CAA8C,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,mBAAO,CAAC,SAAS,CAAC;gBACzD,QAAQ,EAAE,SAAS;gBACnB,IAAI;gBACJ,oBAAoB,EAAE,iCAAqB;aAC5C,CAAC,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAA,wBAAgB,EAAC,KAAK,CAAC,CAAC,CAAC;YAC/C,IAAA,aAAM,EAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,SAAS,CAAC;YACjC,IAAA,aAAM,EAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,SAAS,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import \"../utils/setup\";\nimport { expect } from \"chai\";\nimport { suite, test } from \"mocha\";\nimport { OrderSide } from \"../../src/types\";\nimport { BAYC_CONTRACT_ADDRESS, mainAPI } from \"../utils/constants\";\nimport { expectValidOrder } from \"../utils/utils\";\n\nsuite(\"Getting orders\", () => {\n  [OrderSide.LISTING, OrderSide.OFFER].forEach((side) => {\n    test(`getOrder should return a single order > ${side}`, async () => {\n      const order = await mainAPI.getOrder({\n        protocol: \"seaport\",\n        side,\n      });\n      expectValidOrder(order);\n    });\n  });\n\n  test(`getOrder should throw if no order found`, async () => {\n    await expect(\n      mainAPI.getOrder({\n        protocol: \"seaport\",\n        side: OrderSide.LISTING,\n        maker: \"0x000000000000000000000000000000000000dEaD\",\n      }),\n    )\n      .to.eventually.be.rejected.and.be.an.instanceOf(Error)\n      .and.have.property(\"message\", \"Not found: no matching order found\");\n  });\n\n  [OrderSide.LISTING, OrderSide.OFFER].forEach((side) => {\n    test(`getOrders should return a list of orders > ${side}`, async () => {\n      const { orders, next, previous } = await mainAPI.getOrders({\n        protocol: \"seaport\",\n        side,\n        assetContractAddress: BAYC_CONTRACT_ADDRESS,\n      });\n      orders.map((order) => expectValidOrder(order));\n      expect(next).to.not.be.undefined;\n      expect(previous).to.not.be.undefined;\n    });\n  });\n});\n"]}