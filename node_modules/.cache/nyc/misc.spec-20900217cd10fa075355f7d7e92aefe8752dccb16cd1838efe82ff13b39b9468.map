{"version":3,"file":"/Users/rg/dev/opensea-js/test/sdk/misc.spec.ts","sources":["/Users/rg/dev/opensea-js/test/sdk/misc.spec.ts"],"names":[],"mappings":";;AAAA,+BAAsC;AACtC,mCAAgC;AAChC,iCAAoC;AACpC,mDAG6B;AAC7B,2CAA6C;AAC7C,2CAAwC;AACxC,iDAG+B;AAC/B,kDAI4B;AAE5B,MAAM,MAAM,GAAG,IAAI,kBAAU,CAC3B,gCAAoB,EACpB;IACE,KAAK,EAAE,aAAK,CAAC,OAAO;IACpB,MAAM,EAAE,2BAAe;CACxB,EACD,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC,CAC3C,CAAC;AAEF,IAAA,aAAK,EAAC,WAAW,EAAE,GAAG,EAAE;IACtB,IAAA,YAAI,EAAC,6BAA6B,EAAE,GAAG,EAAE;QACvC,aAAM,CAAC,KAAK,CAAC,OAAO,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,IAAA,YAAI,EAAC,8BAA8B,EAAE,GAAG,EAAE;QACxC,aAAM,CAAC,KAAK,CAAC,OAAO,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACrD,aAAM,CAAC,KAAK,CAAC,OAAO,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,IAAA,YAAI,EAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;QAC7E,MAAM,OAAO,GAAG,0BAAc,CAAC;QAC/B,aAAM,CAAC,KAAK,CACV,IAAA,+EAAuE,EACrE,OAAO,CACR,EACD,OAAO,CACR,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAA,YAAI,EAAC,mFAAmF,EAAE,KAAK,IAAI,EAAE;QACnG,KAAK,MAAM,OAAO,IAAI,uCAA2B,EAAE,CAAC;YAClD,aAAM,CAAC,KAAK,CACV,IAAA,+EAAuE,EACrE,OAAO,CACR,EACD,mEAAuD,CACxD,CAAC;QACJ,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,IAAA,YAAI,EAAC,8FAA8F,EAAE,KAAK,IAAI,EAAE;QAC9G,KAAK,MAAM,OAAO,IAAI,uCAA2B,EAAE,CAAC;YAClD,aAAM,CAAC,KAAK,CACV,IAAA,+EAAuE,EACrE,OAAO,CAAC,WAAW,EAAE,CACtB,EACD,mEAAuD,CACxD,CAAC;QACJ,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,IAAA,YAAI,EAAC,iGAAiG,EAAE,KAAK,IAAI,EAAE;QACjH,MAAM,MAAM,GAAG,eAAM,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;QAC5C,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC;QACtC,MAAM,oBAAoB,GAAG,yEAAyE,cAAc,EAAE,CAAC;QAEvH,uDAAuD;QACvD,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;YAC7D,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAA,aAAM,EAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,UAAU,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;YAChE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAA,aAAM,EAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACrD,CAAC;QAED,MAAM,KAAK,GAAG,EAAS,CAAC;QAExB,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YACpE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAA,aAAM,EAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YACtE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAA,aAAM,EAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,qBAAqB,CAAC;gBACjC,cAAc,EAAE,EAAE;gBAClB,MAAM,EAAE,CAAC;gBACT,QAAQ,EAAE,CAAC;gBACX,mBAAmB,EAAE,EAAE;gBACvB,cAAc;aACf,CAAC,CAAC;YACH,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAA,aAAM,EAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACrD,CAAC;QAED,MAAM,KAAK,GAAG,EAAS,CAAC;QAExB,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;YACrD,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAA,aAAM,EAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;YACpD,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAA,aAAM,EAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,YAAY,CAAC;gBACxB,GAAG,KAAK;gBACR,KAAK,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE;aACnC,CAAC,CAAC;YACH,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAA,aAAM,EAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACrD,CAAC;QACD,sDAAsD;IACxD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,IAAA,aAAM,EAAC,IAAA,sBAAc,EAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,IAAA,aAAM,EAAC,IAAA,sBAAc,EAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAClE,IAAA,aAAM,EAAC,IAAA,sBAAc,EAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,IAAA,aAAM,EAAC,IAAA,sBAAc,EAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,IAAA,aAAM,EAAC,IAAA,sBAAc,EAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,IAAA,aAAM,EAAC,IAAA,sBAAc,EAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC9C,GAAG;gBACH,GAAG;gBACH,GAAG;gBACH,GAAG;gBACH,GAAG;gBACH,GAAG;aACJ,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,IAAA,aAAM,EAAC,IAAA,sBAAc,EAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC9C,GAAG;gBACH,GAAG;gBACH,GAAG;gBACH,GAAG;gBACH,GAAG;aACJ,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,IAAA,aAAM,EAAC,GAAG,EAAE,CAAC,IAAA,sBAAc,EAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAC9C,oFAAoF,CACrF,CAAC;YACF,IAAA,aAAM,EAAC,GAAG,EAAE,CAAC,IAAA,sBAAc,EAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAC9C,oFAAoF,CACrF,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,IAAA,aAAM,EAAC,GAAG,EAAE,CAAC,IAAA,sBAAc,EAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CACxC,kFAAkF,CACnF,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,OAAO,GAAG,uDAAuD,CAAC;YACxE,IAAA,aAAM,EAAC,IAAA,sBAAc,EAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;gBACzC,4BAA4B;gBAC5B,4BAA4B;gBAC5B,4BAA4B;aAC7B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert, expect } from \"chai\";\nimport { ethers } from \"ethers\";\nimport { suite, test } from \"mocha\";\nimport {\n  SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS,\n  SHARED_STOREFRONT_ADDRESSES,\n} from \"../../src/constants\";\nimport { OpenSeaSDK } from \"../../src/index\";\nimport { Chain } from \"../../src/types\";\nimport {\n  decodeTokenIds,\n  getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress,\n} from \"../../src/utils/utils\";\nimport {\n  DAPPER_ADDRESS,\n  MAINNET_API_KEY,\n  RPC_PROVIDER_MAINNET,\n} from \"../utils/constants\";\n\nconst client = new OpenSeaSDK(\n  RPC_PROVIDER_MAINNET,\n  {\n    chain: Chain.Mainnet,\n    apiKey: MAINNET_API_KEY,\n  },\n  (line) => console.info(`MAINNET: ${line}`),\n);\n\nsuite(\"SDK: misc\", () => {\n  test(\"Instance has public methods\", () => {\n    assert.equal(typeof client.wrapEth, \"function\");\n  });\n\n  test(\"Instance exposes API methods\", () => {\n    assert.equal(typeof client.api.getOrder, \"function\");\n    assert.equal(typeof client.api.getOrders, \"function\");\n  });\n\n  test(\"Checks that a non-shared storefront address is not remapped\", async () => {\n    const address = DAPPER_ADDRESS;\n    assert.equal(\n      getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress(\n        address,\n      ),\n      address,\n    );\n  });\n\n  test(\"Checks that shared storefront addresses are remapped to lazy mint adapter address\", async () => {\n    for (const address of SHARED_STOREFRONT_ADDRESSES) {\n      assert.equal(\n        getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress(\n          address,\n        ),\n        SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS,\n      );\n    }\n  });\n\n  test(\"Checks that upper case shared storefront addresses are remapped to lazy mint adapter address\", async () => {\n    for (const address of SHARED_STOREFRONT_ADDRESSES) {\n      assert.equal(\n        getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress(\n          address.toUpperCase(),\n        ),\n        SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS,\n      );\n    }\n  });\n\n  test(\"Should throw an error when using methods that need a provider or wallet with the accountAddress\", async () => {\n    const wallet = ethers.Wallet.createRandom();\n    const accountAddress = wallet.address;\n    const expectedErrorMessage = `Specified accountAddress is not available through wallet or provider: ${accountAddress}`;\n\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    try {\n      await client.wrapEth({ amountInEth: \"0.1\", accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    try {\n      await client.unwrapWeth({ amountInEth: \"0.1\", accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    const asset = {} as any;\n\n    try {\n      await client.createOffer({ asset, startAmount: 1, accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    try {\n      await client.createListing({ asset, startAmount: 1, accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    try {\n      await client.createCollectionOffer({\n        collectionSlug: \"\",\n        amount: 1,\n        quantity: 1,\n        paymentTokenAddress: \"\",\n        accountAddress,\n      });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    const order = {} as any;\n\n    try {\n      await client.fulfillOrder({ order, accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    try {\n      await client.cancelOrder({ order, accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    try {\n      await client.approveOrder({\n        ...order,\n        maker: { address: accountAddress },\n      });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n  });\n\n  describe(\"decodeTokenIds\", () => {\n    it('should return [\"*\"] when given \"*\" as input', () => {\n      expect(decodeTokenIds(\"*\")).to.deep.equal([\"*\"]);\n    });\n\n    it(\"should correctly decode a single number\", () => {\n      expect(decodeTokenIds(\"123\")).to.deep.equal([\"123\"]);\n    });\n\n    it(\"should correctly decode multiple comma-separated numbers\", () => {\n      expect(decodeTokenIds(\"1,2,3,4\")).to.deep.equal([\"1\", \"2\", \"3\", \"4\"]);\n    });\n\n    it(\"should correctly decode a single number\", () => {\n      expect(decodeTokenIds(\"10:10\")).to.deep.equal([\"10\"]);\n    });\n\n    it(\"should correctly decode a range of numbers\", () => {\n      expect(decodeTokenIds(\"5:8\")).to.deep.equal([\"5\", \"6\", \"7\", \"8\"]);\n    });\n\n    it(\"should correctly decode multiple ranges of numbers\", () => {\n      expect(decodeTokenIds(\"1:3,7:9\")).to.deep.equal([\n        \"1\",\n        \"2\",\n        \"3\",\n        \"7\",\n        \"8\",\n        \"9\",\n      ]);\n    });\n\n    it(\"should correctly decode a mix of single numbers and ranges\", () => {\n      expect(decodeTokenIds(\"1,3:5,8\")).to.deep.equal([\n        \"1\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"8\",\n      ]);\n    });\n\n    it(\"should throw an error for invalid input format\", () => {\n      expect(() => decodeTokenIds(\"1:3:5,8\")).to.throw(\n        \"Invalid input format. Expected a valid comma-separated list of numbers and ranges.\",\n      );\n      expect(() => decodeTokenIds(\"1;3:5,8\")).to.throw(\n        \"Invalid input format. Expected a valid comma-separated list of numbers and ranges.\",\n      );\n    });\n\n    it(\"should throw an error for invalid range format\", () => {\n      expect(() => decodeTokenIds(\"5:2\")).throws(\n        \"Invalid range. End value: 2 must be greater than or equal to the start value: 5.\",\n      );\n    });\n\n    it(\"should handle very large input numbers\", () => {\n      const encoded = \"10000000000000000000000000:10000000000000000000000002\";\n      expect(decodeTokenIds(encoded)).deep.equal([\n        \"10000000000000000000000000\",\n        \"10000000000000000000000001\",\n        \"10000000000000000000000002\",\n      ]);\n    });\n  });\n});\n"]}