"use strict";function cov_1rjro5sqpm(){var path="/Users/rg/dev/opensea-js/src/types.ts";var hash="da71a0570aa90062b01f3c3ebd8cfb5408565097";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/src/types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:112}},"2":{start:{line:10,column:0},end:{line:52,column:54}},"3":{start:{line:15,column:4},end:{line:15,column:59}},"4":{start:{line:19,column:4},end:{line:19,column:63}},"5":{start:{line:23,column:4},end:{line:23,column:57}},"6":{start:{line:27,column:4},end:{line:27,column:57}},"7":{start:{line:31,column:4},end:{line:31,column:37}},"8":{start:{line:35,column:4},end:{line:35,column:43}},"9":{start:{line:39,column:4},end:{line:39,column:45}},"10":{start:{line:43,column:4},end:{line:43,column:45}},"11":{start:{line:47,column:4},end:{line:47,column:47}},"12":{start:{line:51,column:4},end:{line:51,column:39}},"13":{start:{line:58,column:0},end:{line:117,column:42}},"14":{start:{line:61,column:4},end:{line:61,column:34}},"15":{start:{line:63,column:4},end:{line:63,column:31}},"16":{start:{line:65,column:4},end:{line:65,column:31}},"17":{start:{line:67,column:4},end:{line:67,column:27}},"18":{start:{line:69,column:4},end:{line:69,column:29}},"19":{start:{line:71,column:4},end:{line:71,column:35}},"20":{start:{line:73,column:4},end:{line:73,column:44}},"21":{start:{line:75,column:4},end:{line:75,column:37}},"22":{start:{line:77,column:4},end:{line:77,column:35}},"23":{start:{line:79,column:4},end:{line:79,column:31}},"24":{start:{line:81,column:4},end:{line:81,column:27}},"25":{start:{line:83,column:4},end:{line:83,column:25}},"26":{start:{line:85,column:4},end:{line:85,column:23}},"27":{start:{line:87,column:4},end:{line:87,column:38}},"28":{start:{line:88,column:4},end:{line:88,column:36}},"29":{start:{line:92,column:4},end:{line:92,column:33}},"30":{start:{line:94,column:4},end:{line:94,column:27}},"31":{start:{line:96,column:4},end:{line:96,column:31}},"32":{start:{line:98,column:4},end:{line:98,column:42}},"33":{start:{line:100,column:4},end:{line:100,column:44}},"34":{start:{line:102,column:4},end:{line:102,column:50}},"35":{start:{line:104,column:4},end:{line:104,column:37}},"36":{start:{line:106,column:4},end:{line:106,column:50}},"37":{start:{line:108,column:4},end:{line:108,column:37}},"38":{start:{line:110,column:4},end:{line:110,column:42}},"39":{start:{line:112,column:4},end:{line:112,column:40}},"40":{start:{line:114,column:4},end:{line:114,column:38}},"41":{start:{line:116,column:4},end:{line:116,column:42}},"42":{start:{line:122,column:0},end:{line:125,column:54}},"43":{start:{line:123,column:4},end:{line:123,column:33}},"44":{start:{line:124,column:4},end:{line:124,column:31}},"45":{start:{line:130,column:0},end:{line:134,column:66}},"46":{start:{line:131,column:4},end:{line:131,column:37}},"47":{start:{line:132,column:4},end:{line:132,column:39}},"48":{start:{line:133,column:4},end:{line:133,column:41}},"49":{start:{line:144,column:0},end:{line:150,column:69}},"50":{start:{line:145,column:4},end:{line:145,column:54}},"51":{start:{line:146,column:4},end:{line:146,column:46}},"52":{start:{line:147,column:4},end:{line:147,column:44}},"53":{start:{line:148,column:4},end:{line:148,column:44}},"54":{start:{line:149,column:4},end:{line:149,column:70}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:10,column:1},end:{line:10,column:2}},loc:{start:{line:10,column:22},end:{line:52,column:1}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:58,column:1},end:{line:58,column:2}},loc:{start:{line:58,column:18},end:{line:117,column:1}},line:58},"2":{name:"(anonymous_2)",decl:{start:{line:122,column:1},end:{line:122,column:2}},loc:{start:{line:122,column:22},end:{line:125,column:1}},line:122},"3":{name:"(anonymous_3)",decl:{start:{line:130,column:1},end:{line:130,column:2}},loc:{start:{line:130,column:26},end:{line:134,column:1}},line:130},"4":{name:"(anonymous_4)",decl:{start:{line:144,column:1},end:{line:144,column:2}},loc:{start:{line:144,column:27},end:{line:150,column:1}},line:144}},branchMap:{"0":{loc:{start:{line:52,column:3},end:{line:52,column:52}},type:"binary-expr",locations:[{start:{line:52,column:3},end:{line:52,column:12}},{start:{line:52,column:17},end:{line:52,column:51}}],line:52},"1":{loc:{start:{line:117,column:3},end:{line:117,column:40}},type:"binary-expr",locations:[{start:{line:117,column:3},end:{line:117,column:8}},{start:{line:117,column:13},end:{line:117,column:39}}],line:117},"2":{loc:{start:{line:125,column:3},end:{line:125,column:52}},type:"binary-expr",locations:[{start:{line:125,column:3},end:{line:125,column:12}},{start:{line:125,column:17},end:{line:125,column:51}}],line:125},"3":{loc:{start:{line:134,column:3},end:{line:134,column:64}},type:"binary-expr",locations:[{start:{line:134,column:3},end:{line:134,column:16}},{start:{line:134,column:21},end:{line:134,column:63}}],line:134},"4":{loc:{start:{line:150,column:3},end:{line:150,column:67}},type:"binary-expr",locations:[{start:{line:150,column:3},end:{line:150,column:17}},{start:{line:150,column:22},end:{line:150,column:66}}],line:150}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/src/types.ts",sources:["/Users/rg/dev/opensea-js/src/types.ts"],names:[],mappings:";;;AAGA;;;;GAIG;AACH,IAAY,SA0CX;AA1CD,WAAY,SAAS;IACnB;;;OAGG;IACH,sDAAyC,CAAA;IACzC;;OAEG;IACH,0DAA6C,CAAA;IAC7C;;OAEG;IACH,oDAAuC,CAAA;IACvC;;OAEG;IACH,oDAAuC,CAAA;IACvC;;OAEG;IACH,gCAAmB,CAAA;IACnB;;OAEG;IACH,sCAAyB,CAAA;IACzB;;OAEG;IACH,wCAA2B,CAAA;IAC3B;;OAEG;IACH,wCAA2B,CAAA;IAC3B;;OAEG;IACH,0CAA6B,CAAA;IAC7B;;OAEG;IACH,kCAAqB,CAAA;AACvB,CAAC,EA1CW,SAAS,yBAAT,SAAS,QA0CpB;AA6CD;;;GAGG;AACH,IAAY,KA2DX;AA3DD,WAAY,KAAK;IACf,iBAAiB;IACjB,eAAe;IACf,6BAAoB,CAAA;IACpB,cAAc;IACd,0BAAiB,CAAA;IACjB,aAAa;IACb,0BAAiB,CAAA;IACjB,WAAW;IACX,sBAAa,CAAA;IACb,YAAY;IACZ,wBAAe,CAAA;IACf,eAAe;IACf,8BAAqB,CAAA;IACrB,oBAAoB;IACpB,uCAA8B,CAAA;IAC9B,gBAAgB;IAChB,gCAAuB,CAAA;IACvB,eAAe;IACf,8BAAqB,CAAA;IACrB,aAAa;IACb,0BAAiB,CAAA;IACjB,WAAW;IACX,sBAAa,CAAA;IACb,UAAU;IACV,oBAAW,CAAA;IACX,SAAS;IACT,kBAAS,CAAA;IACT,iBAAiB;IACjB,iCAAwB,CAAA;IACxB,+BAAsB,CAAA;IACtB,iBAAiB;IACjB,gFAAgF;IAChF,cAAc;IACd,4BAAmB,CAAA;IACnB,mBAAmB;IACnB,sBAAa,CAAA;IACb,oBAAoB;IACpB,0BAAiB,CAAA;IACjB,mBAAmB;IACnB,qCAA4B,CAAA;IAC5B,oBAAoB;IACpB,uCAA8B,CAAA;IAC9B,uBAAuB;IACvB,6CAAoC,CAAA;IACpC,qBAAqB;IACrB,gCAAuB,CAAA;IACvB,uBAAuB;IACvB,6CAAoC,CAAA;IACpC,oBAAoB;IACpB,gCAAuB,CAAA;IACvB,mBAAmB;IACnB,qCAA4B,CAAA;IAC5B,kBAAkB;IAClB,mCAA0B,CAAA;IAC1B,iBAAiB;IACjB,iCAAwB,CAAA;IACxB,mBAAmB;IACnB,qCAA4B,CAAA;AAC9B,CAAC,EA3DW,KAAK,qBAAL,KAAK,QA2DhB;AAED;;GAEG;AACH,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,4BAAe,CAAA;IACf,0BAAa,CAAA;AACf,CAAC,EAHW,SAAS,yBAAT,SAAS,QAGpB;AAED;;GAEG;AACH,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,gCAAe,CAAA;IACf,kCAAiB,CAAA;IACjB,oCAAmB,CAAA;AACrB,CAAC,EAJW,aAAa,6BAAb,aAAa,QAIxB;AAED;;;;;;;GAOG;AACH,IAAY,cAMX;AAND,WAAY,cAAc;IACxB,iDAA+B,CAAA;IAC/B,yCAAuB,CAAA;IACvB,uCAAqB,CAAA;IACrB,uCAAqB,CAAA;IACrB,iEAA+C,CAAA;AACjD,CAAC,EANW,cAAc,8BAAd,cAAc,QAMzB",sourcesContent:["import { BigNumberish } from \"ethers\";\nimport type { OrderV2 } from \"./orders/types\";\n\n/**\n * Events emitted by the SDK which can be used by frontend applications\n * to update state or show useful messages to users.\n * @category Events\n */\nexport enum EventType {\n  /**\n   * Emitted when the transaction is sent to the network and the application\n   * is waiting for the transaction to be mined.\n   */\n  TransactionCreated = \"TransactionCreated\",\n  /**\n   * Emitted when the transaction has succeeded is mined and confirmed.\n   */\n  TransactionConfirmed = \"TransactionConfirmed\",\n  /**\n   * Emitted when the transaction has failed to be submitted.\n   */\n  TransactionDenied = \"TransactionDenied\",\n  /**\n   * Emitted when the transaction has failed to be mined.\n   */\n  TransactionFailed = \"TransactionFailed\",\n  /**\n   * Emitted when the {@link OpenSeaSDK.wrapEth} method is called.\n   */\n  WrapEth = \"WrapEth\",\n  /**\n   * Emitted when the {@link OpenSeaSDK.unwrapWeth} method is called.\n   */\n  UnwrapWeth = \"UnwrapWeth\",\n  /**\n   * Emitted when fulfilling a public or private order.\n   */\n  MatchOrders = \"MatchOrders\",\n  /**\n   * Emitted when the {@link OpenSeaSDK.cancelOrder} method is called.\n   */\n  CancelOrder = \"CancelOrder\",\n  /**\n   * Emitted when the {@link OpenSeaSDK.approveOrder} method is called.\n   */\n  ApproveOrder = \"ApproveOrder\",\n  /**\n   * Emitted when the {@link OpenSeaSDK.transfer} method is called.\n   */\n  Transfer = \"Transfer\",\n}\n\n/**\n * Data that gets sent with each {@link EventType}\n * @category Events\n */\nexport interface EventData {\n  /**\n   * Wallet address of the user who initiated the event.\n   */\n  accountAddress?: string;\n  /**\n   * Amount of ETH sent when wrapping or unwrapping.\n   */\n  amount?: BigNumberish;\n  /**\n   * The transaction hash of the event.\n   */\n  transactionHash?: string;\n  /**\n   * The {@link EventType} of the event.\n   */\n  event?: EventType;\n  /**\n   * Error which occurred when transaction was denied or failed.\n   */\n  error?: unknown;\n  /**\n   * The {@link OrderV2} object.\n   */\n  orderV2?: OrderV2;\n}\n\n/**\n * OpenSea API configuration object\n * @param chain `Chain` to use. Defaults to Ethereum Mainnet (`Chain.Mainnet`)\n * @param apiKey API key to use. Not required for testnets\n * @param apiBaseUrl Optional base URL to use for the API\n */\nexport interface OpenSeaAPIConfig {\n  chain?: Chain;\n  apiKey?: string;\n  apiBaseUrl?: string;\n}\n\n/**\n * Each of the possible chains that OpenSea supports.\n * \u26A0\uFE0FNOTE: When adding to this list, also add to the util functions `getChainId` and `getWETHAddress`\n */\nexport enum Chain {\n  // Mainnet Chains\n  /** Ethereum */\n  Mainnet = \"ethereum\",\n  /** Polygon */\n  Polygon = \"matic\",\n  /** Klaytn */\n  Klaytn = \"klaytn\",\n  /** Base */\n  Base = \"base\",\n  /** Blast */\n  Blast = \"blast\",\n  /** Arbitrum */\n  Arbitrum = \"arbitrum\",\n  /** Arbitrum Nova */\n  ArbitrumNova = \"arbitrum_nova\",\n  /** Avalanche */\n  Avalanche = \"avalanche\",\n  /** Optimism */\n  Optimism = \"optimism\",\n  /** Solana */\n  Solana = \"solana\",\n  /** Zora */\n  Zora = \"zora\",\n  /** Sei */\n  Sei = \"sei\",\n  /** B3 */\n  B3 = \"b3\",\n  /** Bera Chain */\n  BeraChain = \"bera_chain\",\n  ApeChain = \"ape_chain\",\n  // Testnet Chains\n  // \u26A0\uFE0FNOTE: When adding to this list, also add to the util function `isTestChain`\n  /** Sepolia */\n  Sepolia = \"sepolia\",\n  /** Polygon Amoy */\n  Amoy = \"amoy\",\n  /** Klaytn Baobab */\n  Baobab = \"baobab\",\n  /** Base Testnet */\n  BaseSepolia = \"base_sepolia\",\n  /** Blast Testnet */\n  BlastSepolia = \"blast_sepolia\",\n  /** Arbitrum Sepolia */\n  ArbitrumSepolia = \"arbitrum_sepolia\",\n  /** Avalanche Fuji */\n  Fuji = \"avalanche_fuji\",\n  /** Optimism Sepolia */\n  OptimismSepolia = \"optimism_sepolia\",\n  /** Solana Devnet */\n  SolanaDevnet = \"soldev\",\n  /** Zora Sepolia */\n  ZoraSepolia = \"zora_sepolia\",\n  /** Sei Testnet */\n  SeiTestnet = \"sei_testnet\",\n  /** B3 Sepolia */\n  B3Sepolia = \"b3_sepolia\",\n  /** Flow Testnet */\n  FlowTestnet = \"flow_testnet\",\n}\n\n/**\n * Order side: listing (ask) or offer (bid)\n */\nexport enum OrderSide {\n  LISTING = \"ask\",\n  OFFER = \"bid\",\n}\n\n/**\n * Token standards\n */\nexport enum TokenStandard {\n  ERC20 = \"ERC20\",\n  ERC721 = \"ERC721\",\n  ERC1155 = \"ERC1155\",\n}\n\n/**\n * The collection's approval status within OpenSea.\n * Can be one of:\n * - not_requested: brand new collections\n * - requested: collections that requested safelisting on our site\n * - approved: collections that are approved on our site and can be found in search results\n * - verified: verified collections\n */\nexport enum SafelistStatus {\n  NOT_REQUESTED = \"not_requested\",\n  REQUESTED = \"requested\",\n  APPROVED = \"approved\",\n  VERIFIED = \"verified\",\n  DISABLED_TOP_TRENDING = \"disabled_top_trending\",\n}\n\n/**\n * Collection fees\n * @category API Models\n */\nexport interface Fee {\n  fee: number;\n  recipient: string;\n  required: boolean;\n}\n\n/**\n * Generic Blockchain Asset.\n * @category API Models\n */\nexport interface Asset {\n  /** The asset's token ID, or null if ERC-20 */\n  tokenId: string | null;\n  /** The asset's contract address */\n  tokenAddress: string;\n  /** The token standard (e.g. \"ERC721\") for this asset */\n  tokenStandard?: TokenStandard;\n  /** Optional for ENS names */\n  name?: string;\n  /** Optional for fungible items */\n  decimals?: number;\n}\n\n/**\n * Generic Blockchain Asset, with tokenId required.\n * @category API Models\n */\nexport interface AssetWithTokenId extends Asset {\n  /** The asset's token ID */\n  tokenId: string;\n}\n\n/**\n * Generic Blockchain Asset, with tokenStandard required.\n * @category API Models\n */\nexport interface AssetWithTokenStandard extends Asset {\n  /** The token standard (e.g. \"ERC721\") for this asset */\n  tokenStandard: TokenStandard;\n}\n\ninterface OpenSeaCollectionStatsIntervalData {\n  interval: \"one_day\" | \"seven_day\" | \"thirty_day\";\n  volume: number;\n  volume_diff: number;\n  volume_change: number;\n  sales: number;\n  sales_diff: number;\n  average_price: number;\n}\n\n/**\n * OpenSea Collection Stats\n * @category API Models\n */\nexport interface OpenSeaCollectionStats {\n  total: {\n    volume: number;\n    sales: number;\n    average_price: number;\n    num_owners: number;\n    market_cap: number;\n    floor_price: number;\n    floor_price_symbol: string;\n  };\n  intervals: OpenSeaCollectionStatsIntervalData[];\n}\n\nexport interface RarityStrategy {\n  strategyId: string;\n  strategyVersion: string;\n  calculatedAt: string;\n  maxRank: number;\n  tokensScored: number;\n}\n\n/**\n * OpenSea collection metadata.\n * @category API Models\n */\nexport interface OpenSeaCollection {\n  /** Name of the collection */\n  name: string;\n  /** The identifier (slug) of the collection */\n  collection: string;\n  /** Description of the collection */\n  description: string;\n  /** Image for the collection */\n  imageUrl: string;\n  /** Banner image for the collection */\n  bannerImageUrl: string;\n  /** Owner address of the collection */\n  owner: string;\n  /** The collection's safelist status */\n  safelistStatus: SafelistStatus;\n  /** The category of the collection */\n  category: string;\n  /** If the collection is disabled */\n  isDisabled: boolean;\n  /** If the collection is NSFW (not safe for work) */\n  isNSFW: boolean;\n  /** If trait offers are enabled */\n  traitOffersEnabled: boolean;\n  /** If collection offers are enabled */\n  collectionOffersEnabled: boolean;\n  /** The OpenSea url for the collection */\n  openseaUrl: string;\n  /** The project url for the collection */\n  projectUrl: string;\n  /** The wiki url for the collection */\n  wikiUrl: string;\n  /** The discord url for the collection */\n  discordUrl: string;\n  /** The telegram url for the collection */\n  telegramUrl: string;\n  /** The twitter username for the collection */\n  twitterUsername: string;\n  /** The instagram username for the collection */\n  instagramUsername: string;\n  /** The contracts for the collection */\n  contracts: { address: string; chain: Chain }[];\n  /** Accounts allowed to edit this collection */\n  editors: string[];\n  /** The fees for the collection */\n  fees: Fee[];\n  /** The rarity strategy for the collection */\n  rarity: RarityStrategy | null;\n  /** Payment tokens allowed for orders for this collection */\n  paymentTokens: OpenSeaPaymentToken[];\n  /** The total supply of the collection (minted minus burned) */\n  totalSupply: number;\n  /** The created date of the collection */\n  createdDate: string;\n  /** When defined, the zone required for orders for the collection */\n  requiredZone?: string;\n}\n\n/**\n * Full annotated Fungible Token spec with OpenSea metadata\n */\nexport interface OpenSeaPaymentToken {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address: string;\n  chain: Chain;\n  imageUrl?: string;\n  ethPrice?: string;\n  usdPrice?: string;\n}\n\n/**\n * Query interface for payment tokens\n * @category API Models\n */\nexport interface OpenSeaPaymentTokensQuery {\n  symbol?: string;\n  address?: string;\n  limit?: number;\n  next?: string;\n}\n\n/**\n * OpenSea Account\n * @category API Models\n */\nexport interface OpenSeaAccount {\n  address: string;\n  username: string;\n  profileImageUrl: string;\n  bannerImageUrl: string;\n  website: string;\n  socialMediaAccounts: SocialMediaAccount[];\n  bio: string;\n  joinedDate: string;\n}\n/**\n * Social media account\n * @category API Models\n */\nexport interface SocialMediaAccount {\n  platform: string;\n  username: string;\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"da71a0570aa90062b01f3c3ebd8cfb5408565097"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1rjro5sqpm=function(){return actualCoverage;};}return actualCoverage;}cov_1rjro5sqpm();cov_1rjro5sqpm().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1rjro5sqpm().s[1]++;exports.SafelistStatus=exports.TokenStandard=exports.OrderSide=exports.Chain=exports.EventType=void 0;/**
 * Events emitted by the SDK which can be used by frontend applications
 * to update state or show useful messages to users.
 * @category Events
 */var EventType;cov_1rjro5sqpm().s[2]++;(function(EventType){cov_1rjro5sqpm().f[0]++;cov_1rjro5sqpm().s[3]++;/**
     * Emitted when the transaction is sent to the network and the application
     * is waiting for the transaction to be mined.
     */EventType["TransactionCreated"]="TransactionCreated";/**
     * Emitted when the transaction has succeeded is mined and confirmed.
     */cov_1rjro5sqpm().s[4]++;EventType["TransactionConfirmed"]="TransactionConfirmed";/**
     * Emitted when the transaction has failed to be submitted.
     */cov_1rjro5sqpm().s[5]++;EventType["TransactionDenied"]="TransactionDenied";/**
     * Emitted when the transaction has failed to be mined.
     */cov_1rjro5sqpm().s[6]++;EventType["TransactionFailed"]="TransactionFailed";/**
     * Emitted when the {@link OpenSeaSDK.wrapEth} method is called.
     */cov_1rjro5sqpm().s[7]++;EventType["WrapEth"]="WrapEth";/**
     * Emitted when the {@link OpenSeaSDK.unwrapWeth} method is called.
     */cov_1rjro5sqpm().s[8]++;EventType["UnwrapWeth"]="UnwrapWeth";/**
     * Emitted when fulfilling a public or private order.
     */cov_1rjro5sqpm().s[9]++;EventType["MatchOrders"]="MatchOrders";/**
     * Emitted when the {@link OpenSeaSDK.cancelOrder} method is called.
     */cov_1rjro5sqpm().s[10]++;EventType["CancelOrder"]="CancelOrder";/**
     * Emitted when the {@link OpenSeaSDK.approveOrder} method is called.
     */cov_1rjro5sqpm().s[11]++;EventType["ApproveOrder"]="ApproveOrder";/**
     * Emitted when the {@link OpenSeaSDK.transfer} method is called.
     */cov_1rjro5sqpm().s[12]++;EventType["Transfer"]="Transfer";})((cov_1rjro5sqpm().b[0][0]++,EventType)||(cov_1rjro5sqpm().b[0][1]++,exports.EventType=EventType={}));/**
 * Each of the possible chains that OpenSea supports.
 * ⚠️NOTE: When adding to this list, also add to the util functions `getChainId` and `getWETHAddress`
 */var Chain;cov_1rjro5sqpm().s[13]++;(function(Chain){cov_1rjro5sqpm().f[1]++;cov_1rjro5sqpm().s[14]++;// Mainnet Chains
/** Ethereum */Chain["Mainnet"]="ethereum";/** Polygon */cov_1rjro5sqpm().s[15]++;Chain["Polygon"]="matic";/** Klaytn */cov_1rjro5sqpm().s[16]++;Chain["Klaytn"]="klaytn";/** Base */cov_1rjro5sqpm().s[17]++;Chain["Base"]="base";/** Blast */cov_1rjro5sqpm().s[18]++;Chain["Blast"]="blast";/** Arbitrum */cov_1rjro5sqpm().s[19]++;Chain["Arbitrum"]="arbitrum";/** Arbitrum Nova */cov_1rjro5sqpm().s[20]++;Chain["ArbitrumNova"]="arbitrum_nova";/** Avalanche */cov_1rjro5sqpm().s[21]++;Chain["Avalanche"]="avalanche";/** Optimism */cov_1rjro5sqpm().s[22]++;Chain["Optimism"]="optimism";/** Solana */cov_1rjro5sqpm().s[23]++;Chain["Solana"]="solana";/** Zora */cov_1rjro5sqpm().s[24]++;Chain["Zora"]="zora";/** Sei */cov_1rjro5sqpm().s[25]++;Chain["Sei"]="sei";/** B3 */cov_1rjro5sqpm().s[26]++;Chain["B3"]="b3";/** Bera Chain */cov_1rjro5sqpm().s[27]++;Chain["BeraChain"]="bera_chain";cov_1rjro5sqpm().s[28]++;Chain["ApeChain"]="ape_chain";// Testnet Chains
// ⚠️NOTE: When adding to this list, also add to the util function `isTestChain`
/** Sepolia */cov_1rjro5sqpm().s[29]++;Chain["Sepolia"]="sepolia";/** Polygon Amoy */cov_1rjro5sqpm().s[30]++;Chain["Amoy"]="amoy";/** Klaytn Baobab */cov_1rjro5sqpm().s[31]++;Chain["Baobab"]="baobab";/** Base Testnet */cov_1rjro5sqpm().s[32]++;Chain["BaseSepolia"]="base_sepolia";/** Blast Testnet */cov_1rjro5sqpm().s[33]++;Chain["BlastSepolia"]="blast_sepolia";/** Arbitrum Sepolia */cov_1rjro5sqpm().s[34]++;Chain["ArbitrumSepolia"]="arbitrum_sepolia";/** Avalanche Fuji */cov_1rjro5sqpm().s[35]++;Chain["Fuji"]="avalanche_fuji";/** Optimism Sepolia */cov_1rjro5sqpm().s[36]++;Chain["OptimismSepolia"]="optimism_sepolia";/** Solana Devnet */cov_1rjro5sqpm().s[37]++;Chain["SolanaDevnet"]="soldev";/** Zora Sepolia */cov_1rjro5sqpm().s[38]++;Chain["ZoraSepolia"]="zora_sepolia";/** Sei Testnet */cov_1rjro5sqpm().s[39]++;Chain["SeiTestnet"]="sei_testnet";/** B3 Sepolia */cov_1rjro5sqpm().s[40]++;Chain["B3Sepolia"]="b3_sepolia";/** Flow Testnet */cov_1rjro5sqpm().s[41]++;Chain["FlowTestnet"]="flow_testnet";})((cov_1rjro5sqpm().b[1][0]++,Chain)||(cov_1rjro5sqpm().b[1][1]++,exports.Chain=Chain={}));/**
 * Order side: listing (ask) or offer (bid)
 */var OrderSide;cov_1rjro5sqpm().s[42]++;(function(OrderSide){cov_1rjro5sqpm().f[2]++;cov_1rjro5sqpm().s[43]++;OrderSide["LISTING"]="ask";cov_1rjro5sqpm().s[44]++;OrderSide["OFFER"]="bid";})((cov_1rjro5sqpm().b[2][0]++,OrderSide)||(cov_1rjro5sqpm().b[2][1]++,exports.OrderSide=OrderSide={}));/**
 * Token standards
 */var TokenStandard;cov_1rjro5sqpm().s[45]++;(function(TokenStandard){cov_1rjro5sqpm().f[3]++;cov_1rjro5sqpm().s[46]++;TokenStandard["ERC20"]="ERC20";cov_1rjro5sqpm().s[47]++;TokenStandard["ERC721"]="ERC721";cov_1rjro5sqpm().s[48]++;TokenStandard["ERC1155"]="ERC1155";})((cov_1rjro5sqpm().b[3][0]++,TokenStandard)||(cov_1rjro5sqpm().b[3][1]++,exports.TokenStandard=TokenStandard={}));/**
 * The collection's approval status within OpenSea.
 * Can be one of:
 * - not_requested: brand new collections
 * - requested: collections that requested safelisting on our site
 * - approved: collections that are approved on our site and can be found in search results
 * - verified: verified collections
 */var SafelistStatus;cov_1rjro5sqpm().s[49]++;(function(SafelistStatus){cov_1rjro5sqpm().f[4]++;cov_1rjro5sqpm().s[50]++;SafelistStatus["NOT_REQUESTED"]="not_requested";cov_1rjro5sqpm().s[51]++;SafelistStatus["REQUESTED"]="requested";cov_1rjro5sqpm().s[52]++;SafelistStatus["APPROVED"]="approved";cov_1rjro5sqpm().s[53]++;SafelistStatus["VERIFIED"]="verified";cov_1rjro5sqpm().s[54]++;SafelistStatus["DISABLED_TOP_TRENDING"]="disabled_top_trending";})((cov_1rjro5sqpm().b[4][0]++,SafelistStatus)||(cov_1rjro5sqpm().b[4][1]++,exports.SafelistStatus=SafelistStatus={}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,