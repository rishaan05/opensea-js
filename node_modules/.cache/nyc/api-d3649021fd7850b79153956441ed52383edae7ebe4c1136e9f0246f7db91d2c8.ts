"use strict";function cov_1r76ud9kcq(){var path="/Users/rg/dev/opensea-js/src/api/api.ts";var hash="3d37a65e487d5b7040697e71ea4c6e0f43d35b18";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/src/api/api.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:28}},"2":{start:{line:4,column:17},end:{line:4,column:34}},"3":{start:{line:5,column:19},end:{line:5,column:40}},"4":{start:{line:6,column:16},end:{line:6,column:34}},"5":{start:{line:7,column:20},end:{line:7,column:43}},"6":{start:{line:8,column:16},end:{line:8,column:42}},"7":{start:{line:9,column:16},end:{line:9,column:35}},"8":{start:{line:10,column:16},end:{line:10,column:41}},"9":{start:{line:12,column:4},end:{line:16,column:7}},"10":{start:{line:13,column:8},end:{line:15,column:21}},"11":{start:{line:14,column:12},end:{line:14,column:22}},"12":{start:{line:32,column:8},end:{line:32,column:27}},"13":{start:{line:33,column:8},end:{line:33,column:36}},"14":{start:{line:34,column:8},end:{line:34,column:59}},"15":{start:{line:35,column:8},end:{line:42,column:9}},"16":{start:{line:36,column:12},end:{line:36,column:48}},"17":{start:{line:39,column:12},end:{line:41,column:47}},"18":{start:{line:44,column:8},end:{line:44,column:47}},"19":{start:{line:44,column:42},end:{line:44,column:45}},"20":{start:{line:65,column:27},end:{line:70,column:11}},"21":{start:{line:71,column:8},end:{line:73,column:9}},"22":{start:{line:72,column:12},end:{line:72,column:66}},"23":{start:{line:74,column:8},end:{line:74,column:56}},"24":{start:{line:93,column:25},end:{line:98,column:11}},"25":{start:{line:99,column:8},end:{line:102,column:10}},"26":{start:{line:112,column:25},end:{line:115,column:10}},"27":{start:{line:116,column:8},end:{line:116,column:24}},"28":{start:{line:126,column:25},end:{line:129,column:10}},"29":{start:{line:130,column:8},end:{line:130,column:24}},"30":{start:{line:139,column:25},end:{line:139,column:101}},"31":{start:{line:140,column:8},end:{line:140,column:24}},"32":{start:{line:149,column:25},end:{line:149,column:103}},"33":{start:{line:150,column:8},end:{line:150,column:24}},"34":{start:{line:160,column:25},end:{line:163,column:10}},"35":{start:{line:164,column:8},end:{line:164,column:24}},"36":{start:{line:175,column:22},end:{line:175,column:26}},"37":{start:{line:176,column:8},end:{line:181,column:9}},"38":{start:{line:177,column:12},end:{line:177,column:118}},"39":{start:{line:180,column:12},end:{line:180,column:116}},"40":{start:{line:182,column:25},end:{line:182,column:92}},"41":{start:{line:183,column:8},end:{line:183,column:24}},"42":{start:{line:197,column:64},end:{line:197,column:74}},"43":{start:{line:198,column:25},end:{line:198,column:151}},"44":{start:{line:199,column:8},end:{line:199,column:61}},"45":{start:{line:212,column:8},end:{line:216,column:9}},"46":{start:{line:213,column:12},end:{line:215,column:13}},"47":{start:{line:214,column:16},end:{line:214,column:100}},"48":{start:{line:217,column:24},end:{line:217,column:156}},"49":{start:{line:218,column:25},end:{line:218,column:86}},"50":{start:{line:219,column:8},end:{line:219,column:24}},"51":{start:{line:227,column:8},end:{line:227,column:77}},"52":{start:{line:238,column:24},end:{line:238,column:102}},"53":{start:{line:239,column:8},end:{line:239,column:86}},"54":{start:{line:249,column:25},end:{line:252,column:10}},"55":{start:{line:253,column:8},end:{line:253,column:24}},"56":{start:{line:264,column:25},end:{line:267,column:10}},"57":{start:{line:268,column:8},end:{line:268,column:24}},"58":{start:{line:279,column:25},end:{line:282,column:10}},"59":{start:{line:283,column:8},end:{line:283,column:24}},"60":{start:{line:293,column:25},end:{line:293,column:95}},"61":{start:{line:294,column:8},end:{line:294,column:24}},"62":{start:{line:302,column:21},end:{line:302,column:60}},"63":{start:{line:303,column:25},end:{line:303,column:45}},"64":{start:{line:304,column:8},end:{line:304,column:57}},"65":{start:{line:317,column:21},end:{line:317,column:57}},"66":{start:{line:318,column:21},end:{line:325,column:9}},"67":{start:{line:326,column:25},end:{line:326,column:51}},"68":{start:{line:327,column:8},end:{line:327,column:117}},"69":{start:{line:327,column:72},end:{line:327,column:115}},"70":{start:{line:328,column:8},end:{line:328,column:24}},"71":{start:{line:336,column:21},end:{line:336,column:65}},"72":{start:{line:337,column:25},end:{line:337,column:45}},"73":{start:{line:338,column:8},end:{line:338,column:24}},"74":{start:{line:347,column:21},end:{line:347,column:88}},"75":{start:{line:348,column:8},end:{line:348,column:55}},"76":{start:{line:357,column:21},end:{line:357,column:76}},"77":{start:{line:358,column:8},end:{line:358,column:50}},"78":{start:{line:368,column:25},end:{line:368,column:112}},"79":{start:{line:369,column:8},end:{line:369,column:24}},"80":{start:{line:386,column:25},end:{line:386,column:133}},"81":{start:{line:387,column:8},end:{line:387,column:24}},"82":{start:{line:396,column:19},end:{line:396,column:51}},"83":{start:{line:397,column:20},end:{line:397,column:56}},"84":{start:{line:398,column:8},end:{line:398,column:38}},"85":{start:{line:408,column:20},end:{line:408,column:50}},"86":{start:{line:409,column:8},end:{line:409,column:50}},"87":{start:{line:412,column:32},end:{line:412,column:53}},"88":{start:{line:413,column:8},end:{line:420,column:11}},"89":{start:{line:414,column:12},end:{line:419,column:13}},"90":{start:{line:415,column:16},end:{line:415,column:83}},"91":{start:{line:415,column:40},end:{line:415,column:81}},"92":{start:{line:417,column:17},end:{line:419,column:13}},"93":{start:{line:418,column:16},end:{line:418,column:51}},"94":{start:{line:421,column:8},end:{line:421,column:42}},"95":{start:{line:430,column:20},end:{line:430,column:57}},"96":{start:{line:432,column:8},end:{line:436,column:10}},"97":{start:{line:437,column:8},end:{line:439,column:9}},"98":{start:{line:438,column:12},end:{line:438,column:38}},"99":{start:{line:441,column:8},end:{line:443,column:9}},"100":{start:{line:442,column:12},end:{line:442,column:28}},"101":{start:{line:447,column:8},end:{line:452,column:10}},"102":{start:{line:448,column:12},end:{line:448,column:90}},"103":{start:{line:450,column:12},end:{line:450,column:30}},"104":{start:{line:451,column:12},end:{line:451,column:24}},"105":{start:{line:453,column:8},end:{line:456,column:14}},"106":{start:{line:457,column:25},end:{line:457,column:41}},"107":{start:{line:458,column:8},end:{line:473,column:9}},"108":{start:{line:460,column:27},end:{line:460,column:52}},"109":{start:{line:461,column:12},end:{line:472,column:13}},"110":{start:{line:462,column:35},end:{line:462,column:52}},"111":{start:{line:463,column:16},end:{line:465,column:17}},"112":{start:{line:464,column:20},end:{line:464,column:58}},"113":{start:{line:466,column:16},end:{line:466,column:65}},"114":{start:{line:471,column:16},end:{line:471,column:36}},"115":{start:{line:474,column:8},end:{line:474,column:33}},"116":{start:{line:477,column:0},end:{line:477,column:32}}},fnMap:{"0":{name:"stall",decl:{start:{line:11,column:9},end:{line:11,column:14}},loc:{start:{line:11,column:25},end:{line:17,column:1}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:23},end:{line:12,column:24}},loc:{start:{line:12,column:36},end:{line:16,column:5}},line:12},"2":{name:"(anonymous_2)",decl:{start:{line:13,column:19},end:{line:13,column:20}},loc:{start:{line:13,column:25},end:{line:15,column:9}},line:13},"3":{name:"(anonymous_3)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:32},end:{line:45,column:5}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:44,column:33},end:{line:44,column:34}},loc:{start:{line:44,column:42},end:{line:44,column:45}},line:44},"5":{name:"(anonymous_5)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:118},end:{line:75,column:5}},line:64},"6":{name:"(anonymous_6)",decl:{start:{line:92,column:4},end:{line:92,column:5}},loc:{start:{line:92,column:119},end:{line:103,column:5}},line:92},"7":{name:"(anonymous_7)",decl:{start:{line:111,column:4},end:{line:111,column:5}},loc:{start:{line:111,column:52},end:{line:117,column:5}},line:111},"8":{name:"(anonymous_8)",decl:{start:{line:125,column:4},end:{line:125,column:5}},loc:{start:{line:125,column:54},end:{line:131,column:5}},line:125},"9":{name:"(anonymous_9)",decl:{start:{line:138,column:4},end:{line:138,column:5}},loc:{start:{line:138,column:48},end:{line:141,column:5}},line:138},"10":{name:"(anonymous_10)",decl:{start:{line:148,column:4},end:{line:148,column:5}},loc:{start:{line:148,column:50},end:{line:151,column:5}},line:148},"11":{name:"(anonymous_11)",decl:{start:{line:159,column:4},end:{line:159,column:5}},loc:{start:{line:159,column:55},end:{line:165,column:5}},line:159},"12":{name:"(anonymous_12)",decl:{start:{line:174,column:4},end:{line:174,column:5}},loc:{start:{line:174,column:86},end:{line:184,column:5}},line:174},"13":{name:"(anonymous_13)",decl:{start:{line:195,column:4},end:{line:195,column:5}},loc:{start:{line:195,column:39},end:{line:200,column:5}},line:195},"14":{name:"(anonymous_14)",decl:{start:{line:211,column:4},end:{line:211,column:5}},loc:{start:{line:211,column:117},end:{line:220,column:5}},line:211},"15":{name:"(anonymous_15)",decl:{start:{line:226,column:4},end:{line:226,column:5}},loc:{start:{line:226,column:36},end:{line:228,column:5}},line:226},"16":{name:"(anonymous_16)",decl:{start:{line:237,column:4},end:{line:237,column:5}},loc:{start:{line:237,column:66},end:{line:240,column:5}},line:237},"17":{name:"(anonymous_17)",decl:{start:{line:248,column:4},end:{line:248,column:5}},loc:{start:{line:248,column:73},end:{line:254,column:5}},line:248},"18":{name:"(anonymous_18)",decl:{start:{line:263,column:4},end:{line:263,column:5}},loc:{start:{line:263,column:94},end:{line:269,column:5}},line:263},"19":{name:"(anonymous_19)",decl:{start:{line:278,column:4},end:{line:278,column:5}},loc:{start:{line:278,column:93},end:{line:284,column:5}},line:278},"20":{name:"(anonymous_20)",decl:{start:{line:292,column:4},end:{line:292,column:5}},loc:{start:{line:292,column:58},end:{line:295,column:5}},line:292},"21":{name:"(anonymous_21)",decl:{start:{line:301,column:4},end:{line:301,column:5}},loc:{start:{line:301,column:30},end:{line:305,column:5}},line:301},"22":{name:"(anonymous_22)",decl:{start:{line:316,column:4},end:{line:316,column:5}},loc:{start:{line:316,column:141},end:{line:329,column:5}},line:316},"23":{name:"(anonymous_23)",decl:{start:{line:327,column:56},end:{line:327,column:57}},loc:{start:{line:327,column:72},end:{line:327,column:115}},line:327},"24":{name:"(anonymous_24)",decl:{start:{line:335,column:4},end:{line:335,column:5}},loc:{start:{line:335,column:35},end:{line:339,column:5}},line:335},"25":{name:"(anonymous_25)",decl:{start:{line:346,column:4},end:{line:346,column:5}},loc:{start:{line:346,column:55},end:{line:349,column:5}},line:346},"26":{name:"(anonymous_26)",decl:{start:{line:356,column:4},end:{line:356,column:5}},loc:{start:{line:356,column:30},end:{line:359,column:5}},line:356},"27":{name:"(anonymous_27)",decl:{start:{line:367,column:4},end:{line:367,column:5}},loc:{start:{line:367,column:70},end:{line:370,column:5}},line:367},"28":{name:"(anonymous_28)",decl:{start:{line:385,column:4},end:{line:385,column:5}},loc:{start:{line:385,column:96},end:{line:388,column:5}},line:385},"29":{name:"(anonymous_29)",decl:{start:{line:395,column:4},end:{line:395,column:5}},loc:{start:{line:395,column:35},end:{line:399,column:5}},line:395},"30":{name:"(anonymous_30)",decl:{start:{line:407,column:4},end:{line:407,column:5}},loc:{start:{line:407,column:36},end:{line:410,column:5}},line:407},"31":{name:"(anonymous_31)",decl:{start:{line:411,column:4},end:{line:411,column:5}},loc:{start:{line:411,column:38},end:{line:422,column:5}},line:411},"32":{name:"(anonymous_32)",decl:{start:{line:413,column:39},end:{line:413,column:40}},loc:{start:{line:413,column:57},end:{line:420,column:9}},line:413},"33":{name:"(anonymous_33)",decl:{start:{line:415,column:30},end:{line:415,column:31}},loc:{start:{line:415,column:40},end:{line:415,column:81}},line:415},"34":{name:"(anonymous_34)",decl:{start:{line:428,column:4},end:{line:428,column:5}},loc:{start:{line:428,column:37},end:{line:475,column:5}},line:428},"35":{name:"(anonymous_35)",decl:{start:{line:447,column:24},end:{line:447,column:25}},loc:{start:{line:447,column:55},end:{line:452,column:9}},line:447}},branchMap:{"0":{loc:{start:{line:34,column:21},end:{line:34,column:58}},type:"binary-expr",locations:[{start:{line:34,column:21},end:{line:34,column:33}},{start:{line:34,column:37},end:{line:34,column:58}}],line:34},"1":{loc:{start:{line:35,column:8},end:{line:42,column:9}},type:"if",locations:[{start:{line:35,column:8},end:{line:42,column:9}},{start:{line:35,column:8},end:{line:42,column:9}}],line:35},"2":{loc:{start:{line:39,column:30},end:{line:41,column:46}},type:"cond-expr",locations:[{start:{line:40,column:18},end:{line:40,column:46}},{start:{line:41,column:18},end:{line:41,column:46}}],line:39},"3":{loc:{start:{line:44,column:22},end:{line:44,column:46}},type:"binary-expr",locations:[{start:{line:44,column:22},end:{line:44,column:28}},{start:{line:44,column:33},end:{line:44,column:45}}],line:44},"4":{loc:{start:{line:64,column:27},end:{line:64,column:47}},type:"default-arg",locations:[{start:{line:64,column:38},end:{line:64,column:47}}],line:64},"5":{loc:{start:{line:64,column:49},end:{line:64,column:72}},type:"default-arg",locations:[{start:{line:64,column:66},end:{line:64,column:72}}],line:64},"6":{loc:{start:{line:64,column:74},end:{line:64,column:98}},type:"default-arg",locations:[{start:{line:64,column:84},end:{line:64,column:98}}],line:64},"7":{loc:{start:{line:71,column:8},end:{line:73,column:9}},type:"if",locations:[{start:{line:71,column:8},end:{line:73,column:9}},{start:{line:71,column:8},end:{line:73,column:9}}],line:71},"8":{loc:{start:{line:92,column:28},end:{line:92,column:48}},type:"default-arg",locations:[{start:{line:92,column:39},end:{line:92,column:48}}],line:92},"9":{loc:{start:{line:92,column:50},end:{line:92,column:73}},type:"default-arg",locations:[{start:{line:92,column:67},end:{line:92,column:73}}],line:92},"10":{loc:{start:{line:92,column:75},end:{line:92,column:99}},type:"default-arg",locations:[{start:{line:92,column:85},end:{line:92,column:99}}],line:92},"11":{loc:{start:{line:176,column:8},end:{line:181,column:9}},type:"if",locations:[{start:{line:176,column:8},end:{line:181,column:9}},{start:{line:176,column:8},end:{line:181,column:9}}],line:176},"12":{loc:{start:{line:197,column:16},end:{line:197,column:36}},type:"default-arg",locations:[{start:{line:197,column:27},end:{line:197,column:36}}],line:197},"13":{loc:{start:{line:211,column:63},end:{line:211,column:92}},type:"default-arg",locations:[{start:{line:211,column:88},end:{line:211,column:92}}],line:211},"14":{loc:{start:{line:212,column:8},end:{line:216,column:9}},type:"if",locations:[{start:{line:212,column:8},end:{line:216,column:9}},{start:{line:212,column:8},end:{line:216,column:9}}],line:212},"15":{loc:{start:{line:212,column:12},end:{line:212,column:35}},type:"binary-expr",locations:[{start:{line:212,column:12},end:{line:212,column:21}},{start:{line:212,column:25},end:{line:212,column:35}}],line:212},"16":{loc:{start:{line:213,column:12},end:{line:215,column:13}},type:"if",locations:[{start:{line:213,column:12},end:{line:215,column:13}},{start:{line:213,column:12},end:{line:215,column:13}}],line:213},"17":{loc:{start:{line:213,column:16},end:{line:213,column:41}},type:"binary-expr",locations:[{start:{line:213,column:16},end:{line:213,column:26}},{start:{line:213,column:30},end:{line:213,column:41}}],line:213},"18":{loc:{start:{line:248,column:36},end:{line:248,column:53}},type:"default-arg",locations:[{start:{line:248,column:44},end:{line:248,column:53}}],line:248},"19":{loc:{start:{line:248,column:55},end:{line:248,column:71}},type:"default-arg",locations:[{start:{line:248,column:62},end:{line:248,column:71}}],line:248},"20":{loc:{start:{line:263,column:37},end:{line:263,column:54}},type:"default-arg",locations:[{start:{line:263,column:45},end:{line:263,column:54}}],line:263},"21":{loc:{start:{line:263,column:56},end:{line:263,column:72}},type:"default-arg",locations:[{start:{line:263,column:63},end:{line:263,column:72}}],line:263},"22":{loc:{start:{line:263,column:74},end:{line:263,column:92}},type:"default-arg",locations:[{start:{line:263,column:82},end:{line:263,column:92}}],line:263},"23":{loc:{start:{line:278,column:36},end:{line:278,column:53}},type:"default-arg",locations:[{start:{line:278,column:44},end:{line:278,column:53}}],line:278},"24":{loc:{start:{line:278,column:55},end:{line:278,column:71}},type:"default-arg",locations:[{start:{line:278,column:62},end:{line:278,column:71}}],line:278},"25":{loc:{start:{line:278,column:73},end:{line:278,column:91}},type:"default-arg",locations:[{start:{line:278,column:81},end:{line:278,column:91}}],line:278},"26":{loc:{start:{line:292,column:38},end:{line:292,column:56}},type:"default-arg",locations:[{start:{line:292,column:46},end:{line:292,column:56}}],line:292},"27":{loc:{start:{line:316,column:25},end:{line:316,column:79}},type:"default-arg",locations:[{start:{line:316,column:35},end:{line:316,column:79}}],line:316},"28":{loc:{start:{line:316,column:105},end:{line:316,column:126}},type:"default-arg",locations:[{start:{line:316,column:121},end:{line:316,column:126}}],line:316},"29":{loc:{start:{line:346,column:35},end:{line:346,column:53}},type:"default-arg",locations:[{start:{line:346,column:43},end:{line:346,column:53}}],line:346},"30":{loc:{start:{line:367,column:50},end:{line:367,column:68}},type:"default-arg",locations:[{start:{line:367,column:58},end:{line:367,column:68}}],line:367},"31":{loc:{start:{line:385,column:58},end:{line:385,column:76}},type:"default-arg",locations:[{start:{line:385,column:66},end:{line:385,column:76}}],line:385},"32":{loc:{start:{line:395,column:23},end:{line:395,column:33}},type:"default-arg",locations:[{start:{line:395,column:31},end:{line:395,column:33}}],line:395},"33":{loc:{start:{line:411,column:25},end:{line:411,column:36}},type:"default-arg",locations:[{start:{line:411,column:34},end:{line:411,column:36}}],line:411},"34":{loc:{start:{line:414,column:12},end:{line:419,column:13}},type:"if",locations:[{start:{line:414,column:12},end:{line:419,column:13}},{start:{line:414,column:12},end:{line:419,column:13}}],line:414},"35":{loc:{start:{line:414,column:16},end:{line:414,column:45}},type:"binary-expr",locations:[{start:{line:414,column:16},end:{line:414,column:21}},{start:{line:414,column:25},end:{line:414,column:45}}],line:414},"36":{loc:{start:{line:415,column:40},end:{line:415,column:81}},type:"binary-expr",locations:[{start:{line:415,column:40},end:{line:415,column:44}},{start:{line:415,column:48},end:{line:415,column:81}}],line:415},"37":{loc:{start:{line:417,column:17},end:{line:419,column:13}},type:"if",locations:[{start:{line:417,column:17},end:{line:419,column:13}},{start:{line:417,column:17},end:{line:419,column:13}}],line:417},"38":{loc:{start:{line:434,column:16},end:{line:434,column:63}},type:"cond-expr",locations:[{start:{line:434,column:30},end:{line:434,column:58}},{start:{line:434,column:61},end:{line:434,column:63}}],line:434},"39":{loc:{start:{line:441,column:8},end:{line:443,column:9}},type:"if",locations:[{start:{line:441,column:8},end:{line:443,column:9}},{start:{line:441,column:8},end:{line:443,column:9}}],line:441},"40":{loc:{start:{line:458,column:8},end:{line:473,column:9}},type:"if",locations:[{start:{line:458,column:8},end:{line:473,column:9}},{start:{line:458,column:8},end:{line:473,column:9}}],line:458},"41":{loc:{start:{line:461,column:12},end:{line:472,column:13}},type:"if",locations:[{start:{line:461,column:12},end:{line:472,column:13}},{start:{line:461,column:12},end:{line:472,column:13}}],line:461},"42":{loc:{start:{line:463,column:16},end:{line:465,column:17}},type:"if",locations:[{start:{line:463,column:16},end:{line:465,column:17}},{start:{line:463,column:16},end:{line:465,column:17}}],line:463}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0],"5":[0],"6":[0],"7":[0,0],"8":[0],"9":[0],"10":[0],"11":[0,0],"12":[0],"13":[0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0],"19":[0],"20":[0],"21":[0],"22":[0],"23":[0],"24":[0],"25":[0],"26":[0],"27":[0],"28":[0],"29":[0],"30":[0],"31":[0],"32":[0],"33":[0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0]},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/src/api/api.ts",sources:["/Users/rg/dev/opensea-js/src/api/api.ts"],names:[],mappings:"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",sourcesContent:["import { ethers } from \"ethers\";\nimport {\n  getCollectionPath,\n  getCollectionsPath,\n  getOrdersAPIPath,\n  getPostCollectionOfferPath,\n  getBuildOfferPath,\n  getListNFTsByCollectionPath,\n  getListNFTsByContractPath,\n  getNFTPath,\n  getRefreshMetadataPath,\n  getCollectionOffersPath,\n  getListNFTsByAccountPath,\n  getBestOfferAPIPath,\n  getBestListingAPIPath,\n  getAllOffersAPIPath,\n  getAllListingsAPIPath,\n  getPaymentTokenPath,\n  getAccountPath,\n  getCollectionStatsPath,\n  getBestListingsAPIPath,\n  getCancelOrderPath,\n} from \"./apiPaths\";\nimport {\n  BuildOfferResponse,\n  GetCollectionResponse,\n  GetCollectionsResponse,\n  ListNFTsResponse,\n  GetNFTResponse,\n  ListCollectionOffersResponse,\n  GetOrdersResponse,\n  GetBestOfferResponse,\n  GetBestListingResponse,\n  GetOffersResponse,\n  GetListingsResponse,\n  CollectionOffer,\n  CollectionOrderByOption,\n  CancelOrderResponse,\n  GetCollectionsArgs,\n} from \"./types\";\nimport { API_BASE_MAINNET, API_BASE_TESTNET } from \"../constants\";\nimport {\n  FulfillmentDataResponse,\n  OrderAPIOptions,\n  OrdersPostQueryResponse,\n  OrdersQueryOptions,\n  OrdersQueryResponse,\n  OrderV2,\n  ProtocolData,\n} from \"../orders/types\";\nimport {\n  serializeOrdersQueryOptions,\n  deserializeOrder,\n  getFulfillmentDataPath,\n  getFulfillListingPayload,\n  getFulfillOfferPayload,\n  getBuildCollectionOfferPayload,\n  getPostCollectionOfferPayload,\n} from \"../orders/utils\";\nimport {\n  Chain,\n  OpenSeaAPIConfig,\n  OpenSeaAccount,\n  OpenSeaCollection,\n  OpenSeaCollectionStats,\n  OpenSeaPaymentToken,\n  OrderSide,\n} from \"../types\";\nimport {\n  paymentTokenFromJSON,\n  collectionFromJSON,\n  isTestChain,\n  accountFromJSON,\n} from \"../utils/utils\";\n\nfunction stall(duration: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n\n/**\n * The API class for the OpenSea SDK.\n * @category Main Classes\n */\nexport class OpenSeaAPI {\n  /**\n   * Base url for the API\n   */\n  public readonly apiBaseUrl: string;\n  /**\n   * Default size to use for fetching orders\n   */\n  public pageSize = 20;\n  /**\n   * Logger function to use when debugging\n   */\n  public logger: (arg: string) => void;\n\n  private apiKey: string | undefined;\n  private chain: Chain;\n\n  /**\n   * Create an instance of the OpenSeaAPI\n   * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, Chain name, and base URL\n   * @param logger Optional function for logging debug strings before and after requests are made. Defaults to no logging\n   */\n  constructor(config: OpenSeaAPIConfig, logger?: (arg: string) => void) {\n    this.apiKey = config.apiKey;\n    this.chain = config.chain ?? Chain.Mainnet;\n\n    if (config.apiBaseUrl) {\n      this.apiBaseUrl = config.apiBaseUrl;\n    } else {\n      this.apiBaseUrl = isTestChain(this.chain)\n        ? API_BASE_TESTNET\n        : API_BASE_MAINNET;\n    }\n\n    // Debugging: default to nothing\n    this.logger = logger ?? ((arg: string) => arg);\n  }\n\n  /**\n   * Gets an order from API based on query options.\n   * @param options\n   * @param options.side The side of the order (buy or sell\n   * @param options.protocol The protocol, typically seaport, to query orders for\n   * @param options.orderDirection The direction to sort the orders\n   * @param options.orderBy The field to sort the orders by\n   * @param options.limit The number of orders to retrieve\n   * @param options.maker Filter by the wallet address of the order maker\n   * @param options.taker Filter by  wallet address of the order taker\n   * @param options.asset_contract_address Address of the NFT's contract\n   * @param options.token_ids String array of token IDs to filter by.\n   * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds\n   * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds\n   * @returns The first {@link OrderV2} returned by the API\n   *\n   * @throws An error if there are no matching orders.\n   */\n  public async getOrder({\n    side,\n    protocol = \"seaport\",\n    orderDirection = \"desc\",\n    orderBy = \"created_date\",\n    ...restOptions\n  }: Omit<OrdersQueryOptions, \"limit\">): Promise<OrderV2> {\n    const { orders } = await this.get<OrdersQueryResponse>(\n      getOrdersAPIPath(this.chain, protocol, side),\n      serializeOrdersQueryOptions({\n        limit: 1,\n        orderBy,\n        orderDirection,\n        ...restOptions,\n      }),\n    );\n    if (orders.length === 0) {\n      throw new Error(\"Not found: no matching order found\");\n    }\n    return deserializeOrder(orders[0]);\n  }\n\n  /**\n   * Gets a list of orders from API based on query options.\n   * @param options\n   * @param options.side The side of the order (buy or sell)\n   * @param options.protocol The protocol, typically seaport, to query orders for\n   * @param options.orderDirection The direction to sort the orders\n   * @param options.orderBy The field to sort the orders by\n   * @param options.limit The number of orders to retrieve\n   * @param options.maker Filter by the wallet address of the order maker\n   * @param options.taker Filter by  wallet address of the order taker\n   * @param options.asset_contract_address Address of the NFT's contract\n   * @param options.token_ids String array of token IDs to filter by.\n   * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds\n   * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds\n   * @returns The {@link GetOrdersResponse} returned by the API.\n   */\n  public async getOrders({\n    side,\n    protocol = \"seaport\",\n    orderDirection = \"desc\",\n    orderBy = \"created_date\",\n    ...restOptions\n  }: Omit<OrdersQueryOptions, \"limit\">): Promise<GetOrdersResponse> {\n    const response = await this.get<OrdersQueryResponse>(\n      getOrdersAPIPath(this.chain, protocol, side),\n      serializeOrdersQueryOptions({\n        limit: this.pageSize,\n        orderBy,\n        orderDirection,\n        ...restOptions,\n      }),\n    );\n    return {\n      ...response,\n      orders: response.orders.map(deserializeOrder),\n    };\n  }\n\n  /**\n   * Gets all offers for a given collection.\n   * @param collectionSlug The slug of the collection.\n   * @param limit The number of offers to return. Must be between 1 and 100. Default: 100\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetOffersResponse} returned by the API.\n   */\n  public async getAllOffers(\n    collectionSlug: string,\n    limit?: number,\n    next?: string,\n  ): Promise<GetOffersResponse> {\n    const response = await this.get<GetOffersResponse>(\n      getAllOffersAPIPath(collectionSlug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Gets all listings for a given collection.\n   * @param collectionSlug The slug of the collection.\n   * @param limit The number of listings to return. Must be between 1 and 100. Default: 100\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetListingsResponse} returned by the API.\n   */\n  public async getAllListings(\n    collectionSlug: string,\n    limit?: number,\n    next?: string,\n  ): Promise<GetListingsResponse> {\n    const response = await this.get<GetListingsResponse>(\n      getAllListingsAPIPath(collectionSlug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Gets the best offer for a given token.\n   * @param collectionSlug The slug of the collection.\n   * @param tokenId The token identifier.\n   * @returns The {@link GetBestOfferResponse} returned by the API.\n   */\n  public async getBestOffer(\n    collectionSlug: string,\n    tokenId: string | number,\n  ): Promise<GetBestOfferResponse> {\n    const response = await this.get<GetBestOfferResponse>(\n      getBestOfferAPIPath(collectionSlug, tokenId),\n    );\n    return response;\n  }\n\n  /**\n   * Gets the best listing for a given token.\n   * @param collectionSlug The slug of the collection.\n   * @param tokenId The token identifier.\n   * @returns The {@link GetBestListingResponse} returned by the API.\n   */\n  public async getBestListing(\n    collectionSlug: string,\n    tokenId: string | number,\n  ): Promise<GetBestListingResponse> {\n    const response = await this.get<GetBestListingResponse>(\n      getBestListingAPIPath(collectionSlug, tokenId),\n    );\n    return response;\n  }\n\n  /**\n   * Gets the best listings for a given collection.\n   * @param collectionSlug The slug of the collection.\n   * @param limit The number of listings to return. Must be between 1 and 100. Default: 100\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetListingsResponse} returned by the API.\n   */\n  public async getBestListings(\n    collectionSlug: string,\n    limit?: number,\n    next?: string,\n  ): Promise<GetListingsResponse> {\n    const response = await this.get<GetListingsResponse>(\n      getBestListingsAPIPath(collectionSlug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Generate the data needed to fulfill a listing or an offer onchain.\n   * @param fulfillerAddress The wallet address which will be used to fulfill the order\n   * @param orderHash The hash of the order to fulfill\n   * @param protocolAddress The address of the seaport contract\n   * @side The side of the order (buy or sell)\n   * @returns The {@link FulfillmentDataResponse}\n   */\n  public async generateFulfillmentData(\n    fulfillerAddress: string,\n    orderHash: string,\n    protocolAddress: string,\n    side: OrderSide,\n  ): Promise<FulfillmentDataResponse> {\n    let payload: object | null = null;\n    if (side === OrderSide.ASK) {\n      payload = getFulfillListingPayload(\n        fulfillerAddress,\n        orderHash,\n        protocolAddress,\n        this.chain,\n      );\n    } else {\n      payload = getFulfillOfferPayload(\n        fulfillerAddress,\n        orderHash,\n        protocolAddress,\n        this.chain,\n      );\n    }\n    const response = await this.post<FulfillmentDataResponse>(\n      getFulfillmentDataPath(side),\n      payload,\n    );\n    return response;\n  }\n\n  /**\n   * Post an order to OpenSea.\n   * @param order The order to post\n   * @param apiOptions\n   * @param apiOptions.protocol The protocol, typically seaport, to post the order to.\n   * @param apiOptions.side The side of the order (buy or sell).\n   * @param apiOptions.protocolAddress The address of the seaport contract.\n   * @param options\n   * @returns The {@link OrderV2} posted to the API.\n   */\n  public async postOrder(\n    order: ProtocolData,\n    apiOptions: OrderAPIOptions,\n  ): Promise<OrderV2> {\n    // TODO: Validate apiOptions. Avoid API calls that will definitely fail\n    const { protocol = \"seaport\", side, protocolAddress } = apiOptions;\n    const response = await this.post<OrdersPostQueryResponse>(\n      getOrdersAPIPath(this.chain, protocol, side),\n      { ...order, protocol_address: protocolAddress },\n    );\n    return deserializeOrder(response.order);\n  }\n\n  /**\n   * Build a OpenSea collection offer.\n   * @param offererAddress The wallet address which is creating the offer.\n   * @param quantity The number of NFTs requested in the offer.\n   * @param collectionSlug The slug (identifier) of the collection to build the offer for.\n   * @param offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.\n   * @param traitType If defined, the trait name to create the collection offer for.\n   * @param traitValue If defined, the trait value to create the collection offer for.\n   * @returns The {@link BuildOfferResponse} returned by the API.\n   */\n  public async buildOffer(\n    offererAddress: string,\n    quantity: number,\n    collectionSlug: string,\n    offerProtectionEnabled = true,\n    traitType?: string,\n    traitValue?: string,\n  ): Promise<BuildOfferResponse> {\n    if (traitType || traitValue) {\n      if (!traitType || !traitValue) {\n        throw new Error(\n          \"Both traitType and traitValue must be defined if one is defined.\",\n        );\n      }\n    }\n    const payload = getBuildCollectionOfferPayload(\n      offererAddress,\n      quantity,\n      collectionSlug,\n      offerProtectionEnabled,\n      traitType,\n      traitValue,\n    );\n    const response = await this.post<BuildOfferResponse>(\n      getBuildOfferPath(),\n      payload,\n    );\n    return response;\n  }\n\n  /**\n   * Get a list collection offers for a given slug.\n   * @param slug The slug (identifier) of the collection to list offers for\n   * @returns The {@link ListCollectionOffersResponse} returned by the API.\n   */\n  public async getCollectionOffers(\n    slug: string,\n  ): Promise<ListCollectionOffersResponse | null> {\n    return await this.get<ListCollectionOffersResponse>(\n      getCollectionOffersPath(slug),\n    );\n  }\n\n  /**\n   * Post a collection offer to OpenSea.\n   * @param order The collection offer to post.\n   * @param slug The slug (identifier) of the collection to post the offer for.\n   * @param traitType If defined, the trait name to create the collection offer for.\n   * @param traitValue If defined, the trait value to create the collection offer for.\n   * @returns The {@link Offer} returned to the API.\n   */\n  public async postCollectionOffer(\n    order: ProtocolData,\n    slug: string,\n    traitType?: string,\n    traitValue?: string,\n  ): Promise<CollectionOffer | null> {\n    const payload = getPostCollectionOfferPayload(\n      slug,\n      order,\n      traitType,\n      traitValue,\n    );\n    return await this.post<CollectionOffer>(\n      getPostCollectionOfferPath(),\n      payload,\n    );\n  }\n\n  /**\n   * Fetch multiple NFTs for a collection.\n   * @param slug The slug (identifier) of the collection\n   * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n   * @param next Cursor to retrieve the next page of NFTs\n   * @returns The {@link ListNFTsResponse} returned by the API.\n   */\n  public async getNFTsByCollection(\n    slug: string,\n    limit: number | undefined = undefined,\n    next: string | undefined = undefined,\n  ): Promise<ListNFTsResponse> {\n    const response = await this.get<ListNFTsResponse>(\n      getListNFTsByCollectionPath(slug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Fetch multiple NFTs for a contract.\n   * @param address The NFT's contract address.\n   * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n   * @param next Cursor to retrieve the next page of NFTs.\n   * @param chain The NFT's chain.\n   * @returns The {@link ListNFTsResponse} returned by the API.\n   */\n  public async getNFTsByContract(\n    address: string,\n    limit: number | undefined = undefined,\n    next: string | undefined = undefined,\n    chain: Chain = this.chain,\n  ): Promise<ListNFTsResponse> {\n    const response = await this.get<ListNFTsResponse>(\n      getListNFTsByContractPath(chain, address),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Fetch NFTs owned by an account.\n   * @param address The address of the account\n   * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n   * @param next Cursor to retrieve the next page of NFTs\n   * @param chain The chain to query. Defaults to the chain set in the constructor.\n   * @returns The {@link ListNFTsResponse} returned by the API.\n   */\n  public async getNFTsByAccount(\n    address: string,\n    limit: number | undefined = undefined,\n    next: string | undefined = undefined,\n    chain = this.chain,\n  ): Promise<ListNFTsResponse> {\n    const response = await this.get<ListNFTsResponse>(\n      getListNFTsByAccountPath(chain, address),\n      {\n        limit,\n        next,\n      },\n    );\n\n    return response;\n  }\n\n  /**\n   * Fetch metadata, traits, ownership information, and rarity for a single NFT.\n   * @param address The NFT's contract address.\n   * @param identifier the identifier of the NFT (i.e. Token ID)\n   * @param chain The NFT's chain.\n   * @returns The {@link GetNFTResponse} returned by the API.\n   */\n  public async getNFT(\n    address: string,\n    identifier: string,\n    chain = this.chain,\n  ): Promise<GetNFTResponse> {\n    const response = await this.get<GetNFTResponse>(\n      getNFTPath(chain, address, identifier),\n    );\n    return response;\n  }\n\n  /**\n   * Fetch an OpenSea collection.\n   * @param slug The slug (identifier) of the collection.\n   * @returns The {@link OpenSeaCollection} returned by the API.\n   */\n  public async getCollection(slug: string): Promise<OpenSeaCollection> {\n    const path = getCollectionPath(slug);\n    const response = await this.get<GetCollectionResponse>(path);\n    return collectionFromJSON(response);\n  }\n\n  /**\n   * Fetch a list of OpenSea collections.\n   * @param orderBy The order to return the collections in. Default: CREATED_DATE\n   * @param chain The chain to filter the collections on. Default: all chains\n   * @param creatorUsername The creator's OpenSea username to filter the collections on.\n   * @param includeHidden If hidden collections should be returned. Default: false\n   * @param limit The limit of collections to return.\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns List of {@link OpenSeaCollection} returned by the API.\n   */\n  public async getCollections(\n    orderBy: CollectionOrderByOption = CollectionOrderByOption.CREATED_DATE,\n    chain?: Chain,\n    creatorUsername?: string,\n    includeHidden: boolean = false,\n    limit?: number,\n    next?: string,\n  ): Promise<GetCollectionsResponse> {\n    const path = getCollectionsPath();\n    const args: GetCollectionsArgs = {\n      order_by: orderBy,\n      chain,\n      creator_username: creatorUsername,\n      include_hidden: includeHidden,\n      limit,\n      next,\n    };\n    const response = await this.get<GetCollectionsResponse>(path, args);\n    response.collections = response.collections.map((collection) =>\n      collectionFromJSON(collection),\n    );\n    return response;\n  }\n\n  /**\n   * Fetch stats for an OpenSea collection.\n   * @param slug The slug (identifier) of the collection.\n   * @returns The {@link OpenSeaCollection} returned by the API.\n   */\n  public async getCollectionStats(\n    slug: string,\n  ): Promise<OpenSeaCollectionStats> {\n    const path = getCollectionStatsPath(slug);\n    const response = await this.get<OpenSeaCollectionStats>(path);\n    return response as OpenSeaCollectionStats;\n  }\n\n  /**\n   * Fetch a payment token.\n   * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link OpenSeaPaymentToken} returned by the API.\n   */\n  public async getPaymentToken(\n    address: string,\n    chain = this.chain,\n  ): Promise<OpenSeaPaymentToken> {\n    const json = await this.get<OpenSeaPaymentToken>(\n      getPaymentTokenPath(chain, address),\n    );\n    return paymentTokenFromJSON(json);\n  }\n\n  /**\n   * Fetch account for an address.\n   * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetAccountResponse} returned by the API.\n   */\n  public async getAccount(address: string): Promise<OpenSeaAccount> {\n    const json = await this.get<OpenSeaAccount>(getAccountPath(address));\n    return accountFromJSON(json);\n  }\n\n  /**\n   * Force refresh the metadata for an NFT.\n   * @param address The address of the NFT's contract.\n   * @param identifier The identifier of the NFT.\n   * @param chain The chain where the NFT is located.\n   * @returns The response from the API.\n   */\n  public async refreshNFTMetadata(\n    address: string,\n    identifier: string,\n    chain: Chain = this.chain,\n  ): Promise<Response> {\n    const response = await this.post<Response>(\n      getRefreshMetadataPath(chain, address, identifier),\n      {},\n    );\n\n    return response;\n  }\n\n  /**\n   * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.\n   * Protocol and Chain are required to prevent hash collisions.\n   * Please note cancellation is only assured if a fulfillment signature was not vended prior to cancellation.\n   * @param protocolAddress The Seaport address for the order.\n   * @param orderHash The order hash, or external identifier, of the order.\n   * @param chain The chain where the order is located.\n   * @param offererSignature An EIP-712 signature from the offerer of the order.\n   *                         If this is not provided, the user associated with the API Key will be checked instead.\n   *                         The signature must be a EIP-712 signature consisting of the order's Seaport contract's\n   *                         name, version, address, and chain. The struct to sign is `OrderHash` containing a\n   *                         single bytes32 field.\n   * @returns The response from the API.\n   */\n  public async offchainCancelOrder(\n    protocolAddress: string,\n    orderHash: string,\n    chain: Chain = this.chain,\n    offererSignature?: string,\n  ): Promise<CancelOrderResponse> {\n    const response = await this.post<CancelOrderResponse>(\n      getCancelOrderPath(chain, protocolAddress, orderHash),\n      { offererSignature },\n    );\n    return response;\n  }\n\n  /**\n   * Generic fetch method for any API endpoint\n   * @param apiPath Path to URL endpoint under API\n   * @param query URL query params. Will be used to create a URLSearchParams object.\n   * @returns @typeParam T The response from the API.\n   */\n  public async get<T>(apiPath: string, query: object = {}): Promise<T> {\n    const qs = this.objectToSearchParams(query);\n    const url = `${this.apiBaseUrl}${apiPath}?${qs}`;\n    return await this._fetch(url);\n  }\n\n  /**\n   * Generic post method for any API endpoint.\n   * @param apiPath Path to URL endpoint under API\n   * @param body Data to send.\n   * @param opts ethers ConnectionInfo, similar to Fetch API.\n   * @returns @typeParam T The response from the API.\n   */\n  public async post<T>(\n    apiPath: string,\n    body?: object,\n    opts?: object,\n  ): Promise<T> {\n    const url = `${this.apiBaseUrl}${apiPath}`;\n    return await this._fetch(url, opts, body);\n  }\n\n  private objectToSearchParams(params: object = {}) {\n    const urlSearchParams = new URLSearchParams();\n\n    Object.entries(params).forEach(([key, value]) => {\n      if (value && Array.isArray(value)) {\n        value.forEach((item) => item && urlSearchParams.append(key, item));\n      } else if (value) {\n        urlSearchParams.append(key, value);\n      }\n    });\n\n    return urlSearchParams.toString();\n  }\n\n  /**\n   * Get from an API Endpoint, sending auth token in headers\n   * @param opts ethers ConnectionInfo, similar to Fetch API\n   * @param body Optional body to send. If set, will POST, otherwise GET\n   */\n  private async _fetch(url: string, headers?: object, body?: object) {\n    // Create the fetch request\n    const req = new ethers.FetchRequest(url);\n\n    // Set the headers\n    headers = {\n      \"x-app-id\": \"opensea-js\",\n      ...(this.apiKey ? { \"X-API-KEY\": this.apiKey } : {}),\n      ...headers,\n    };\n    for (const [key, value] of Object.entries(headers)) {\n      req.setHeader(key, value);\n    }\n\n    // Set the body if provided\n    if (body) {\n      req.body = body;\n    }\n\n    // Set the throttle params\n    // - Should be able to replace this retryFunc with `setThrottleParams({ slotInterval: 1000 })`\n    //   when this bug is fixed in ethers: https://github.com/ethers-io/ethers.js/issues/4663\n    req.retryFunc = async (_req, resp, attempt) => {\n      this.logger(\n        `Fetch attempt ${attempt} failed with status ${resp.statusCode}`,\n      );\n      // Wait 1s between tries\n      await stall(1000);\n      return true;\n    };\n\n    this.logger(\n      `Sending request: ${url} ${JSON.stringify({\n        request: req,\n        headers: req.headers,\n      })}`,\n    );\n\n    const response = await req.send();\n    if (!response.ok()) {\n      // If an errors array is returned, throw with the error messages.\n      const errors = response.bodyJson?.errors;\n      if (errors?.length > 0) {\n        let errorMessage = errors.join(\", \");\n        if (errorMessage === \"[object Object]\") {\n          errorMessage = JSON.stringify(errors);\n        }\n        throw new Error(`Server Error: ${errorMessage}`);\n      } else {\n        // Otherwise, let ethers throw a SERVER_ERROR since it will include\n        // more context about the request and response.\n        response.assertOk();\n      }\n    }\n    return response.bodyJson;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3d37a65e487d5b7040697e71ea4c6e0f43d35b18"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1r76ud9kcq=function(){return actualCoverage;};}return actualCoverage;}cov_1r76ud9kcq();cov_1r76ud9kcq().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1r76ud9kcq().s[1]++;exports.OpenSeaAPI=void 0;const ethers_1=(cov_1r76ud9kcq().s[2]++,require("ethers"));const apiPaths_1=(cov_1r76ud9kcq().s[3]++,require("./apiPaths"));const types_1=(cov_1r76ud9kcq().s[4]++,require("./types"));const constants_1=(cov_1r76ud9kcq().s[5]++,require("../constants"));const utils_1=(cov_1r76ud9kcq().s[6]++,require("../orders/utils"));const types_2=(cov_1r76ud9kcq().s[7]++,require("../types"));const utils_2=(cov_1r76ud9kcq().s[8]++,require("../utils/utils"));function stall(duration){cov_1r76ud9kcq().f[0]++;cov_1r76ud9kcq().s[9]++;return new Promise(resolve=>{cov_1r76ud9kcq().f[1]++;cov_1r76ud9kcq().s[10]++;setTimeout(()=>{cov_1r76ud9kcq().f[2]++;cov_1r76ud9kcq().s[11]++;resolve();},duration);});}/**
 * The API class for the OpenSea SDK.
 * @category Main Classes
 */class OpenSeaAPI{/**
     * Create an instance of the OpenSeaAPI
     * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, Chain name, and base URL
     * @param logger Optional function for logging debug strings before and after requests are made. Defaults to no logging
     */constructor(config,logger){cov_1r76ud9kcq().f[3]++;cov_1r76ud9kcq().s[12]++;/**
         * Default size to use for fetching orders
         */this.pageSize=20;cov_1r76ud9kcq().s[13]++;this.apiKey=config.apiKey;cov_1r76ud9kcq().s[14]++;this.chain=(cov_1r76ud9kcq().b[0][0]++,config.chain)??(cov_1r76ud9kcq().b[0][1]++,types_2.Chain.Mainnet);cov_1r76ud9kcq().s[15]++;if(config.apiBaseUrl){cov_1r76ud9kcq().b[1][0]++;cov_1r76ud9kcq().s[16]++;this.apiBaseUrl=config.apiBaseUrl;}else{cov_1r76ud9kcq().b[1][1]++;cov_1r76ud9kcq().s[17]++;this.apiBaseUrl=(0,utils_2.isTestChain)(this.chain)?(cov_1r76ud9kcq().b[2][0]++,constants_1.API_BASE_TESTNET):(cov_1r76ud9kcq().b[2][1]++,constants_1.API_BASE_MAINNET);}// Debugging: default to nothing
cov_1r76ud9kcq().s[18]++;this.logger=(cov_1r76ud9kcq().b[3][0]++,logger)??(cov_1r76ud9kcq().b[3][1]++,arg=>{cov_1r76ud9kcq().f[4]++;cov_1r76ud9kcq().s[19]++;return arg;});}/**
     * Gets an order from API based on query options.
     * @param options
     * @param options.side The side of the order (buy or sell
     * @param options.protocol The protocol, typically seaport, to query orders for
     * @param options.orderDirection The direction to sort the orders
     * @param options.orderBy The field to sort the orders by
     * @param options.limit The number of orders to retrieve
     * @param options.maker Filter by the wallet address of the order maker
     * @param options.taker Filter by  wallet address of the order taker
     * @param options.asset_contract_address Address of the NFT's contract
     * @param options.token_ids String array of token IDs to filter by.
     * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds
     * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds
     * @returns The first {@link OrderV2} returned by the API
     *
     * @throws An error if there are no matching orders.
     */async getOrder({side,protocol=(cov_1r76ud9kcq().b[4][0]++,"seaport"),orderDirection=(cov_1r76ud9kcq().b[5][0]++,"desc"),orderBy=(cov_1r76ud9kcq().b[6][0]++,"created_date"),...restOptions}){cov_1r76ud9kcq().f[5]++;const{orders}=(cov_1r76ud9kcq().s[20]++,await this.get((0,apiPaths_1.getOrdersAPIPath)(this.chain,protocol,side),(0,utils_1.serializeOrdersQueryOptions)({limit:1,orderBy,orderDirection,...restOptions})));cov_1r76ud9kcq().s[21]++;if(orders.length===0){cov_1r76ud9kcq().b[7][0]++;cov_1r76ud9kcq().s[22]++;throw new Error("Not found: no matching order found");}else{cov_1r76ud9kcq().b[7][1]++;}cov_1r76ud9kcq().s[23]++;return(0,utils_1.deserializeOrder)(orders[0]);}/**
     * Gets a list of orders from API based on query options.
     * @param options
     * @param options.side The side of the order (buy or sell)
     * @param options.protocol The protocol, typically seaport, to query orders for
     * @param options.orderDirection The direction to sort the orders
     * @param options.orderBy The field to sort the orders by
     * @param options.limit The number of orders to retrieve
     * @param options.maker Filter by the wallet address of the order maker
     * @param options.taker Filter by  wallet address of the order taker
     * @param options.asset_contract_address Address of the NFT's contract
     * @param options.token_ids String array of token IDs to filter by.
     * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds
     * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds
     * @returns The {@link GetOrdersResponse} returned by the API.
     */async getOrders({side,protocol=(cov_1r76ud9kcq().b[8][0]++,"seaport"),orderDirection=(cov_1r76ud9kcq().b[9][0]++,"desc"),orderBy=(cov_1r76ud9kcq().b[10][0]++,"created_date"),...restOptions}){cov_1r76ud9kcq().f[6]++;const response=(cov_1r76ud9kcq().s[24]++,await this.get((0,apiPaths_1.getOrdersAPIPath)(this.chain,protocol,side),(0,utils_1.serializeOrdersQueryOptions)({limit:this.pageSize,orderBy,orderDirection,...restOptions})));cov_1r76ud9kcq().s[25]++;return{...response,orders:response.orders.map(utils_1.deserializeOrder)};}/**
     * Gets all offers for a given collection.
     * @param collectionSlug The slug of the collection.
     * @param limit The number of offers to return. Must be between 1 and 100. Default: 100
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetOffersResponse} returned by the API.
     */async getAllOffers(collectionSlug,limit,next){cov_1r76ud9kcq().f[7]++;const response=(cov_1r76ud9kcq().s[26]++,await this.get((0,apiPaths_1.getAllOffersAPIPath)(collectionSlug),{limit,next}));cov_1r76ud9kcq().s[27]++;return response;}/**
     * Gets all listings for a given collection.
     * @param collectionSlug The slug of the collection.
     * @param limit The number of listings to return. Must be between 1 and 100. Default: 100
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetListingsResponse} returned by the API.
     */async getAllListings(collectionSlug,limit,next){cov_1r76ud9kcq().f[8]++;const response=(cov_1r76ud9kcq().s[28]++,await this.get((0,apiPaths_1.getAllListingsAPIPath)(collectionSlug),{limit,next}));cov_1r76ud9kcq().s[29]++;return response;}/**
     * Gets the best offer for a given token.
     * @param collectionSlug The slug of the collection.
     * @param tokenId The token identifier.
     * @returns The {@link GetBestOfferResponse} returned by the API.
     */async getBestOffer(collectionSlug,tokenId){cov_1r76ud9kcq().f[9]++;const response=(cov_1r76ud9kcq().s[30]++,await this.get((0,apiPaths_1.getBestOfferAPIPath)(collectionSlug,tokenId)));cov_1r76ud9kcq().s[31]++;return response;}/**
     * Gets the best listing for a given token.
     * @param collectionSlug The slug of the collection.
     * @param tokenId The token identifier.
     * @returns The {@link GetBestListingResponse} returned by the API.
     */async getBestListing(collectionSlug,tokenId){cov_1r76ud9kcq().f[10]++;const response=(cov_1r76ud9kcq().s[32]++,await this.get((0,apiPaths_1.getBestListingAPIPath)(collectionSlug,tokenId)));cov_1r76ud9kcq().s[33]++;return response;}/**
     * Gets the best listings for a given collection.
     * @param collectionSlug The slug of the collection.
     * @param limit The number of listings to return. Must be between 1 and 100. Default: 100
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetListingsResponse} returned by the API.
     */async getBestListings(collectionSlug,limit,next){cov_1r76ud9kcq().f[11]++;const response=(cov_1r76ud9kcq().s[34]++,await this.get((0,apiPaths_1.getBestListingsAPIPath)(collectionSlug),{limit,next}));cov_1r76ud9kcq().s[35]++;return response;}/**
     * Generate the data needed to fulfill a listing or an offer onchain.
     * @param fulfillerAddress The wallet address which will be used to fulfill the order
     * @param orderHash The hash of the order to fulfill
     * @param protocolAddress The address of the seaport contract
     * @side The side of the order (buy or sell)
     * @returns The {@link FulfillmentDataResponse}
     */async generateFulfillmentData(fulfillerAddress,orderHash,protocolAddress,side){cov_1r76ud9kcq().f[12]++;let payload=(cov_1r76ud9kcq().s[36]++,null);cov_1r76ud9kcq().s[37]++;if(side===types_2.OrderSide.ASK){cov_1r76ud9kcq().b[11][0]++;cov_1r76ud9kcq().s[38]++;payload=(0,utils_1.getFulfillListingPayload)(fulfillerAddress,orderHash,protocolAddress,this.chain);}else{cov_1r76ud9kcq().b[11][1]++;cov_1r76ud9kcq().s[39]++;payload=(0,utils_1.getFulfillOfferPayload)(fulfillerAddress,orderHash,protocolAddress,this.chain);}const response=(cov_1r76ud9kcq().s[40]++,await this.post((0,utils_1.getFulfillmentDataPath)(side),payload));cov_1r76ud9kcq().s[41]++;return response;}/**
     * Post an order to OpenSea.
     * @param order The order to post
     * @param apiOptions
     * @param apiOptions.protocol The protocol, typically seaport, to post the order to.
     * @param apiOptions.side The side of the order (buy or sell).
     * @param apiOptions.protocolAddress The address of the seaport contract.
     * @param options
     * @returns The {@link OrderV2} posted to the API.
     */async postOrder(order,apiOptions){cov_1r76ud9kcq().f[13]++;// TODO: Validate apiOptions. Avoid API calls that will definitely fail
const{protocol=(cov_1r76ud9kcq().b[12][0]++,"seaport"),side,protocolAddress}=(cov_1r76ud9kcq().s[42]++,apiOptions);const response=(cov_1r76ud9kcq().s[43]++,await this.post((0,apiPaths_1.getOrdersAPIPath)(this.chain,protocol,side),{...order,protocol_address:protocolAddress}));cov_1r76ud9kcq().s[44]++;return(0,utils_1.deserializeOrder)(response.order);}/**
     * Build a OpenSea collection offer.
     * @param offererAddress The wallet address which is creating the offer.
     * @param quantity The number of NFTs requested in the offer.
     * @param collectionSlug The slug (identifier) of the collection to build the offer for.
     * @param offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.
     * @param traitType If defined, the trait name to create the collection offer for.
     * @param traitValue If defined, the trait value to create the collection offer for.
     * @returns The {@link BuildOfferResponse} returned by the API.
     */async buildOffer(offererAddress,quantity,collectionSlug,offerProtectionEnabled=(cov_1r76ud9kcq().b[13][0]++,true),traitType,traitValue){cov_1r76ud9kcq().f[14]++;cov_1r76ud9kcq().s[45]++;if((cov_1r76ud9kcq().b[15][0]++,traitType)||(cov_1r76ud9kcq().b[15][1]++,traitValue)){cov_1r76ud9kcq().b[14][0]++;cov_1r76ud9kcq().s[46]++;if((cov_1r76ud9kcq().b[17][0]++,!traitType)||(cov_1r76ud9kcq().b[17][1]++,!traitValue)){cov_1r76ud9kcq().b[16][0]++;cov_1r76ud9kcq().s[47]++;throw new Error("Both traitType and traitValue must be defined if one is defined.");}else{cov_1r76ud9kcq().b[16][1]++;}}else{cov_1r76ud9kcq().b[14][1]++;}const payload=(cov_1r76ud9kcq().s[48]++,(0,utils_1.getBuildCollectionOfferPayload)(offererAddress,quantity,collectionSlug,offerProtectionEnabled,traitType,traitValue));const response=(cov_1r76ud9kcq().s[49]++,await this.post((0,apiPaths_1.getBuildOfferPath)(),payload));cov_1r76ud9kcq().s[50]++;return response;}/**
     * Get a list collection offers for a given slug.
     * @param slug The slug (identifier) of the collection to list offers for
     * @returns The {@link ListCollectionOffersResponse} returned by the API.
     */async getCollectionOffers(slug){cov_1r76ud9kcq().f[15]++;cov_1r76ud9kcq().s[51]++;return await this.get((0,apiPaths_1.getCollectionOffersPath)(slug));}/**
     * Post a collection offer to OpenSea.
     * @param order The collection offer to post.
     * @param slug The slug (identifier) of the collection to post the offer for.
     * @param traitType If defined, the trait name to create the collection offer for.
     * @param traitValue If defined, the trait value to create the collection offer for.
     * @returns The {@link Offer} returned to the API.
     */async postCollectionOffer(order,slug,traitType,traitValue){cov_1r76ud9kcq().f[16]++;const payload=(cov_1r76ud9kcq().s[52]++,(0,utils_1.getPostCollectionOfferPayload)(slug,order,traitType,traitValue));cov_1r76ud9kcq().s[53]++;return await this.post((0,apiPaths_1.getPostCollectionOfferPath)(),payload);}/**
     * Fetch multiple NFTs for a collection.
     * @param slug The slug (identifier) of the collection
     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.
     * @param next Cursor to retrieve the next page of NFTs
     * @returns The {@link ListNFTsResponse} returned by the API.
     */async getNFTsByCollection(slug,limit=(cov_1r76ud9kcq().b[18][0]++,undefined),next=(cov_1r76ud9kcq().b[19][0]++,undefined)){cov_1r76ud9kcq().f[17]++;const response=(cov_1r76ud9kcq().s[54]++,await this.get((0,apiPaths_1.getListNFTsByCollectionPath)(slug),{limit,next}));cov_1r76ud9kcq().s[55]++;return response;}/**
     * Fetch multiple NFTs for a contract.
     * @param address The NFT's contract address.
     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.
     * @param next Cursor to retrieve the next page of NFTs.
     * @param chain The NFT's chain.
     * @returns The {@link ListNFTsResponse} returned by the API.
     */async getNFTsByContract(address,limit=(cov_1r76ud9kcq().b[20][0]++,undefined),next=(cov_1r76ud9kcq().b[21][0]++,undefined),chain=(cov_1r76ud9kcq().b[22][0]++,this.chain)){cov_1r76ud9kcq().f[18]++;const response=(cov_1r76ud9kcq().s[56]++,await this.get((0,apiPaths_1.getListNFTsByContractPath)(chain,address),{limit,next}));cov_1r76ud9kcq().s[57]++;return response;}/**
     * Fetch NFTs owned by an account.
     * @param address The address of the account
     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.
     * @param next Cursor to retrieve the next page of NFTs
     * @param chain The chain to query. Defaults to the chain set in the constructor.
     * @returns The {@link ListNFTsResponse} returned by the API.
     */async getNFTsByAccount(address,limit=(cov_1r76ud9kcq().b[23][0]++,undefined),next=(cov_1r76ud9kcq().b[24][0]++,undefined),chain=(cov_1r76ud9kcq().b[25][0]++,this.chain)){cov_1r76ud9kcq().f[19]++;const response=(cov_1r76ud9kcq().s[58]++,await this.get((0,apiPaths_1.getListNFTsByAccountPath)(chain,address),{limit,next}));cov_1r76ud9kcq().s[59]++;return response;}/**
     * Fetch metadata, traits, ownership information, and rarity for a single NFT.
     * @param address The NFT's contract address.
     * @param identifier the identifier of the NFT (i.e. Token ID)
     * @param chain The NFT's chain.
     * @returns The {@link GetNFTResponse} returned by the API.
     */async getNFT(address,identifier,chain=(cov_1r76ud9kcq().b[26][0]++,this.chain)){cov_1r76ud9kcq().f[20]++;const response=(cov_1r76ud9kcq().s[60]++,await this.get((0,apiPaths_1.getNFTPath)(chain,address,identifier)));cov_1r76ud9kcq().s[61]++;return response;}/**
     * Fetch an OpenSea collection.
     * @param slug The slug (identifier) of the collection.
     * @returns The {@link OpenSeaCollection} returned by the API.
     */async getCollection(slug){cov_1r76ud9kcq().f[21]++;const path=(cov_1r76ud9kcq().s[62]++,(0,apiPaths_1.getCollectionPath)(slug));const response=(cov_1r76ud9kcq().s[63]++,await this.get(path));cov_1r76ud9kcq().s[64]++;return(0,utils_2.collectionFromJSON)(response);}/**
     * Fetch a list of OpenSea collections.
     * @param orderBy The order to return the collections in. Default: CREATED_DATE
     * @param chain The chain to filter the collections on. Default: all chains
     * @param creatorUsername The creator's OpenSea username to filter the collections on.
     * @param includeHidden If hidden collections should be returned. Default: false
     * @param limit The limit of collections to return.
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns List of {@link OpenSeaCollection} returned by the API.
     */async getCollections(orderBy=(cov_1r76ud9kcq().b[27][0]++,types_1.CollectionOrderByOption.CREATED_DATE),chain,creatorUsername,includeHidden=(cov_1r76ud9kcq().b[28][0]++,false),limit,next){cov_1r76ud9kcq().f[22]++;const path=(cov_1r76ud9kcq().s[65]++,(0,apiPaths_1.getCollectionsPath)());const args=(cov_1r76ud9kcq().s[66]++,{order_by:orderBy,chain,creator_username:creatorUsername,include_hidden:includeHidden,limit,next});const response=(cov_1r76ud9kcq().s[67]++,await this.get(path,args));cov_1r76ud9kcq().s[68]++;response.collections=response.collections.map(collection=>{cov_1r76ud9kcq().f[23]++;cov_1r76ud9kcq().s[69]++;return(0,utils_2.collectionFromJSON)(collection);});cov_1r76ud9kcq().s[70]++;return response;}/**
     * Fetch stats for an OpenSea collection.
     * @param slug The slug (identifier) of the collection.
     * @returns The {@link OpenSeaCollection} returned by the API.
     */async getCollectionStats(slug){cov_1r76ud9kcq().f[24]++;const path=(cov_1r76ud9kcq().s[71]++,(0,apiPaths_1.getCollectionStatsPath)(slug));const response=(cov_1r76ud9kcq().s[72]++,await this.get(path));cov_1r76ud9kcq().s[73]++;return response;}/**
     * Fetch a payment token.
     * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link OpenSeaPaymentToken} returned by the API.
     */async getPaymentToken(address,chain=(cov_1r76ud9kcq().b[29][0]++,this.chain)){cov_1r76ud9kcq().f[25]++;const json=(cov_1r76ud9kcq().s[74]++,await this.get((0,apiPaths_1.getPaymentTokenPath)(chain,address)));cov_1r76ud9kcq().s[75]++;return(0,utils_2.paymentTokenFromJSON)(json);}/**
     * Fetch account for an address.
     * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetAccountResponse} returned by the API.
     */async getAccount(address){cov_1r76ud9kcq().f[26]++;const json=(cov_1r76ud9kcq().s[76]++,await this.get((0,apiPaths_1.getAccountPath)(address)));cov_1r76ud9kcq().s[77]++;return(0,utils_2.accountFromJSON)(json);}/**
     * Force refresh the metadata for an NFT.
     * @param address The address of the NFT's contract.
     * @param identifier The identifier of the NFT.
     * @param chain The chain where the NFT is located.
     * @returns The response from the API.
     */async refreshNFTMetadata(address,identifier,chain=(cov_1r76ud9kcq().b[30][0]++,this.chain)){cov_1r76ud9kcq().f[27]++;const response=(cov_1r76ud9kcq().s[78]++,await this.post((0,apiPaths_1.getRefreshMetadataPath)(chain,address,identifier),{}));cov_1r76ud9kcq().s[79]++;return response;}/**
     * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.
     * Protocol and Chain are required to prevent hash collisions.
     * Please note cancellation is only assured if a fulfillment signature was not vended prior to cancellation.
     * @param protocolAddress The Seaport address for the order.
     * @param orderHash The order hash, or external identifier, of the order.
     * @param chain The chain where the order is located.
     * @param offererSignature An EIP-712 signature from the offerer of the order.
     *                         If this is not provided, the user associated with the API Key will be checked instead.
     *                         The signature must be a EIP-712 signature consisting of the order's Seaport contract's
     *                         name, version, address, and chain. The struct to sign is `OrderHash` containing a
     *                         single bytes32 field.
     * @returns The response from the API.
     */async offchainCancelOrder(protocolAddress,orderHash,chain=(cov_1r76ud9kcq().b[31][0]++,this.chain),offererSignature){cov_1r76ud9kcq().f[28]++;const response=(cov_1r76ud9kcq().s[80]++,await this.post((0,apiPaths_1.getCancelOrderPath)(chain,protocolAddress,orderHash),{offererSignature}));cov_1r76ud9kcq().s[81]++;return response;}/**
     * Generic fetch method for any API endpoint
     * @param apiPath Path to URL endpoint under API
     * @param query URL query params. Will be used to create a URLSearchParams object.
     * @returns @typeParam T The response from the API.
     */async get(apiPath,query=(cov_1r76ud9kcq().b[32][0]++,{})){cov_1r76ud9kcq().f[29]++;const qs=(cov_1r76ud9kcq().s[82]++,this.objectToSearchParams(query));const url=(cov_1r76ud9kcq().s[83]++,`${this.apiBaseUrl}${apiPath}?${qs}`);cov_1r76ud9kcq().s[84]++;return await this._fetch(url);}/**
     * Generic post method for any API endpoint.
     * @param apiPath Path to URL endpoint under API
     * @param body Data to send.
     * @param opts ethers ConnectionInfo, similar to Fetch API.
     * @returns @typeParam T The response from the API.
     */async post(apiPath,body,opts){cov_1r76ud9kcq().f[30]++;const url=(cov_1r76ud9kcq().s[85]++,`${this.apiBaseUrl}${apiPath}`);cov_1r76ud9kcq().s[86]++;return await this._fetch(url,opts,body);}objectToSearchParams(params=(cov_1r76ud9kcq().b[33][0]++,{})){cov_1r76ud9kcq().f[31]++;const urlSearchParams=(cov_1r76ud9kcq().s[87]++,new URLSearchParams());cov_1r76ud9kcq().s[88]++;Object.entries(params).forEach(([key,value])=>{cov_1r76ud9kcq().f[32]++;cov_1r76ud9kcq().s[89]++;if((cov_1r76ud9kcq().b[35][0]++,value)&&(cov_1r76ud9kcq().b[35][1]++,Array.isArray(value))){cov_1r76ud9kcq().b[34][0]++;cov_1r76ud9kcq().s[90]++;value.forEach(item=>{cov_1r76ud9kcq().f[33]++;cov_1r76ud9kcq().s[91]++;return(cov_1r76ud9kcq().b[36][0]++,item)&&(cov_1r76ud9kcq().b[36][1]++,urlSearchParams.append(key,item));});}else{cov_1r76ud9kcq().b[34][1]++;cov_1r76ud9kcq().s[92]++;if(value){cov_1r76ud9kcq().b[37][0]++;cov_1r76ud9kcq().s[93]++;urlSearchParams.append(key,value);}else{cov_1r76ud9kcq().b[37][1]++;}}});cov_1r76ud9kcq().s[94]++;return urlSearchParams.toString();}/**
     * Get from an API Endpoint, sending auth token in headers
     * @param opts ethers ConnectionInfo, similar to Fetch API
     * @param body Optional body to send. If set, will POST, otherwise GET
     */async _fetch(url,headers,body){cov_1r76ud9kcq().f[34]++;// Create the fetch request
const req=(cov_1r76ud9kcq().s[95]++,new ethers_1.ethers.FetchRequest(url));// Set the headers
cov_1r76ud9kcq().s[96]++;headers={"x-app-id":"opensea-js",...(this.apiKey?(cov_1r76ud9kcq().b[38][0]++,{"X-API-KEY":this.apiKey}):(cov_1r76ud9kcq().b[38][1]++,{})),...headers};cov_1r76ud9kcq().s[97]++;for(const[key,value]of Object.entries(headers)){cov_1r76ud9kcq().s[98]++;req.setHeader(key,value);}// Set the body if provided
cov_1r76ud9kcq().s[99]++;if(body){cov_1r76ud9kcq().b[39][0]++;cov_1r76ud9kcq().s[100]++;req.body=body;}else{cov_1r76ud9kcq().b[39][1]++;}// Set the throttle params
// - Should be able to replace this retryFunc with `setThrottleParams({ slotInterval: 1000 })`
//   when this bug is fixed in ethers: https://github.com/ethers-io/ethers.js/issues/4663
cov_1r76ud9kcq().s[101]++;req.retryFunc=async(_req,resp,attempt)=>{cov_1r76ud9kcq().f[35]++;cov_1r76ud9kcq().s[102]++;this.logger(`Fetch attempt ${attempt} failed with status ${resp.statusCode}`);// Wait 1s between tries
cov_1r76ud9kcq().s[103]++;await stall(1000);cov_1r76ud9kcq().s[104]++;return true;};cov_1r76ud9kcq().s[105]++;this.logger(`Sending request: ${url} ${JSON.stringify({request:req,headers:req.headers})}`);const response=(cov_1r76ud9kcq().s[106]++,await req.send());cov_1r76ud9kcq().s[107]++;if(!response.ok()){cov_1r76ud9kcq().b[40][0]++;// If an errors array is returned, throw with the error messages.
const errors=(cov_1r76ud9kcq().s[108]++,response.bodyJson?.errors);cov_1r76ud9kcq().s[109]++;if(errors?.length>0){cov_1r76ud9kcq().b[41][0]++;let errorMessage=(cov_1r76ud9kcq().s[110]++,errors.join(", "));cov_1r76ud9kcq().s[111]++;if(errorMessage==="[object Object]"){cov_1r76ud9kcq().b[42][0]++;cov_1r76ud9kcq().s[112]++;errorMessage=JSON.stringify(errors);}else{cov_1r76ud9kcq().b[42][1]++;}cov_1r76ud9kcq().s[113]++;throw new Error(`Server Error: ${errorMessage}`);}else{cov_1r76ud9kcq().b[41][1]++;cov_1r76ud9kcq().s[114]++;// Otherwise, let ethers throw a SERVER_ERROR since it will include
// more context about the request and response.
response.assertOk();}}else{cov_1r76ud9kcq().b[40][1]++;}cov_1r76ud9kcq().s[115]++;return response.bodyJson;}}cov_1r76ud9kcq().s[116]++;exports.OpenSeaAPI=OpenSeaAPI;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXI3NnVkOWtjcSIsImFjdHVhbENvdmVyYWdlIiwicyIsImV0aGVyc18xIiwicmVxdWlyZSIsImFwaVBhdGhzXzEiLCJ0eXBlc18xIiwiY29uc3RhbnRzXzEiLCJ1dGlsc18xIiwidHlwZXNfMiIsInV0aWxzXzIiLCJzdGFsbCIsImR1cmF0aW9uIiwiZiIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIk9wZW5TZWFBUEkiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImxvZ2dlciIsInBhZ2VTaXplIiwiYXBpS2V5IiwiY2hhaW4iLCJiIiwiQ2hhaW4iLCJNYWlubmV0IiwiYXBpQmFzZVVybCIsImlzVGVzdENoYWluIiwiQVBJX0JBU0VfVEVTVE5FVCIsIkFQSV9CQVNFX01BSU5ORVQiLCJhcmciLCJnZXRPcmRlciIsInNpZGUiLCJwcm90b2NvbCIsIm9yZGVyRGlyZWN0aW9uIiwib3JkZXJCeSIsInJlc3RPcHRpb25zIiwib3JkZXJzIiwiZ2V0IiwiZ2V0T3JkZXJzQVBJUGF0aCIsInNlcmlhbGl6ZU9yZGVyc1F1ZXJ5T3B0aW9ucyIsImxpbWl0IiwibGVuZ3RoIiwiRXJyb3IiLCJkZXNlcmlhbGl6ZU9yZGVyIiwiZ2V0T3JkZXJzIiwicmVzcG9uc2UiLCJtYXAiLCJnZXRBbGxPZmZlcnMiLCJjb2xsZWN0aW9uU2x1ZyIsIm5leHQiLCJnZXRBbGxPZmZlcnNBUElQYXRoIiwiZ2V0QWxsTGlzdGluZ3MiLCJnZXRBbGxMaXN0aW5nc0FQSVBhdGgiLCJnZXRCZXN0T2ZmZXIiLCJ0b2tlbklkIiwiZ2V0QmVzdE9mZmVyQVBJUGF0aCIsImdldEJlc3RMaXN0aW5nIiwiZ2V0QmVzdExpc3RpbmdBUElQYXRoIiwiZ2V0QmVzdExpc3RpbmdzIiwiZ2V0QmVzdExpc3RpbmdzQVBJUGF0aCIsImdlbmVyYXRlRnVsZmlsbG1lbnREYXRhIiwiZnVsZmlsbGVyQWRkcmVzcyIsIm9yZGVySGFzaCIsInByb3RvY29sQWRkcmVzcyIsInBheWxvYWQiLCJPcmRlclNpZGUiLCJBU0siLCJnZXRGdWxmaWxsTGlzdGluZ1BheWxvYWQiLCJnZXRGdWxmaWxsT2ZmZXJQYXlsb2FkIiwicG9zdCIsImdldEZ1bGZpbGxtZW50RGF0YVBhdGgiLCJwb3N0T3JkZXIiLCJvcmRlciIsImFwaU9wdGlvbnMiLCJwcm90b2NvbF9hZGRyZXNzIiwiYnVpbGRPZmZlciIsIm9mZmVyZXJBZGRyZXNzIiwicXVhbnRpdHkiLCJvZmZlclByb3RlY3Rpb25FbmFibGVkIiwidHJhaXRUeXBlIiwidHJhaXRWYWx1ZSIsImdldEJ1aWxkQ29sbGVjdGlvbk9mZmVyUGF5bG9hZCIsImdldEJ1aWxkT2ZmZXJQYXRoIiwiZ2V0Q29sbGVjdGlvbk9mZmVycyIsInNsdWciLCJnZXRDb2xsZWN0aW9uT2ZmZXJzUGF0aCIsInBvc3RDb2xsZWN0aW9uT2ZmZXIiLCJnZXRQb3N0Q29sbGVjdGlvbk9mZmVyUGF5bG9hZCIsImdldFBvc3RDb2xsZWN0aW9uT2ZmZXJQYXRoIiwiZ2V0TkZUc0J5Q29sbGVjdGlvbiIsInVuZGVmaW5lZCIsImdldExpc3RORlRzQnlDb2xsZWN0aW9uUGF0aCIsImdldE5GVHNCeUNvbnRyYWN0IiwiYWRkcmVzcyIsImdldExpc3RORlRzQnlDb250cmFjdFBhdGgiLCJnZXRORlRzQnlBY2NvdW50IiwiZ2V0TGlzdE5GVHNCeUFjY291bnRQYXRoIiwiZ2V0TkZUIiwiaWRlbnRpZmllciIsImdldE5GVFBhdGgiLCJnZXRDb2xsZWN0aW9uIiwicGF0aCIsImdldENvbGxlY3Rpb25QYXRoIiwiY29sbGVjdGlvbkZyb21KU09OIiwiZ2V0Q29sbGVjdGlvbnMiLCJDb2xsZWN0aW9uT3JkZXJCeU9wdGlvbiIsIkNSRUFURURfREFURSIsImNyZWF0b3JVc2VybmFtZSIsImluY2x1ZGVIaWRkZW4iLCJnZXRDb2xsZWN0aW9uc1BhdGgiLCJhcmdzIiwib3JkZXJfYnkiLCJjcmVhdG9yX3VzZXJuYW1lIiwiaW5jbHVkZV9oaWRkZW4iLCJjb2xsZWN0aW9ucyIsImNvbGxlY3Rpb24iLCJnZXRDb2xsZWN0aW9uU3RhdHMiLCJnZXRDb2xsZWN0aW9uU3RhdHNQYXRoIiwiZ2V0UGF5bWVudFRva2VuIiwianNvbiIsImdldFBheW1lbnRUb2tlblBhdGgiLCJwYXltZW50VG9rZW5Gcm9tSlNPTiIsImdldEFjY291bnQiLCJnZXRBY2NvdW50UGF0aCIsImFjY291bnRGcm9tSlNPTiIsInJlZnJlc2hORlRNZXRhZGF0YSIsImdldFJlZnJlc2hNZXRhZGF0YVBhdGgiLCJvZmZjaGFpbkNhbmNlbE9yZGVyIiwib2ZmZXJlclNpZ25hdHVyZSIsImdldENhbmNlbE9yZGVyUGF0aCIsImFwaVBhdGgiLCJxdWVyeSIsInFzIiwib2JqZWN0VG9TZWFyY2hQYXJhbXMiLCJ1cmwiLCJfZmV0Y2giLCJib2R5Iiwib3B0cyIsInBhcmFtcyIsInVybFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJpdGVtIiwiYXBwZW5kIiwidG9TdHJpbmciLCJoZWFkZXJzIiwicmVxIiwiZXRoZXJzIiwiRmV0Y2hSZXF1ZXN0Iiwic2V0SGVhZGVyIiwicmV0cnlGdW5jIiwiX3JlcSIsInJlc3AiLCJhdHRlbXB0Iiwic3RhdHVzQ29kZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXF1ZXN0Iiwic2VuZCIsIm9rIiwiZXJyb3JzIiwiYm9keUpzb24iLCJlcnJvck1lc3NhZ2UiLCJqb2luIiwiYXNzZXJ0T2siLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3JnL2Rldi9vcGVuc2VhLWpzL3NyYy9hcGkvYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV0aGVycyB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7XG4gIGdldENvbGxlY3Rpb25QYXRoLFxuICBnZXRDb2xsZWN0aW9uc1BhdGgsXG4gIGdldE9yZGVyc0FQSVBhdGgsXG4gIGdldFBvc3RDb2xsZWN0aW9uT2ZmZXJQYXRoLFxuICBnZXRCdWlsZE9mZmVyUGF0aCxcbiAgZ2V0TGlzdE5GVHNCeUNvbGxlY3Rpb25QYXRoLFxuICBnZXRMaXN0TkZUc0J5Q29udHJhY3RQYXRoLFxuICBnZXRORlRQYXRoLFxuICBnZXRSZWZyZXNoTWV0YWRhdGFQYXRoLFxuICBnZXRDb2xsZWN0aW9uT2ZmZXJzUGF0aCxcbiAgZ2V0TGlzdE5GVHNCeUFjY291bnRQYXRoLFxuICBnZXRCZXN0T2ZmZXJBUElQYXRoLFxuICBnZXRCZXN0TGlzdGluZ0FQSVBhdGgsXG4gIGdldEFsbE9mZmVyc0FQSVBhdGgsXG4gIGdldEFsbExpc3RpbmdzQVBJUGF0aCxcbiAgZ2V0UGF5bWVudFRva2VuUGF0aCxcbiAgZ2V0QWNjb3VudFBhdGgsXG4gIGdldENvbGxlY3Rpb25TdGF0c1BhdGgsXG4gIGdldEJlc3RMaXN0aW5nc0FQSVBhdGgsXG4gIGdldENhbmNlbE9yZGVyUGF0aCxcbn0gZnJvbSBcIi4vYXBpUGF0aHNcIjtcbmltcG9ydCB7XG4gIEJ1aWxkT2ZmZXJSZXNwb25zZSxcbiAgR2V0Q29sbGVjdGlvblJlc3BvbnNlLFxuICBHZXRDb2xsZWN0aW9uc1Jlc3BvbnNlLFxuICBMaXN0TkZUc1Jlc3BvbnNlLFxuICBHZXRORlRSZXNwb25zZSxcbiAgTGlzdENvbGxlY3Rpb25PZmZlcnNSZXNwb25zZSxcbiAgR2V0T3JkZXJzUmVzcG9uc2UsXG4gIEdldEJlc3RPZmZlclJlc3BvbnNlLFxuICBHZXRCZXN0TGlzdGluZ1Jlc3BvbnNlLFxuICBHZXRPZmZlcnNSZXNwb25zZSxcbiAgR2V0TGlzdGluZ3NSZXNwb25zZSxcbiAgQ29sbGVjdGlvbk9mZmVyLFxuICBDb2xsZWN0aW9uT3JkZXJCeU9wdGlvbixcbiAgQ2FuY2VsT3JkZXJSZXNwb25zZSxcbiAgR2V0Q29sbGVjdGlvbnNBcmdzLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgQVBJX0JBU0VfTUFJTk5FVCwgQVBJX0JBU0VfVEVTVE5FVCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7XG4gIEZ1bGZpbGxtZW50RGF0YVJlc3BvbnNlLFxuICBPcmRlckFQSU9wdGlvbnMsXG4gIE9yZGVyc1Bvc3RRdWVyeVJlc3BvbnNlLFxuICBPcmRlcnNRdWVyeU9wdGlvbnMsXG4gIE9yZGVyc1F1ZXJ5UmVzcG9uc2UsXG4gIE9yZGVyVjIsXG4gIFByb3RvY29sRGF0YSxcbn0gZnJvbSBcIi4uL29yZGVycy90eXBlc1wiO1xuaW1wb3J0IHtcbiAgc2VyaWFsaXplT3JkZXJzUXVlcnlPcHRpb25zLFxuICBkZXNlcmlhbGl6ZU9yZGVyLFxuICBnZXRGdWxmaWxsbWVudERhdGFQYXRoLFxuICBnZXRGdWxmaWxsTGlzdGluZ1BheWxvYWQsXG4gIGdldEZ1bGZpbGxPZmZlclBheWxvYWQsXG4gIGdldEJ1aWxkQ29sbGVjdGlvbk9mZmVyUGF5bG9hZCxcbiAgZ2V0UG9zdENvbGxlY3Rpb25PZmZlclBheWxvYWQsXG59IGZyb20gXCIuLi9vcmRlcnMvdXRpbHNcIjtcbmltcG9ydCB7XG4gIENoYWluLFxuICBPcGVuU2VhQVBJQ29uZmlnLFxuICBPcGVuU2VhQWNjb3VudCxcbiAgT3BlblNlYUNvbGxlY3Rpb24sXG4gIE9wZW5TZWFDb2xsZWN0aW9uU3RhdHMsXG4gIE9wZW5TZWFQYXltZW50VG9rZW4sXG4gIE9yZGVyU2lkZSxcbn0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQge1xuICBwYXltZW50VG9rZW5Gcm9tSlNPTixcbiAgY29sbGVjdGlvbkZyb21KU09OLFxuICBpc1Rlc3RDaGFpbixcbiAgYWNjb3VudEZyb21KU09OLFxufSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcblxuZnVuY3Rpb24gc3RhbGwoZHVyYXRpb246IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9LCBkdXJhdGlvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBBUEkgY2xhc3MgZm9yIHRoZSBPcGVuU2VhIFNESy5cbiAqIEBjYXRlZ29yeSBNYWluIENsYXNzZXNcbiAqL1xuZXhwb3J0IGNsYXNzIE9wZW5TZWFBUEkge1xuICAvKipcbiAgICogQmFzZSB1cmwgZm9yIHRoZSBBUElcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhcGlCYXNlVXJsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBEZWZhdWx0IHNpemUgdG8gdXNlIGZvciBmZXRjaGluZyBvcmRlcnNcbiAgICovXG4gIHB1YmxpYyBwYWdlU2l6ZSA9IDIwO1xuICAvKipcbiAgICogTG9nZ2VyIGZ1bmN0aW9uIHRvIHVzZSB3aGVuIGRlYnVnZ2luZ1xuICAgKi9cbiAgcHVibGljIGxvZ2dlcjogKGFyZzogc3RyaW5nKSA9PiB2b2lkO1xuXG4gIHByaXZhdGUgYXBpS2V5OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgY2hhaW46IENoYWluO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIE9wZW5TZWFBUElcbiAgICogQHBhcmFtIGNvbmZpZyBPcGVuU2VhQVBJQ29uZmlnIGZvciBzZXR0aW5nIHVwIHRoZSBBUEksIGluY2x1ZGluZyBhbiBvcHRpb25hbCBBUEkga2V5LCBDaGFpbiBuYW1lLCBhbmQgYmFzZSBVUkxcbiAgICogQHBhcmFtIGxvZ2dlciBPcHRpb25hbCBmdW5jdGlvbiBmb3IgbG9nZ2luZyBkZWJ1ZyBzdHJpbmdzIGJlZm9yZSBhbmQgYWZ0ZXIgcmVxdWVzdHMgYXJlIG1hZGUuIERlZmF1bHRzIHRvIG5vIGxvZ2dpbmdcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogT3BlblNlYUFQSUNvbmZpZywgbG9nZ2VyPzogKGFyZzogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5hcGlLZXkgPSBjb25maWcuYXBpS2V5O1xuICAgIHRoaXMuY2hhaW4gPSBjb25maWcuY2hhaW4gPz8gQ2hhaW4uTWFpbm5ldDtcblxuICAgIGlmIChjb25maWcuYXBpQmFzZVVybCkge1xuICAgICAgdGhpcy5hcGlCYXNlVXJsID0gY29uZmlnLmFwaUJhc2VVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXBpQmFzZVVybCA9IGlzVGVzdENoYWluKHRoaXMuY2hhaW4pXG4gICAgICAgID8gQVBJX0JBU0VfVEVTVE5FVFxuICAgICAgICA6IEFQSV9CQVNFX01BSU5ORVQ7XG4gICAgfVxuXG4gICAgLy8gRGVidWdnaW5nOiBkZWZhdWx0IHRvIG5vdGhpbmdcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlciA/PyAoKGFyZzogc3RyaW5nKSA9PiBhcmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gb3JkZXIgZnJvbSBBUEkgYmFzZWQgb24gcXVlcnkgb3B0aW9ucy5cbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHBhcmFtIG9wdGlvbnMuc2lkZSBUaGUgc2lkZSBvZiB0aGUgb3JkZXIgKGJ1eSBvciBzZWxsXG4gICAqIEBwYXJhbSBvcHRpb25zLnByb3RvY29sIFRoZSBwcm90b2NvbCwgdHlwaWNhbGx5IHNlYXBvcnQsIHRvIHF1ZXJ5IG9yZGVycyBmb3JcbiAgICogQHBhcmFtIG9wdGlvbnMub3JkZXJEaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0byBzb3J0IHRoZSBvcmRlcnNcbiAgICogQHBhcmFtIG9wdGlvbnMub3JkZXJCeSBUaGUgZmllbGQgdG8gc29ydCB0aGUgb3JkZXJzIGJ5XG4gICAqIEBwYXJhbSBvcHRpb25zLmxpbWl0IFRoZSBudW1iZXIgb2Ygb3JkZXJzIHRvIHJldHJpZXZlXG4gICAqIEBwYXJhbSBvcHRpb25zLm1ha2VyIEZpbHRlciBieSB0aGUgd2FsbGV0IGFkZHJlc3Mgb2YgdGhlIG9yZGVyIG1ha2VyXG4gICAqIEBwYXJhbSBvcHRpb25zLnRha2VyIEZpbHRlciBieSAgd2FsbGV0IGFkZHJlc3Mgb2YgdGhlIG9yZGVyIHRha2VyXG4gICAqIEBwYXJhbSBvcHRpb25zLmFzc2V0X2NvbnRyYWN0X2FkZHJlc3MgQWRkcmVzcyBvZiB0aGUgTkZUJ3MgY29udHJhY3RcbiAgICogQHBhcmFtIG9wdGlvbnMudG9rZW5faWRzIFN0cmluZyBhcnJheSBvZiB0b2tlbiBJRHMgdG8gZmlsdGVyIGJ5LlxuICAgKiBAcGFyYW0gb3B0aW9ucy5saXN0ZWRfYWZ0ZXIgRmlsdGVyIGJ5IG9yZGVycyBsaXN0ZWQgYWZ0ZXIgdGhlIFVuaXggZXBvY2ggdGltZXN0YW1wIGluIHNlY29uZHNcbiAgICogQHBhcmFtIG9wdGlvbnMubGlzdGVkX2JlZm9yZSBGaWx0ZXIgYnkgb3JkZXJzIGxpc3RlZCBiZWZvcmUgdGhlIFVuaXggZXBvY2ggdGltZXN0YW1wIGluIHNlY29uZHNcbiAgICogQHJldHVybnMgVGhlIGZpcnN0IHtAbGluayBPcmRlclYyfSByZXR1cm5lZCBieSB0aGUgQVBJXG4gICAqXG4gICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlcmUgYXJlIG5vIG1hdGNoaW5nIG9yZGVycy5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRPcmRlcih7XG4gICAgc2lkZSxcbiAgICBwcm90b2NvbCA9IFwic2VhcG9ydFwiLFxuICAgIG9yZGVyRGlyZWN0aW9uID0gXCJkZXNjXCIsXG4gICAgb3JkZXJCeSA9IFwiY3JlYXRlZF9kYXRlXCIsXG4gICAgLi4ucmVzdE9wdGlvbnNcbiAgfTogT21pdDxPcmRlcnNRdWVyeU9wdGlvbnMsIFwibGltaXRcIj4pOiBQcm9taXNlPE9yZGVyVjI+IHtcbiAgICBjb25zdCB7IG9yZGVycyB9ID0gYXdhaXQgdGhpcy5nZXQ8T3JkZXJzUXVlcnlSZXNwb25zZT4oXG4gICAgICBnZXRPcmRlcnNBUElQYXRoKHRoaXMuY2hhaW4sIHByb3RvY29sLCBzaWRlKSxcbiAgICAgIHNlcmlhbGl6ZU9yZGVyc1F1ZXJ5T3B0aW9ucyh7XG4gICAgICAgIGxpbWl0OiAxLFxuICAgICAgICBvcmRlckJ5LFxuICAgICAgICBvcmRlckRpcmVjdGlvbixcbiAgICAgICAgLi4ucmVzdE9wdGlvbnMsXG4gICAgICB9KSxcbiAgICApO1xuICAgIGlmIChvcmRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgZm91bmQ6IG5vIG1hdGNoaW5nIG9yZGVyIGZvdW5kXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZGVzZXJpYWxpemVPcmRlcihvcmRlcnNbMF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBsaXN0IG9mIG9yZGVycyBmcm9tIEFQSSBiYXNlZCBvbiBxdWVyeSBvcHRpb25zLlxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcGFyYW0gb3B0aW9ucy5zaWRlIFRoZSBzaWRlIG9mIHRoZSBvcmRlciAoYnV5IG9yIHNlbGwpXG4gICAqIEBwYXJhbSBvcHRpb25zLnByb3RvY29sIFRoZSBwcm90b2NvbCwgdHlwaWNhbGx5IHNlYXBvcnQsIHRvIHF1ZXJ5IG9yZGVycyBmb3JcbiAgICogQHBhcmFtIG9wdGlvbnMub3JkZXJEaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0byBzb3J0IHRoZSBvcmRlcnNcbiAgICogQHBhcmFtIG9wdGlvbnMub3JkZXJCeSBUaGUgZmllbGQgdG8gc29ydCB0aGUgb3JkZXJzIGJ5XG4gICAqIEBwYXJhbSBvcHRpb25zLmxpbWl0IFRoZSBudW1iZXIgb2Ygb3JkZXJzIHRvIHJldHJpZXZlXG4gICAqIEBwYXJhbSBvcHRpb25zLm1ha2VyIEZpbHRlciBieSB0aGUgd2FsbGV0IGFkZHJlc3Mgb2YgdGhlIG9yZGVyIG1ha2VyXG4gICAqIEBwYXJhbSBvcHRpb25zLnRha2VyIEZpbHRlciBieSAgd2FsbGV0IGFkZHJlc3Mgb2YgdGhlIG9yZGVyIHRha2VyXG4gICAqIEBwYXJhbSBvcHRpb25zLmFzc2V0X2NvbnRyYWN0X2FkZHJlc3MgQWRkcmVzcyBvZiB0aGUgTkZUJ3MgY29udHJhY3RcbiAgICogQHBhcmFtIG9wdGlvbnMudG9rZW5faWRzIFN0cmluZyBhcnJheSBvZiB0b2tlbiBJRHMgdG8gZmlsdGVyIGJ5LlxuICAgKiBAcGFyYW0gb3B0aW9ucy5saXN0ZWRfYWZ0ZXIgRmlsdGVyIGJ5IG9yZGVycyBsaXN0ZWQgYWZ0ZXIgdGhlIFVuaXggZXBvY2ggdGltZXN0YW1wIGluIHNlY29uZHNcbiAgICogQHBhcmFtIG9wdGlvbnMubGlzdGVkX2JlZm9yZSBGaWx0ZXIgYnkgb3JkZXJzIGxpc3RlZCBiZWZvcmUgdGhlIFVuaXggZXBvY2ggdGltZXN0YW1wIGluIHNlY29uZHNcbiAgICogQHJldHVybnMgVGhlIHtAbGluayBHZXRPcmRlcnNSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRPcmRlcnMoe1xuICAgIHNpZGUsXG4gICAgcHJvdG9jb2wgPSBcInNlYXBvcnRcIixcbiAgICBvcmRlckRpcmVjdGlvbiA9IFwiZGVzY1wiLFxuICAgIG9yZGVyQnkgPSBcImNyZWF0ZWRfZGF0ZVwiLFxuICAgIC4uLnJlc3RPcHRpb25zXG4gIH06IE9taXQ8T3JkZXJzUXVlcnlPcHRpb25zLCBcImxpbWl0XCI+KTogUHJvbWlzZTxHZXRPcmRlcnNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQ8T3JkZXJzUXVlcnlSZXNwb25zZT4oXG4gICAgICBnZXRPcmRlcnNBUElQYXRoKHRoaXMuY2hhaW4sIHByb3RvY29sLCBzaWRlKSxcbiAgICAgIHNlcmlhbGl6ZU9yZGVyc1F1ZXJ5T3B0aW9ucyh7XG4gICAgICAgIGxpbWl0OiB0aGlzLnBhZ2VTaXplLFxuICAgICAgICBvcmRlckJ5LFxuICAgICAgICBvcmRlckRpcmVjdGlvbixcbiAgICAgICAgLi4ucmVzdE9wdGlvbnMsXG4gICAgICB9KSxcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXNwb25zZSxcbiAgICAgIG9yZGVyczogcmVzcG9uc2Uub3JkZXJzLm1hcChkZXNlcmlhbGl6ZU9yZGVyKSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYWxsIG9mZmVycyBmb3IgYSBnaXZlbiBjb2xsZWN0aW9uLlxuICAgKiBAcGFyYW0gY29sbGVjdGlvblNsdWcgVGhlIHNsdWcgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSBsaW1pdCBUaGUgbnVtYmVyIG9mIG9mZmVycyB0byByZXR1cm4uIE11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMDAuIERlZmF1bHQ6IDEwMFxuICAgKiBAcGFyYW0gbmV4dCBUaGUgY3Vyc29yIGZvciB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuIFRoaXMgaXMgcmV0dXJuZWQgZnJvbSBhIHByZXZpb3VzIHJlcXVlc3QuXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgR2V0T2ZmZXJzUmVzcG9uc2V9IHJldHVybmVkIGJ5IHRoZSBBUEkuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0QWxsT2ZmZXJzKFxuICAgIGNvbGxlY3Rpb25TbHVnOiBzdHJpbmcsXG4gICAgbGltaXQ/OiBudW1iZXIsXG4gICAgbmV4dD86IHN0cmluZyxcbiAgKTogUHJvbWlzZTxHZXRPZmZlcnNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQ8R2V0T2ZmZXJzUmVzcG9uc2U+KFxuICAgICAgZ2V0QWxsT2ZmZXJzQVBJUGF0aChjb2xsZWN0aW9uU2x1ZyksXG4gICAgICB7XG4gICAgICAgIGxpbWl0LFxuICAgICAgICBuZXh0LFxuICAgICAgfSxcbiAgICApO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFsbCBsaXN0aW5ncyBmb3IgYSBnaXZlbiBjb2xsZWN0aW9uLlxuICAgKiBAcGFyYW0gY29sbGVjdGlvblNsdWcgVGhlIHNsdWcgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSBsaW1pdCBUaGUgbnVtYmVyIG9mIGxpc3RpbmdzIHRvIHJldHVybi4gTXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwMC4gRGVmYXVsdDogMTAwXG4gICAqIEBwYXJhbSBuZXh0IFRoZSBjdXJzb3IgZm9yIHRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy4gVGhpcyBpcyByZXR1cm5lZCBmcm9tIGEgcHJldmlvdXMgcmVxdWVzdC5cbiAgICogQHJldHVybnMgVGhlIHtAbGluayBHZXRMaXN0aW5nc1Jlc3BvbnNlfSByZXR1cm5lZCBieSB0aGUgQVBJLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldEFsbExpc3RpbmdzKFxuICAgIGNvbGxlY3Rpb25TbHVnOiBzdHJpbmcsXG4gICAgbGltaXQ/OiBudW1iZXIsXG4gICAgbmV4dD86IHN0cmluZyxcbiAgKTogUHJvbWlzZTxHZXRMaXN0aW5nc1Jlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldDxHZXRMaXN0aW5nc1Jlc3BvbnNlPihcbiAgICAgIGdldEFsbExpc3RpbmdzQVBJUGF0aChjb2xsZWN0aW9uU2x1ZyksXG4gICAgICB7XG4gICAgICAgIGxpbWl0LFxuICAgICAgICBuZXh0LFxuICAgICAgfSxcbiAgICApO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBiZXN0IG9mZmVyIGZvciBhIGdpdmVuIHRva2VuLlxuICAgKiBAcGFyYW0gY29sbGVjdGlvblNsdWcgVGhlIHNsdWcgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSB0b2tlbklkIFRoZSB0b2tlbiBpZGVudGlmaWVyLlxuICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIEdldEJlc3RPZmZlclJlc3BvbnNlfSByZXR1cm5lZCBieSB0aGUgQVBJLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldEJlc3RPZmZlcihcbiAgICBjb2xsZWN0aW9uU2x1Zzogc3RyaW5nLFxuICAgIHRva2VuSWQ6IHN0cmluZyB8IG51bWJlcixcbiAgKTogUHJvbWlzZTxHZXRCZXN0T2ZmZXJSZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQ8R2V0QmVzdE9mZmVyUmVzcG9uc2U+KFxuICAgICAgZ2V0QmVzdE9mZmVyQVBJUGF0aChjb2xsZWN0aW9uU2x1ZywgdG9rZW5JZCksXG4gICAgKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgYmVzdCBsaXN0aW5nIGZvciBhIGdpdmVuIHRva2VuLlxuICAgKiBAcGFyYW0gY29sbGVjdGlvblNsdWcgVGhlIHNsdWcgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSB0b2tlbklkIFRoZSB0b2tlbiBpZGVudGlmaWVyLlxuICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIEdldEJlc3RMaXN0aW5nUmVzcG9uc2V9IHJldHVybmVkIGJ5IHRoZSBBUEkuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0QmVzdExpc3RpbmcoXG4gICAgY29sbGVjdGlvblNsdWc6IHN0cmluZyxcbiAgICB0b2tlbklkOiBzdHJpbmcgfCBudW1iZXIsXG4gICk6IFByb21pc2U8R2V0QmVzdExpc3RpbmdSZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQ8R2V0QmVzdExpc3RpbmdSZXNwb25zZT4oXG4gICAgICBnZXRCZXN0TGlzdGluZ0FQSVBhdGgoY29sbGVjdGlvblNsdWcsIHRva2VuSWQpLFxuICAgICk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGJlc3QgbGlzdGluZ3MgZm9yIGEgZ2l2ZW4gY29sbGVjdGlvbi5cbiAgICogQHBhcmFtIGNvbGxlY3Rpb25TbHVnIFRoZSBzbHVnIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgKiBAcGFyYW0gbGltaXQgVGhlIG51bWJlciBvZiBsaXN0aW5ncyB0byByZXR1cm4uIE11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMDAuIERlZmF1bHQ6IDEwMFxuICAgKiBAcGFyYW0gbmV4dCBUaGUgY3Vyc29yIGZvciB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuIFRoaXMgaXMgcmV0dXJuZWQgZnJvbSBhIHByZXZpb3VzIHJlcXVlc3QuXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgR2V0TGlzdGluZ3NSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRCZXN0TGlzdGluZ3MoXG4gICAgY29sbGVjdGlvblNsdWc6IHN0cmluZyxcbiAgICBsaW1pdD86IG51bWJlcixcbiAgICBuZXh0Pzogc3RyaW5nLFxuICApOiBQcm9taXNlPEdldExpc3RpbmdzUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0PEdldExpc3RpbmdzUmVzcG9uc2U+KFxuICAgICAgZ2V0QmVzdExpc3RpbmdzQVBJUGF0aChjb2xsZWN0aW9uU2x1ZyksXG4gICAgICB7XG4gICAgICAgIGxpbWl0LFxuICAgICAgICBuZXh0LFxuICAgICAgfSxcbiAgICApO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSB0aGUgZGF0YSBuZWVkZWQgdG8gZnVsZmlsbCBhIGxpc3Rpbmcgb3IgYW4gb2ZmZXIgb25jaGFpbi5cbiAgICogQHBhcmFtIGZ1bGZpbGxlckFkZHJlc3MgVGhlIHdhbGxldCBhZGRyZXNzIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBmdWxmaWxsIHRoZSBvcmRlclxuICAgKiBAcGFyYW0gb3JkZXJIYXNoIFRoZSBoYXNoIG9mIHRoZSBvcmRlciB0byBmdWxmaWxsXG4gICAqIEBwYXJhbSBwcm90b2NvbEFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIHNlYXBvcnQgY29udHJhY3RcbiAgICogQHNpZGUgVGhlIHNpZGUgb2YgdGhlIG9yZGVyIChidXkgb3Igc2VsbClcbiAgICogQHJldHVybnMgVGhlIHtAbGluayBGdWxmaWxsbWVudERhdGFSZXNwb25zZX1cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZW5lcmF0ZUZ1bGZpbGxtZW50RGF0YShcbiAgICBmdWxmaWxsZXJBZGRyZXNzOiBzdHJpbmcsXG4gICAgb3JkZXJIYXNoOiBzdHJpbmcsXG4gICAgcHJvdG9jb2xBZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lkZTogT3JkZXJTaWRlLFxuICApOiBQcm9taXNlPEZ1bGZpbGxtZW50RGF0YVJlc3BvbnNlPiB7XG4gICAgbGV0IHBheWxvYWQ6IG9iamVjdCB8IG51bGwgPSBudWxsO1xuICAgIGlmIChzaWRlID09PSBPcmRlclNpZGUuQVNLKSB7XG4gICAgICBwYXlsb2FkID0gZ2V0RnVsZmlsbExpc3RpbmdQYXlsb2FkKFxuICAgICAgICBmdWxmaWxsZXJBZGRyZXNzLFxuICAgICAgICBvcmRlckhhc2gsXG4gICAgICAgIHByb3RvY29sQWRkcmVzcyxcbiAgICAgICAgdGhpcy5jaGFpbixcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBheWxvYWQgPSBnZXRGdWxmaWxsT2ZmZXJQYXlsb2FkKFxuICAgICAgICBmdWxmaWxsZXJBZGRyZXNzLFxuICAgICAgICBvcmRlckhhc2gsXG4gICAgICAgIHByb3RvY29sQWRkcmVzcyxcbiAgICAgICAgdGhpcy5jaGFpbixcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wb3N0PEZ1bGZpbGxtZW50RGF0YVJlc3BvbnNlPihcbiAgICAgIGdldEZ1bGZpbGxtZW50RGF0YVBhdGgoc2lkZSksXG4gICAgICBwYXlsb2FkLFxuICAgICk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvc3QgYW4gb3JkZXIgdG8gT3BlblNlYS5cbiAgICogQHBhcmFtIG9yZGVyIFRoZSBvcmRlciB0byBwb3N0XG4gICAqIEBwYXJhbSBhcGlPcHRpb25zXG4gICAqIEBwYXJhbSBhcGlPcHRpb25zLnByb3RvY29sIFRoZSBwcm90b2NvbCwgdHlwaWNhbGx5IHNlYXBvcnQsIHRvIHBvc3QgdGhlIG9yZGVyIHRvLlxuICAgKiBAcGFyYW0gYXBpT3B0aW9ucy5zaWRlIFRoZSBzaWRlIG9mIHRoZSBvcmRlciAoYnV5IG9yIHNlbGwpLlxuICAgKiBAcGFyYW0gYXBpT3B0aW9ucy5wcm90b2NvbEFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIHNlYXBvcnQgY29udHJhY3QuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgT3JkZXJWMn0gcG9zdGVkIHRvIHRoZSBBUEkuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcG9zdE9yZGVyKFxuICAgIG9yZGVyOiBQcm90b2NvbERhdGEsXG4gICAgYXBpT3B0aW9uczogT3JkZXJBUElPcHRpb25zLFxuICApOiBQcm9taXNlPE9yZGVyVjI+IHtcbiAgICAvLyBUT0RPOiBWYWxpZGF0ZSBhcGlPcHRpb25zLiBBdm9pZCBBUEkgY2FsbHMgdGhhdCB3aWxsIGRlZmluaXRlbHkgZmFpbFxuICAgIGNvbnN0IHsgcHJvdG9jb2wgPSBcInNlYXBvcnRcIiwgc2lkZSwgcHJvdG9jb2xBZGRyZXNzIH0gPSBhcGlPcHRpb25zO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wb3N0PE9yZGVyc1Bvc3RRdWVyeVJlc3BvbnNlPihcbiAgICAgIGdldE9yZGVyc0FQSVBhdGgodGhpcy5jaGFpbiwgcHJvdG9jb2wsIHNpZGUpLFxuICAgICAgeyAuLi5vcmRlciwgcHJvdG9jb2xfYWRkcmVzczogcHJvdG9jb2xBZGRyZXNzIH0sXG4gICAgKTtcbiAgICByZXR1cm4gZGVzZXJpYWxpemVPcmRlcihyZXNwb25zZS5vcmRlcik7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGQgYSBPcGVuU2VhIGNvbGxlY3Rpb24gb2ZmZXIuXG4gICAqIEBwYXJhbSBvZmZlcmVyQWRkcmVzcyBUaGUgd2FsbGV0IGFkZHJlc3Mgd2hpY2ggaXMgY3JlYXRpbmcgdGhlIG9mZmVyLlxuICAgKiBAcGFyYW0gcXVhbnRpdHkgVGhlIG51bWJlciBvZiBORlRzIHJlcXVlc3RlZCBpbiB0aGUgb2ZmZXIuXG4gICAqIEBwYXJhbSBjb2xsZWN0aW9uU2x1ZyBUaGUgc2x1ZyAoaWRlbnRpZmllcikgb2YgdGhlIGNvbGxlY3Rpb24gdG8gYnVpbGQgdGhlIG9mZmVyIGZvci5cbiAgICogQHBhcmFtIG9mZmVyUHJvdGVjdGlvbkVuYWJsZWQgQnVpbGQgdGhlIG9mZmVyIG9uIE9wZW5TZWEncyBzaWduZWQgem9uZSB0byBwcm92aWRlIG9mZmVyIHByb3RlY3Rpb25zIGZyb20gcmVjZWl2aW5nIGFuIGl0ZW0gd2hpY2ggaXMgZGlzYWJsZWQgZnJvbSB0cmFkaW5nLlxuICAgKiBAcGFyYW0gdHJhaXRUeXBlIElmIGRlZmluZWQsIHRoZSB0cmFpdCBuYW1lIHRvIGNyZWF0ZSB0aGUgY29sbGVjdGlvbiBvZmZlciBmb3IuXG4gICAqIEBwYXJhbSB0cmFpdFZhbHVlIElmIGRlZmluZWQsIHRoZSB0cmFpdCB2YWx1ZSB0byBjcmVhdGUgdGhlIGNvbGxlY3Rpb24gb2ZmZXIgZm9yLlxuICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIEJ1aWxkT2ZmZXJSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBidWlsZE9mZmVyKFxuICAgIG9mZmVyZXJBZGRyZXNzOiBzdHJpbmcsXG4gICAgcXVhbnRpdHk6IG51bWJlcixcbiAgICBjb2xsZWN0aW9uU2x1Zzogc3RyaW5nLFxuICAgIG9mZmVyUHJvdGVjdGlvbkVuYWJsZWQgPSB0cnVlLFxuICAgIHRyYWl0VHlwZT86IHN0cmluZyxcbiAgICB0cmFpdFZhbHVlPzogc3RyaW5nLFxuICApOiBQcm9taXNlPEJ1aWxkT2ZmZXJSZXNwb25zZT4ge1xuICAgIGlmICh0cmFpdFR5cGUgfHwgdHJhaXRWYWx1ZSkge1xuICAgICAgaWYgKCF0cmFpdFR5cGUgfHwgIXRyYWl0VmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiQm90aCB0cmFpdFR5cGUgYW5kIHRyYWl0VmFsdWUgbXVzdCBiZSBkZWZpbmVkIGlmIG9uZSBpcyBkZWZpbmVkLlwiLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYXlsb2FkID0gZ2V0QnVpbGRDb2xsZWN0aW9uT2ZmZXJQYXlsb2FkKFxuICAgICAgb2ZmZXJlckFkZHJlc3MsXG4gICAgICBxdWFudGl0eSxcbiAgICAgIGNvbGxlY3Rpb25TbHVnLFxuICAgICAgb2ZmZXJQcm90ZWN0aW9uRW5hYmxlZCxcbiAgICAgIHRyYWl0VHlwZSxcbiAgICAgIHRyYWl0VmFsdWUsXG4gICAgKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucG9zdDxCdWlsZE9mZmVyUmVzcG9uc2U+KFxuICAgICAgZ2V0QnVpbGRPZmZlclBhdGgoKSxcbiAgICAgIHBheWxvYWQsXG4gICAgKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgbGlzdCBjb2xsZWN0aW9uIG9mZmVycyBmb3IgYSBnaXZlbiBzbHVnLlxuICAgKiBAcGFyYW0gc2x1ZyBUaGUgc2x1ZyAoaWRlbnRpZmllcikgb2YgdGhlIGNvbGxlY3Rpb24gdG8gbGlzdCBvZmZlcnMgZm9yXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgTGlzdENvbGxlY3Rpb25PZmZlcnNSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRDb2xsZWN0aW9uT2ZmZXJzKFxuICAgIHNsdWc6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxMaXN0Q29sbGVjdGlvbk9mZmVyc1Jlc3BvbnNlIHwgbnVsbD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldDxMaXN0Q29sbGVjdGlvbk9mZmVyc1Jlc3BvbnNlPihcbiAgICAgIGdldENvbGxlY3Rpb25PZmZlcnNQYXRoKHNsdWcpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUG9zdCBhIGNvbGxlY3Rpb24gb2ZmZXIgdG8gT3BlblNlYS5cbiAgICogQHBhcmFtIG9yZGVyIFRoZSBjb2xsZWN0aW9uIG9mZmVyIHRvIHBvc3QuXG4gICAqIEBwYXJhbSBzbHVnIFRoZSBzbHVnIChpZGVudGlmaWVyKSBvZiB0aGUgY29sbGVjdGlvbiB0byBwb3N0IHRoZSBvZmZlciBmb3IuXG4gICAqIEBwYXJhbSB0cmFpdFR5cGUgSWYgZGVmaW5lZCwgdGhlIHRyYWl0IG5hbWUgdG8gY3JlYXRlIHRoZSBjb2xsZWN0aW9uIG9mZmVyIGZvci5cbiAgICogQHBhcmFtIHRyYWl0VmFsdWUgSWYgZGVmaW5lZCwgdGhlIHRyYWl0IHZhbHVlIHRvIGNyZWF0ZSB0aGUgY29sbGVjdGlvbiBvZmZlciBmb3IuXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgT2ZmZXJ9IHJldHVybmVkIHRvIHRoZSBBUEkuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcG9zdENvbGxlY3Rpb25PZmZlcihcbiAgICBvcmRlcjogUHJvdG9jb2xEYXRhLFxuICAgIHNsdWc6IHN0cmluZyxcbiAgICB0cmFpdFR5cGU/OiBzdHJpbmcsXG4gICAgdHJhaXRWYWx1ZT86IHN0cmluZyxcbiAgKTogUHJvbWlzZTxDb2xsZWN0aW9uT2ZmZXIgfCBudWxsPiB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGdldFBvc3RDb2xsZWN0aW9uT2ZmZXJQYXlsb2FkKFxuICAgICAgc2x1ZyxcbiAgICAgIG9yZGVyLFxuICAgICAgdHJhaXRUeXBlLFxuICAgICAgdHJhaXRWYWx1ZSxcbiAgICApO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnBvc3Q8Q29sbGVjdGlvbk9mZmVyPihcbiAgICAgIGdldFBvc3RDb2xsZWN0aW9uT2ZmZXJQYXRoKCksXG4gICAgICBwYXlsb2FkLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggbXVsdGlwbGUgTkZUcyBmb3IgYSBjb2xsZWN0aW9uLlxuICAgKiBAcGFyYW0gc2x1ZyBUaGUgc2x1ZyAoaWRlbnRpZmllcikgb2YgdGhlIGNvbGxlY3Rpb25cbiAgICogQHBhcmFtIGxpbWl0IFRoZSBudW1iZXIgb2YgTkZUcyB0byByZXRyaWV2ZS4gTXVzdCBiZSBncmVhdGVyIHRoYW4gMCBhbmQgbGVzcyB0aGFuIDUxLlxuICAgKiBAcGFyYW0gbmV4dCBDdXJzb3IgdG8gcmV0cmlldmUgdGhlIG5leHQgcGFnZSBvZiBORlRzXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgTGlzdE5GVHNSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRORlRzQnlDb2xsZWN0aW9uKFxuICAgIHNsdWc6IHN0cmluZyxcbiAgICBsaW1pdDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxuICAgIG5leHQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcbiAgKTogUHJvbWlzZTxMaXN0TkZUc1Jlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldDxMaXN0TkZUc1Jlc3BvbnNlPihcbiAgICAgIGdldExpc3RORlRzQnlDb2xsZWN0aW9uUGF0aChzbHVnKSxcbiAgICAgIHtcbiAgICAgICAgbGltaXQsXG4gICAgICAgIG5leHQsXG4gICAgICB9LFxuICAgICk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIG11bHRpcGxlIE5GVHMgZm9yIGEgY29udHJhY3QuXG4gICAqIEBwYXJhbSBhZGRyZXNzIFRoZSBORlQncyBjb250cmFjdCBhZGRyZXNzLlxuICAgKiBAcGFyYW0gbGltaXQgVGhlIG51bWJlciBvZiBORlRzIHRvIHJldHJpZXZlLiBNdXN0IGJlIGdyZWF0ZXIgdGhhbiAwIGFuZCBsZXNzIHRoYW4gNTEuXG4gICAqIEBwYXJhbSBuZXh0IEN1cnNvciB0byByZXRyaWV2ZSB0aGUgbmV4dCBwYWdlIG9mIE5GVHMuXG4gICAqIEBwYXJhbSBjaGFpbiBUaGUgTkZUJ3MgY2hhaW4uXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgTGlzdE5GVHNSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRORlRzQnlDb250cmFjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgbGltaXQ6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcbiAgICBuZXh0OiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsXG4gICAgY2hhaW46IENoYWluID0gdGhpcy5jaGFpbixcbiAgKTogUHJvbWlzZTxMaXN0TkZUc1Jlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldDxMaXN0TkZUc1Jlc3BvbnNlPihcbiAgICAgIGdldExpc3RORlRzQnlDb250cmFjdFBhdGgoY2hhaW4sIGFkZHJlc3MpLFxuICAgICAge1xuICAgICAgICBsaW1pdCxcbiAgICAgICAgbmV4dCxcbiAgICAgIH0sXG4gICAgKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggTkZUcyBvd25lZCBieSBhbiBhY2NvdW50LlxuICAgKiBAcGFyYW0gYWRkcmVzcyBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudFxuICAgKiBAcGFyYW0gbGltaXQgVGhlIG51bWJlciBvZiBORlRzIHRvIHJldHJpZXZlLiBNdXN0IGJlIGdyZWF0ZXIgdGhhbiAwIGFuZCBsZXNzIHRoYW4gNTEuXG4gICAqIEBwYXJhbSBuZXh0IEN1cnNvciB0byByZXRyaWV2ZSB0aGUgbmV4dCBwYWdlIG9mIE5GVHNcbiAgICogQHBhcmFtIGNoYWluIFRoZSBjaGFpbiB0byBxdWVyeS4gRGVmYXVsdHMgdG8gdGhlIGNoYWluIHNldCBpbiB0aGUgY29uc3RydWN0b3IuXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgTGlzdE5GVHNSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRORlRzQnlBY2NvdW50KFxuICAgIGFkZHJlc3M6IHN0cmluZyxcbiAgICBsaW1pdDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxuICAgIG5leHQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcbiAgICBjaGFpbiA9IHRoaXMuY2hhaW4sXG4gICk6IFByb21pc2U8TGlzdE5GVHNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQ8TGlzdE5GVHNSZXNwb25zZT4oXG4gICAgICBnZXRMaXN0TkZUc0J5QWNjb3VudFBhdGgoY2hhaW4sIGFkZHJlc3MpLFxuICAgICAge1xuICAgICAgICBsaW1pdCxcbiAgICAgICAgbmV4dCxcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBtZXRhZGF0YSwgdHJhaXRzLCBvd25lcnNoaXAgaW5mb3JtYXRpb24sIGFuZCByYXJpdHkgZm9yIGEgc2luZ2xlIE5GVC5cbiAgICogQHBhcmFtIGFkZHJlc3MgVGhlIE5GVCdzIGNvbnRyYWN0IGFkZHJlc3MuXG4gICAqIEBwYXJhbSBpZGVudGlmaWVyIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBORlQgKGkuZS4gVG9rZW4gSUQpXG4gICAqIEBwYXJhbSBjaGFpbiBUaGUgTkZUJ3MgY2hhaW4uXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgR2V0TkZUUmVzcG9uc2V9IHJldHVybmVkIGJ5IHRoZSBBUEkuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0TkZUKFxuICAgIGFkZHJlc3M6IHN0cmluZyxcbiAgICBpZGVudGlmaWVyOiBzdHJpbmcsXG4gICAgY2hhaW4gPSB0aGlzLmNoYWluLFxuICApOiBQcm9taXNlPEdldE5GVFJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldDxHZXRORlRSZXNwb25zZT4oXG4gICAgICBnZXRORlRQYXRoKGNoYWluLCBhZGRyZXNzLCBpZGVudGlmaWVyKSxcbiAgICApO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhbiBPcGVuU2VhIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSBzbHVnIFRoZSBzbHVnIChpZGVudGlmaWVyKSBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICogQHJldHVybnMgVGhlIHtAbGluayBPcGVuU2VhQ29sbGVjdGlvbn0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRDb2xsZWN0aW9uKHNsdWc6IHN0cmluZyk6IFByb21pc2U8T3BlblNlYUNvbGxlY3Rpb24+IHtcbiAgICBjb25zdCBwYXRoID0gZ2V0Q29sbGVjdGlvblBhdGgoc2x1Zyk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldDxHZXRDb2xsZWN0aW9uUmVzcG9uc2U+KHBhdGgpO1xuICAgIHJldHVybiBjb2xsZWN0aW9uRnJvbUpTT04ocmVzcG9uc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGEgbGlzdCBvZiBPcGVuU2VhIGNvbGxlY3Rpb25zLlxuICAgKiBAcGFyYW0gb3JkZXJCeSBUaGUgb3JkZXIgdG8gcmV0dXJuIHRoZSBjb2xsZWN0aW9ucyBpbi4gRGVmYXVsdDogQ1JFQVRFRF9EQVRFXG4gICAqIEBwYXJhbSBjaGFpbiBUaGUgY2hhaW4gdG8gZmlsdGVyIHRoZSBjb2xsZWN0aW9ucyBvbi4gRGVmYXVsdDogYWxsIGNoYWluc1xuICAgKiBAcGFyYW0gY3JlYXRvclVzZXJuYW1lIFRoZSBjcmVhdG9yJ3MgT3BlblNlYSB1c2VybmFtZSB0byBmaWx0ZXIgdGhlIGNvbGxlY3Rpb25zIG9uLlxuICAgKiBAcGFyYW0gaW5jbHVkZUhpZGRlbiBJZiBoaWRkZW4gY29sbGVjdGlvbnMgc2hvdWxkIGJlIHJldHVybmVkLiBEZWZhdWx0OiBmYWxzZVxuICAgKiBAcGFyYW0gbGltaXQgVGhlIGxpbWl0IG9mIGNvbGxlY3Rpb25zIHRvIHJldHVybi5cbiAgICogQHBhcmFtIG5leHQgVGhlIGN1cnNvciBmb3IgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLiBUaGlzIGlzIHJldHVybmVkIGZyb20gYSBwcmV2aW91cyByZXF1ZXN0LlxuICAgKiBAcmV0dXJucyBMaXN0IG9mIHtAbGluayBPcGVuU2VhQ29sbGVjdGlvbn0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRDb2xsZWN0aW9ucyhcbiAgICBvcmRlckJ5OiBDb2xsZWN0aW9uT3JkZXJCeU9wdGlvbiA9IENvbGxlY3Rpb25PcmRlckJ5T3B0aW9uLkNSRUFURURfREFURSxcbiAgICBjaGFpbj86IENoYWluLFxuICAgIGNyZWF0b3JVc2VybmFtZT86IHN0cmluZyxcbiAgICBpbmNsdWRlSGlkZGVuOiBib29sZWFuID0gZmFsc2UsXG4gICAgbGltaXQ/OiBudW1iZXIsXG4gICAgbmV4dD86IHN0cmluZyxcbiAgKTogUHJvbWlzZTxHZXRDb2xsZWN0aW9uc1Jlc3BvbnNlPiB7XG4gICAgY29uc3QgcGF0aCA9IGdldENvbGxlY3Rpb25zUGF0aCgpO1xuICAgIGNvbnN0IGFyZ3M6IEdldENvbGxlY3Rpb25zQXJncyA9IHtcbiAgICAgIG9yZGVyX2J5OiBvcmRlckJ5LFxuICAgICAgY2hhaW4sXG4gICAgICBjcmVhdG9yX3VzZXJuYW1lOiBjcmVhdG9yVXNlcm5hbWUsXG4gICAgICBpbmNsdWRlX2hpZGRlbjogaW5jbHVkZUhpZGRlbixcbiAgICAgIGxpbWl0LFxuICAgICAgbmV4dCxcbiAgICB9O1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQ8R2V0Q29sbGVjdGlvbnNSZXNwb25zZT4ocGF0aCwgYXJncyk7XG4gICAgcmVzcG9uc2UuY29sbGVjdGlvbnMgPSByZXNwb25zZS5jb2xsZWN0aW9ucy5tYXAoKGNvbGxlY3Rpb24pID0+XG4gICAgICBjb2xsZWN0aW9uRnJvbUpTT04oY29sbGVjdGlvbiksXG4gICAgKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggc3RhdHMgZm9yIGFuIE9wZW5TZWEgY29sbGVjdGlvbi5cbiAgICogQHBhcmFtIHNsdWcgVGhlIHNsdWcgKGlkZW50aWZpZXIpIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIE9wZW5TZWFDb2xsZWN0aW9ufSByZXR1cm5lZCBieSB0aGUgQVBJLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldENvbGxlY3Rpb25TdGF0cyhcbiAgICBzbHVnOiBzdHJpbmcsXG4gICk6IFByb21pc2U8T3BlblNlYUNvbGxlY3Rpb25TdGF0cz4ge1xuICAgIGNvbnN0IHBhdGggPSBnZXRDb2xsZWN0aW9uU3RhdHNQYXRoKHNsdWcpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXQ8T3BlblNlYUNvbGxlY3Rpb25TdGF0cz4ocGF0aCk7XG4gICAgcmV0dXJuIHJlc3BvbnNlIGFzIE9wZW5TZWFDb2xsZWN0aW9uU3RhdHM7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYSBwYXltZW50IHRva2VuLlxuICAgKiBAcGFyYW0gcXVlcnkgUXVlcnkgdG8gdXNlIGZvciBnZXR0aW5nIHRva2Vucy4gU2VlIHtAbGluayBPcGVuU2VhUGF5bWVudFRva2VuUXVlcnl9LlxuICAgKiBAcGFyYW0gbmV4dCBUaGUgY3Vyc29yIGZvciB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuIFRoaXMgaXMgcmV0dXJuZWQgZnJvbSBhIHByZXZpb3VzIHJlcXVlc3QuXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgT3BlblNlYVBheW1lbnRUb2tlbn0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRQYXltZW50VG9rZW4oXG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIGNoYWluID0gdGhpcy5jaGFpbixcbiAgKTogUHJvbWlzZTxPcGVuU2VhUGF5bWVudFRva2VuPiB7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHRoaXMuZ2V0PE9wZW5TZWFQYXltZW50VG9rZW4+KFxuICAgICAgZ2V0UGF5bWVudFRva2VuUGF0aChjaGFpbiwgYWRkcmVzcyksXG4gICAgKTtcbiAgICByZXR1cm4gcGF5bWVudFRva2VuRnJvbUpTT04oanNvbik7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYWNjb3VudCBmb3IgYW4gYWRkcmVzcy5cbiAgICogQHBhcmFtIHF1ZXJ5IFF1ZXJ5IHRvIHVzZSBmb3IgZ2V0dGluZyB0b2tlbnMuIFNlZSB7QGxpbmsgT3BlblNlYVBheW1lbnRUb2tlblF1ZXJ5fS5cbiAgICogQHBhcmFtIG5leHQgVGhlIGN1cnNvciBmb3IgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLiBUaGlzIGlzIHJldHVybmVkIGZyb20gYSBwcmV2aW91cyByZXF1ZXN0LlxuICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIEdldEFjY291bnRSZXNwb25zZX0gcmV0dXJuZWQgYnkgdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRBY2NvdW50KGFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8T3BlblNlYUFjY291bnQ+IHtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgdGhpcy5nZXQ8T3BlblNlYUFjY291bnQ+KGdldEFjY291bnRQYXRoKGFkZHJlc3MpKTtcbiAgICByZXR1cm4gYWNjb3VudEZyb21KU09OKGpzb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcmNlIHJlZnJlc2ggdGhlIG1ldGFkYXRhIGZvciBhbiBORlQuXG4gICAqIEBwYXJhbSBhZGRyZXNzIFRoZSBhZGRyZXNzIG9mIHRoZSBORlQncyBjb250cmFjdC5cbiAgICogQHBhcmFtIGlkZW50aWZpZXIgVGhlIGlkZW50aWZpZXIgb2YgdGhlIE5GVC5cbiAgICogQHBhcmFtIGNoYWluIFRoZSBjaGFpbiB3aGVyZSB0aGUgTkZUIGlzIGxvY2F0ZWQuXG4gICAqIEByZXR1cm5zIFRoZSByZXNwb25zZSBmcm9tIHRoZSBBUEkuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcmVmcmVzaE5GVE1ldGFkYXRhKFxuICAgIGFkZHJlc3M6IHN0cmluZyxcbiAgICBpZGVudGlmaWVyOiBzdHJpbmcsXG4gICAgY2hhaW46IENoYWluID0gdGhpcy5jaGFpbixcbiAgKTogUHJvbWlzZTxSZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wb3N0PFJlc3BvbnNlPihcbiAgICAgIGdldFJlZnJlc2hNZXRhZGF0YVBhdGgoY2hhaW4sIGFkZHJlc3MsIGlkZW50aWZpZXIpLFxuICAgICAge30sXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPZmZjaGFpbiBjYW5jZWwgYW4gb3JkZXIsIG9mZmVyIG9yIGxpc3RpbmcsIGJ5IGl0cyBvcmRlciBoYXNoIHdoZW4gcHJvdGVjdGVkIGJ5IHRoZSBTaWduZWRab25lLlxuICAgKiBQcm90b2NvbCBhbmQgQ2hhaW4gYXJlIHJlcXVpcmVkIHRvIHByZXZlbnQgaGFzaCBjb2xsaXNpb25zLlxuICAgKiBQbGVhc2Ugbm90ZSBjYW5jZWxsYXRpb24gaXMgb25seSBhc3N1cmVkIGlmIGEgZnVsZmlsbG1lbnQgc2lnbmF0dXJlIHdhcyBub3QgdmVuZGVkIHByaW9yIHRvIGNhbmNlbGxhdGlvbi5cbiAgICogQHBhcmFtIHByb3RvY29sQWRkcmVzcyBUaGUgU2VhcG9ydCBhZGRyZXNzIGZvciB0aGUgb3JkZXIuXG4gICAqIEBwYXJhbSBvcmRlckhhc2ggVGhlIG9yZGVyIGhhc2gsIG9yIGV4dGVybmFsIGlkZW50aWZpZXIsIG9mIHRoZSBvcmRlci5cbiAgICogQHBhcmFtIGNoYWluIFRoZSBjaGFpbiB3aGVyZSB0aGUgb3JkZXIgaXMgbG9jYXRlZC5cbiAgICogQHBhcmFtIG9mZmVyZXJTaWduYXR1cmUgQW4gRUlQLTcxMiBzaWduYXR1cmUgZnJvbSB0aGUgb2ZmZXJlciBvZiB0aGUgb3JkZXIuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRoaXMgaXMgbm90IHByb3ZpZGVkLCB0aGUgdXNlciBhc3NvY2lhdGVkIHdpdGggdGhlIEFQSSBLZXkgd2lsbCBiZSBjaGVja2VkIGluc3RlYWQuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBzaWduYXR1cmUgbXVzdCBiZSBhIEVJUC03MTIgc2lnbmF0dXJlIGNvbnNpc3Rpbmcgb2YgdGhlIG9yZGVyJ3MgU2VhcG9ydCBjb250cmFjdCdzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsIHZlcnNpb24sIGFkZHJlc3MsIGFuZCBjaGFpbi4gVGhlIHN0cnVjdCB0byBzaWduIGlzIGBPcmRlckhhc2hgIGNvbnRhaW5pbmcgYVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGUgYnl0ZXMzMiBmaWVsZC5cbiAgICogQHJldHVybnMgVGhlIHJlc3BvbnNlIGZyb20gdGhlIEFQSS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBvZmZjaGFpbkNhbmNlbE9yZGVyKFxuICAgIHByb3RvY29sQWRkcmVzczogc3RyaW5nLFxuICAgIG9yZGVySGFzaDogc3RyaW5nLFxuICAgIGNoYWluOiBDaGFpbiA9IHRoaXMuY2hhaW4sXG4gICAgb2ZmZXJlclNpZ25hdHVyZT86IHN0cmluZyxcbiAgKTogUHJvbWlzZTxDYW5jZWxPcmRlclJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnBvc3Q8Q2FuY2VsT3JkZXJSZXNwb25zZT4oXG4gICAgICBnZXRDYW5jZWxPcmRlclBhdGgoY2hhaW4sIHByb3RvY29sQWRkcmVzcywgb3JkZXJIYXNoKSxcbiAgICAgIHsgb2ZmZXJlclNpZ25hdHVyZSB9LFxuICAgICk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyaWMgZmV0Y2ggbWV0aG9kIGZvciBhbnkgQVBJIGVuZHBvaW50XG4gICAqIEBwYXJhbSBhcGlQYXRoIFBhdGggdG8gVVJMIGVuZHBvaW50IHVuZGVyIEFQSVxuICAgKiBAcGFyYW0gcXVlcnkgVVJMIHF1ZXJ5IHBhcmFtcy4gV2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QuXG4gICAqIEByZXR1cm5zIEB0eXBlUGFyYW0gVCBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgQVBJLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldDxUPihhcGlQYXRoOiBzdHJpbmcsIHF1ZXJ5OiBvYmplY3QgPSB7fSk6IFByb21pc2U8VD4ge1xuICAgIGNvbnN0IHFzID0gdGhpcy5vYmplY3RUb1NlYXJjaFBhcmFtcyhxdWVyeSk7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5hcGlCYXNlVXJsfSR7YXBpUGF0aH0/JHtxc31gO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9mZXRjaCh1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyaWMgcG9zdCBtZXRob2QgZm9yIGFueSBBUEkgZW5kcG9pbnQuXG4gICAqIEBwYXJhbSBhcGlQYXRoIFBhdGggdG8gVVJMIGVuZHBvaW50IHVuZGVyIEFQSVxuICAgKiBAcGFyYW0gYm9keSBEYXRhIHRvIHNlbmQuXG4gICAqIEBwYXJhbSBvcHRzIGV0aGVycyBDb25uZWN0aW9uSW5mbywgc2ltaWxhciB0byBGZXRjaCBBUEkuXG4gICAqIEByZXR1cm5zIEB0eXBlUGFyYW0gVCBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgQVBJLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIHBvc3Q8VD4oXG4gICAgYXBpUGF0aDogc3RyaW5nLFxuICAgIGJvZHk/OiBvYmplY3QsXG4gICAgb3B0cz86IG9iamVjdCxcbiAgKTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5hcGlCYXNlVXJsfSR7YXBpUGF0aH1gO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9mZXRjaCh1cmwsIG9wdHMsIGJvZHkpO1xuICB9XG5cbiAgcHJpdmF0ZSBvYmplY3RUb1NlYXJjaFBhcmFtcyhwYXJhbXM6IG9iamVjdCA9IHt9KSB7XG4gICAgY29uc3QgdXJsU2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuXG4gICAgT2JqZWN0LmVudHJpZXMocGFyYW1zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmICh2YWx1ZSAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiBpdGVtICYmIHVybFNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCBpdGVtKSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgIHVybFNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXJsU2VhcmNoUGFyYW1zLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGZyb20gYW4gQVBJIEVuZHBvaW50LCBzZW5kaW5nIGF1dGggdG9rZW4gaW4gaGVhZGVyc1xuICAgKiBAcGFyYW0gb3B0cyBldGhlcnMgQ29ubmVjdGlvbkluZm8sIHNpbWlsYXIgdG8gRmV0Y2ggQVBJXG4gICAqIEBwYXJhbSBib2R5IE9wdGlvbmFsIGJvZHkgdG8gc2VuZC4gSWYgc2V0LCB3aWxsIFBPU1QsIG90aGVyd2lzZSBHRVRcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgX2ZldGNoKHVybDogc3RyaW5nLCBoZWFkZXJzPzogb2JqZWN0LCBib2R5Pzogb2JqZWN0KSB7XG4gICAgLy8gQ3JlYXRlIHRoZSBmZXRjaCByZXF1ZXN0XG4gICAgY29uc3QgcmVxID0gbmV3IGV0aGVycy5GZXRjaFJlcXVlc3QodXJsKTtcblxuICAgIC8vIFNldCB0aGUgaGVhZGVyc1xuICAgIGhlYWRlcnMgPSB7XG4gICAgICBcIngtYXBwLWlkXCI6IFwib3BlbnNlYS1qc1wiLFxuICAgICAgLi4uKHRoaXMuYXBpS2V5ID8geyBcIlgtQVBJLUtFWVwiOiB0aGlzLmFwaUtleSB9IDoge30pLFxuICAgICAgLi4uaGVhZGVycyxcbiAgICB9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGhlYWRlcnMpKSB7XG4gICAgICByZXEuc2V0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8vIFNldCB0aGUgYm9keSBpZiBwcm92aWRlZFxuICAgIGlmIChib2R5KSB7XG4gICAgICByZXEuYm9keSA9IGJvZHk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSB0aHJvdHRsZSBwYXJhbXNcbiAgICAvLyAtIFNob3VsZCBiZSBhYmxlIHRvIHJlcGxhY2UgdGhpcyByZXRyeUZ1bmMgd2l0aCBgc2V0VGhyb3R0bGVQYXJhbXMoeyBzbG90SW50ZXJ2YWw6IDEwMDAgfSlgXG4gICAgLy8gICB3aGVuIHRoaXMgYnVnIGlzIGZpeGVkIGluIGV0aGVyczogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVycy1pby9ldGhlcnMuanMvaXNzdWVzLzQ2NjNcbiAgICByZXEucmV0cnlGdW5jID0gYXN5bmMgKF9yZXEsIHJlc3AsIGF0dGVtcHQpID0+IHtcbiAgICAgIHRoaXMubG9nZ2VyKFxuICAgICAgICBgRmV0Y2ggYXR0ZW1wdCAke2F0dGVtcHR9IGZhaWxlZCB3aXRoIHN0YXR1cyAke3Jlc3Auc3RhdHVzQ29kZX1gLFxuICAgICAgKTtcbiAgICAgIC8vIFdhaXQgMXMgYmV0d2VlbiB0cmllc1xuICAgICAgYXdhaXQgc3RhbGwoMTAwMCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy5sb2dnZXIoXG4gICAgICBgU2VuZGluZyByZXF1ZXN0OiAke3VybH0gJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHJlcXVlc3Q6IHJlcSxcbiAgICAgICAgaGVhZGVyczogcmVxLmhlYWRlcnMsXG4gICAgICB9KX1gLFxuICAgICk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcS5zZW5kKCk7XG4gICAgaWYgKCFyZXNwb25zZS5vaygpKSB7XG4gICAgICAvLyBJZiBhbiBlcnJvcnMgYXJyYXkgaXMgcmV0dXJuZWQsIHRocm93IHdpdGggdGhlIGVycm9yIG1lc3NhZ2VzLlxuICAgICAgY29uc3QgZXJyb3JzID0gcmVzcG9uc2UuYm9keUpzb24/LmVycm9ycztcbiAgICAgIGlmIChlcnJvcnM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGVycm9ycy5qb2luKFwiLCBcIik7XG4gICAgICAgIGlmIChlcnJvck1lc3NhZ2UgPT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShlcnJvcnMpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgU2VydmVyIEVycm9yOiAke2Vycm9yTWVzc2FnZX1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgbGV0IGV0aGVycyB0aHJvdyBhIFNFUlZFUl9FUlJPUiBzaW5jZSBpdCB3aWxsIGluY2x1ZGVcbiAgICAgICAgLy8gbW9yZSBjb250ZXh0IGFib3V0IHRoZSByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAgICAgICAgcmVzcG9uc2UuYXNzZXJ0T2soKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlLmJvZHlKc29uO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiIwM3dEQWdGSztBQUFBQSxjQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELGNBQUEsR0FBQUEsY0FBQSxHQUFBRSxDQUFBLE0sMkdBaEZMLE1BQUFDLFFBQUEsRUFBQUgsY0FBQSxHQUFBRSxDQUFBLE1BQUFFLE9BQUEsWUFDQSxNQUFBQyxVQUFBLEVBQUFMLGNBQUEsR0FBQUUsQ0FBQSxNQUFBRSxPQUFBLGdCQXNCQSxNQUFBRSxPQUFBLEVBQUFOLGNBQUEsR0FBQUUsQ0FBQSxNQUFBRSxPQUFBLGFBaUJBLE1BQUFHLFdBQUEsRUFBQVAsY0FBQSxHQUFBRSxDQUFBLE1BQUFFLE9BQUEsa0JBVUEsTUFBQUksT0FBQSxFQUFBUixjQUFBLEdBQUFFLENBQUEsTUFBQUUsT0FBQSxxQkFTQSxNQUFBSyxPQUFBLEVBQUFULGNBQUEsR0FBQUUsQ0FBQSxNQUFBRSxPQUFBLGNBU0EsTUFBQU0sT0FBQSxFQUFBVixjQUFBLEdBQUFFLENBQUEsTUFBQUUsT0FBQSxvQkFPQSxRQUFTLENBQUFPLEtBQUtBLENBQUNDLFFBQWdCLEVBQUFaLGNBQUEsR0FBQWEsQ0FBQSxN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