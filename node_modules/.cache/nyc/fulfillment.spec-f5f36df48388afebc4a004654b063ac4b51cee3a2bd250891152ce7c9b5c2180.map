{"version":3,"file":"/Users/rg/dev/opensea-js/test/api/fulfillment.spec.ts","sources":["/Users/rg/dev/opensea-js/test/api/fulfillment.spec.ts"],"names":[],"mappings":";;AAAA,0BAAwB;AACxB,+BAA8B;AAC9B,iCAAoC;AACpC,2CAA4C;AAC5C,kDAA6C;AAE7C,IAAA,aAAK,EAAC,6BAA6B,EAAE,GAAG,EAAE;IACxC,IAAA,YAAI,EAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,KAAK,GAAG,MAAM,mBAAO,CAAC,QAAQ,CAAC;YACnC,QAAQ,EAAE,SAAS;YACnB,IAAI,EAAE,iBAAS,CAAC,OAAO;SACxB,CAAC,CAAC;QAEH,IAAI,KAAK,CAAC,SAAS,IAAI,IAAI,EAAE,CAAC;YAC5B,OAAO;QACT,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,mBAAO,CAAC,uBAAuB,CACvD,4CAA4C,EAC5C,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,eAAe,EACrB,KAAK,CAAC,IAAI,CACX,CAAC;QAEF,aAAM,CAAC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,IAAA,YAAI,EAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,KAAK,GAAG,MAAM,mBAAO,CAAC,QAAQ,CAAC;YACnC,QAAQ,EAAE,SAAS;YACnB,IAAI,EAAE,iBAAS,CAAC,KAAK;SACtB,CAAC,CAAC;QAEH,IAAI,KAAK,CAAC,SAAS,IAAI,IAAI,EAAE,CAAC;YAC5B,OAAO;QACT,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,mBAAO,CAAC,uBAAuB,CACvD,4CAA4C,EAC5C,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,eAAe,EACrB,KAAK,CAAC,IAAI,CACX,CAAC;QAEF,aAAM,CAAC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import \"../utils/setup\";\nimport { assert } from \"chai\";\nimport { suite, test } from \"mocha\";\nimport { OrderSide } from \"../../src/types\";\nimport { mainAPI } from \"../utils/constants\";\n\nsuite(\"Generating fulfillment data\", () => {\n  test(`Generate fulfillment data for listing`, async () => {\n    const order = await mainAPI.getOrder({\n      protocol: \"seaport\",\n      side: OrderSide.LISTING,\n    });\n\n    if (order.orderHash == null) {\n      return;\n    }\n\n    const fulfillment = await mainAPI.generateFulfillmentData(\n      \"0x000000000000000000000000000000000000dEaD\",\n      order.orderHash,\n      order.protocolAddress,\n      order.side,\n    );\n\n    assert.exists(fulfillment.fulfillment_data.orders[0].signature);\n  });\n\n  test(`Generate fulfillment data for offer`, async () => {\n    const order = await mainAPI.getOrder({\n      protocol: \"seaport\",\n      side: OrderSide.OFFER,\n    });\n\n    if (order.orderHash == null) {\n      return;\n    }\n\n    const fulfillment = await mainAPI.generateFulfillmentData(\n      \"0x000000000000000000000000000000000000dEaD\",\n      order.orderHash,\n      order.protocolAddress,\n      order.side,\n    );\n\n    assert.exists(fulfillment.fulfillment_data.orders[0].signature);\n  });\n});\n"]}