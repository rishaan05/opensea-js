"use strict";function cov_i250qerm0(){var path="/Users/rg/dev/opensea-js/src/sdk.ts";var hash="5d9dffef3dd528b19cd97ec9511ffb4f4e65b362";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/src/sdk.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:28}},"2":{start:{line:4,column:21},end:{line:4,column:38}},"3":{start:{line:5,column:21},end:{line:5,column:51}},"4":{start:{line:6,column:20},end:{line:6,column:64}},"5":{start:{line:7,column:17},end:{line:7,column:34}},"6":{start:{line:8,column:14},end:{line:8,column:34}},"7":{start:{line:9,column:20},end:{line:9,column:42}},"8":{start:{line:10,column:26},end:{line:10,column:61}},"9":{start:{line:11,column:16},end:{line:11,column:41}},"10":{start:{line:12,column:16},end:{line:12,column:41}},"11":{start:{line:13,column:20},end:{line:13,column:52}},"12":{start:{line:14,column:16},end:{line:14,column:34}},"13":{start:{line:15,column:16},end:{line:15,column:40}},"14":{start:{line:31,column:8},end:{line:31,column:46}},"15":{start:{line:32,column:8},end:{line:34,column:10}},"16":{start:{line:33,column:12},end:{line:33,column:89}},"17":{start:{line:36,column:8},end:{line:36,column:69}},"18":{start:{line:37,column:8},end:{line:37,column:37}},"19":{start:{line:38,column:8},end:{line:38,column:51}},"20":{start:{line:39,column:8},end:{line:40,column:30}},"21":{start:{line:41,column:8},end:{line:41,column:67}},"22":{start:{line:43,column:8},end:{line:49,column:11}},"23":{start:{line:51,column:8},end:{line:53,column:11}},"24":{start:{line:55,column:8},end:{line:55,column:43}},"25":{start:{line:57,column:8},end:{line:57,column:47}},"26":{start:{line:57,column:42},end:{line:57,column:45}},"27":{start:{line:59,column:8},end:{line:71,column:9}},"28":{start:{line:60,column:32},end:{line:60,column:85}},"29":{start:{line:61,column:12},end:{line:61,column:63}},"30":{start:{line:65,column:12},end:{line:70,column:13}},"31":{start:{line:69,column:16},end:{line:69,column:37}},"32":{start:{line:80,column:8},end:{line:85,column:9}},"33":{start:{line:81,column:12},end:{line:81,column:48}},"34":{start:{line:84,column:12},end:{line:84,column:55}},"35":{start:{line:93,column:8},end:{line:93,column:54}},"36":{start:{line:101,column:8},end:{line:101,column:48}},"37":{start:{line:111,column:8},end:{line:111,column:62}},"38":{start:{line:112,column:22},end:{line:112,column:102}},"39":{start:{line:113,column:8},end:{line:113,column:85}},"40":{start:{line:114,column:29},end:{line:114,column:147}},"41":{start:{line:115,column:8},end:{line:122,column:9}},"42":{start:{line:116,column:32},end:{line:116,column:69}},"43":{start:{line:117,column:12},end:{line:117,column:104}},"44":{start:{line:120,column:12},end:{line:120,column:33}},"45":{start:{line:121,column:12},end:{line:121,column:91}},"46":{start:{line:132,column:8},end:{line:132,column:62}},"47":{start:{line:133,column:23},end:{line:133,column:103}},"48":{start:{line:134,column:8},end:{line:134,column:81}},"49":{start:{line:135,column:29},end:{line:135,column:155}},"50":{start:{line:136,column:8},end:{line:143,column:9}},"51":{start:{line:137,column:32},end:{line:137,column:67}},"52":{start:{line:138,column:12},end:{line:138,column:111}},"53":{start:{line:141,column:12},end:{line:141,column:33}},"54":{start:{line:142,column:12},end:{line:142,column:91}},"55":{start:{line:146,column:29},end:{line:146,column:44}},"56":{start:{line:147,column:8},end:{line:149,column:9}},"57":{start:{line:148,column:12},end:{line:148,column:74}},"58":{start:{line:148,column:60},end:{line:148,column:72}},"59":{start:{line:150,column:42},end:{line:150,column:94}},"60":{start:{line:151,column:34},end:{line:151,column:93}},"61":{start:{line:152,column:37},end:{line:159,column:9}},"62":{start:{line:153,column:12},end:{line:158,column:14}},"63":{start:{line:160,column:35},end:{line:160,column:37}},"64":{start:{line:161,column:8},end:{line:163,column:9}},"65":{start:{line:162,column:12},end:{line:162,column:85}},"66":{start:{line:164,column:8},end:{line:166,column:9}},"67":{start:{line:165,column:12},end:{line:165,column:110}},"68":{start:{line:167,column:8},end:{line:167,column:34}},"69":{start:{line:170,column:8},end:{line:175,column:12}},"70":{start:{line:170,column:41},end:{line:175,column:9}},"71":{start:{line:197,column:8},end:{line:197,column:62}},"72":{start:{line:198,column:24},end:{line:198,column:80}},"73":{start:{line:199,column:40},end:{line:199,column:88}},"74":{start:{line:200,column:30},end:{line:200,column:182}},"75":{start:{line:201,column:27},end:{line:201,column:71}},"76":{start:{line:202,column:38},end:{line:207,column:10}},"77":{start:{line:208,column:19},end:{line:208,column:43}},"78":{start:{line:209,column:8},end:{line:211,column:9}},"79":{start:{line:210,column:12},end:{line:210,column:43}},"80":{start:{line:212,column:38},end:{line:228,column:26}},"81":{start:{line:229,column:22},end:{line:229,column:47}},"82":{start:{line:230,column:8},end:{line:234,column:11}},"83":{start:{line:260,column:8},end:{line:260,column:62}},"84":{start:{line:261,column:24},end:{line:261,column:80}},"85":{start:{line:262,column:32},end:{line:262,column:80}},"86":{start:{line:263,column:8},end:{line:265,column:9}},"87":{start:{line:264,column:12},end:{line:264,column:89}},"88":{start:{line:266,column:40},end:{line:266,column:216}},"89":{start:{line:267,column:27},end:{line:267,column:71}},"90":{start:{line:268,column:38},end:{line:275,column:10}},"91":{start:{line:276,column:8},end:{line:278,column:9}},"92":{start:{line:277,column:12},end:{line:277,column:129}},"93":{start:{line:279,column:19},end:{line:279,column:43}},"94":{start:{line:280,column:8},end:{line:290,column:9}},"95":{start:{line:281,column:12},end:{line:286,column:13}},"96":{start:{line:282,column:16},end:{line:282,column:65}},"97":{start:{line:285,column:16},end:{line:285,column:65}},"98":{start:{line:288,column:13},end:{line:290,column:9}},"99":{start:{line:289,column:12},end:{line:289,column:43}},"100":{start:{line:291,column:38},end:{line:302,column:26}},"101":{start:{line:303,column:22},end:{line:303,column:47}},"102":{start:{line:304,column:8},end:{line:308,column:11}},"103":{start:{line:328,column:8},end:{line:328,column:62}},"104":{start:{line:329,column:27},end:{line:329,column:71}},"105":{start:{line:330,column:33},end:{line:330,column:147}},"106":{start:{line:331,column:21},end:{line:331,column:72}},"107":{start:{line:332,column:43},end:{line:337,column:9}},"108":{start:{line:338,column:30},end:{line:338,column:177}},"109":{start:{line:339,column:38},end:{line:345,column:10}},"110":{start:{line:346,column:35},end:{line:349,column:9}},"111":{start:{line:350,column:24},end:{line:366,column:9}},"112":{start:{line:367,column:38},end:{line:367,column:98}},"113":{start:{line:368,column:22},end:{line:368,column:47}},"114":{start:{line:369,column:8},end:{line:369,column:90}},"115":{start:{line:382,column:8},end:{line:384,column:9}},"116":{start:{line:383,column:12},end:{line:383,column:90}},"117":{start:{line:385,column:29},end:{line:385,column:128}},"118":{start:{line:386,column:29},end:{line:386,column:101}},"119":{start:{line:387,column:24},end:{line:387,column:62}},"120":{start:{line:388,column:28},end:{line:399,column:23}},"121":{start:{line:400,column:35},end:{line:400,column:59}},"122":{start:{line:401,column:8},end:{line:403,column:9}},"123":{start:{line:402,column:12},end:{line:402,column:59}},"124":{start:{line:404,column:8},end:{line:404,column:115}},"125":{start:{line:405,column:8},end:{line:405,column:39}},"126":{start:{line:422,column:8},end:{line:422,column:62}},"127":{start:{line:423,column:32},end:{line:423,column:79}},"128":{start:{line:424,column:8},end:{line:424,column:59}},"129":{start:{line:425,column:26},end:{line:425,column:61}},"130":{start:{line:426,column:21},end:{line:429,column:40}},"131":{start:{line:430,column:24},end:{line:430,column:33}},"132":{start:{line:431,column:29},end:{line:431,column:70}},"133":{start:{line:432,column:8},end:{line:442,column:9}},"134":{start:{line:433,column:27},end:{line:433,column:115}},"135":{start:{line:436,column:30},end:{line:436,column:76}},"136":{start:{line:437,column:12},end:{line:439,column:13}},"137":{start:{line:438,column:16},end:{line:438,column:58}},"138":{start:{line:440,column:30},end:{line:440,column:73}},"139":{start:{line:441,column:12},end:{line:441,column:47}},"140":{start:{line:443,column:33},end:{line:443,column:73}},"141":{start:{line:444,column:8},end:{line:454,column:9}},"142":{start:{line:445,column:12},end:{line:447,column:13}},"143":{start:{line:446,column:16},end:{line:446,column:97}},"144":{start:{line:448,column:12},end:{line:453,column:15}},"145":{start:{line:455,column:24},end:{line:455,column:56}},"146":{start:{line:456,column:38},end:{line:463,column:10}},"147":{start:{line:464,column:28},end:{line:464,column:53}},"148":{start:{line:465,column:32},end:{line:465,column:82}},"149":{start:{line:466,column:8},end:{line:468,column:9}},"150":{start:{line:467,column:12},end:{line:467,column:56}},"151":{start:{line:469,column:8},end:{line:469,column:107}},"152":{start:{line:470,column:8},end:{line:470,column:31}},"153":{start:{line:477,column:43},end:{line:477,column:86}},"154":{start:{line:478,column:8},end:{line:485,column:9}},"155":{start:{line:480,column:16},end:{line:480,column:41}},"156":{start:{line:482,column:16},end:{line:482,column:41}},"157":{start:{line:484,column:16},end:{line:484,column:84}},"158":{start:{line:498,column:24},end:{line:498,column:56}},"159":{start:{line:499,column:28},end:{line:501,column:23}},"160":{start:{line:502,column:8},end:{line:502,column:32}},"161":{start:{line:515,column:8},end:{line:515,column:62}},"162":{start:{line:516,column:8},end:{line:516,column:65}},"163":{start:{line:517,column:8},end:{line:517,column:90}},"164":{start:{line:519,column:32},end:{line:524,column:10}},"165":{start:{line:526,column:8},end:{line:526,column:107}},"166":{start:{line:538,column:8},end:{line:538,column:79}},"167":{start:{line:553,column:8},end:{line:553,column:65}},"168":{start:{line:554,column:24},end:{line:554,column:62}},"169":{start:{line:555,column:8},end:{line:566,column:9}},"170":{start:{line:556,column:28},end:{line:558,column:29}},"171":{start:{line:559,column:12},end:{line:559,column:29}},"172":{start:{line:562,column:12},end:{line:564,column:13}},"173":{start:{line:563,column:16},end:{line:563,column:29}},"174":{start:{line:565,column:12},end:{line:565,column:24}},"175":{start:{line:578,column:8},end:{line:607,column:9}},"176":{start:{line:580,column:33},end:{line:580,column:102}},"177":{start:{line:581,column:16},end:{line:581,column:75}},"178":{start:{line:584,column:16},end:{line:586,column:17}},"179":{start:{line:585,column:20},end:{line:585,column:78}},"180":{start:{line:587,column:33},end:{line:587,column:104}},"181":{start:{line:588,column:16},end:{line:588,column:90}},"182":{start:{line:591,column:16},end:{line:593,column:17}},"183":{start:{line:592,column:20},end:{line:592,column:77}},"184":{start:{line:594,column:33},end:{line:594,column:103}},"185":{start:{line:595,column:16},end:{line:603,column:17}},"186":{start:{line:596,column:34},end:{line:596,column:82}},"187":{start:{line:597,column:20},end:{line:597,column:87}},"188":{start:{line:601,column:20},end:{line:601,column:91}},"189":{start:{line:602,column:20},end:{line:602,column:30}},"190":{start:{line:606,column:16},end:{line:606,column:77}},"191":{start:{line:619,column:8},end:{line:619,column:59}},"192":{start:{line:620,column:8},end:{line:620,column:56}},"193":{start:{line:622,column:8},end:{line:652,column:9}},"194":{start:{line:624,column:16},end:{line:626,column:17}},"195":{start:{line:625,column:20},end:{line:625,column:73}},"196":{start:{line:627,column:33},end:{line:627,column:111}},"197":{start:{line:628,column:16},end:{line:628,column:78}},"198":{start:{line:629,column:16},end:{line:629,column:22}},"199":{start:{line:632,column:16},end:{line:634,column:17}},"200":{start:{line:633,column:20},end:{line:633,column:76}},"201":{start:{line:635,column:16},end:{line:637,column:17}},"202":{start:{line:636,column:20},end:{line:636,column:75}},"203":{start:{line:638,column:33},end:{line:638,column:113}},"204":{start:{line:639,column:16},end:{line:639,column:118}},"205":{start:{line:640,column:16},end:{line:640,column:22}},"206":{start:{line:643,column:16},end:{line:645,column:17}},"207":{start:{line:644,column:20},end:{line:644,column:75}},"208":{start:{line:646,column:33},end:{line:646,column:112}},"209":{start:{line:647,column:16},end:{line:647,column:102}},"210":{start:{line:648,column:16},end:{line:648,column:22}},"211":{start:{line:651,column:16},end:{line:651,column:75}},"212":{start:{line:653,column:8},end:{line:663,column:9}},"213":{start:{line:654,column:40},end:{line:654,column:57}},"214":{start:{line:655,column:12},end:{line:655,column:119}},"215":{start:{line:658,column:12},end:{line:658,column:33}},"216":{start:{line:659,column:12},end:{line:662,column:15}},"217":{start:{line:676,column:8},end:{line:676,column:67}},"218":{start:{line:677,column:8},end:{line:677,column:65}},"219":{start:{line:678,column:8},end:{line:681,column:11}},"220":{start:{line:682,column:24},end:{line:682,column:62}},"221":{start:{line:683,column:28},end:{line:685,column:23}},"222":{start:{line:686,column:8},end:{line:686,column:108}},"223":{start:{line:687,column:8},end:{line:687,column:32}},"224":{start:{line:698,column:8},end:{line:698,column:50}},"225":{start:{line:699,column:24},end:{line:699,column:68}},"226":{start:{line:700,column:23},end:{line:700,column:25}},"227":{start:{line:701,column:8},end:{line:710,column:9}},"228":{start:{line:702,column:12},end:{line:709,column:13}},"229":{start:{line:703,column:16},end:{line:703,column:74}},"230":{start:{line:706,column:37},end:{line:706,column:81}},"231":{start:{line:707,column:16},end:{line:707,column:87}},"232":{start:{line:708,column:16},end:{line:708,column:49}},"233":{start:{line:711,column:31},end:{line:711,column:91}},"234":{start:{line:712,column:29},end:{line:714,column:23}},"235":{start:{line:715,column:29},end:{line:715,column:92}},"236":{start:{line:716,column:26},end:{line:716,column:40}},"237":{start:{line:717,column:25},end:{line:717,column:37}},"238":{start:{line:719,column:8},end:{line:721,column:9}},"239":{start:{line:720,column:12},end:{line:720,column:68}},"240":{start:{line:722,column:8},end:{line:724,column:9}},"241":{start:{line:723,column:12},end:{line:723,column:79}},"242":{start:{line:725,column:8},end:{line:727,column:9}},"243":{start:{line:726,column:12},end:{line:726,column:88}},"244":{start:{line:728,column:8},end:{line:730,column:9}},"245":{start:{line:729,column:12},end:{line:729,column:90}},"246":{start:{line:731,column:8},end:{line:731,column:39}},"247":{start:{line:734,column:8},end:{line:734,column:40}},"248":{start:{line:741,column:42},end:{line:741,column:84}},"249":{start:{line:742,column:34},end:{line:742,column:36}},"250":{start:{line:743,column:8},end:{line:749,column:9}},"251":{start:{line:744,column:12},end:{line:744,column:67}},"252":{start:{line:746,column:13},end:{line:749,column:9}},"253":{start:{line:747,column:30},end:{line:747,column:103}},"254":{start:{line:747,column:90},end:{line:747,column:102}},"255":{start:{line:748,column:12},end:{line:748,column:49}},"256":{start:{line:750,column:8},end:{line:752,column:9}},"257":{start:{line:751,column:12},end:{line:751,column:19}},"258":{start:{line:753,column:8},end:{line:753,column:219}},"259":{start:{line:762,column:37},end:{line:762,column:63}},"260":{start:{line:763,column:8},end:{line:763,column:59}},"261":{start:{line:764,column:8},end:{line:777,column:9}},"262":{start:{line:765,column:12},end:{line:765,column:87}},"263":{start:{line:766,column:12},end:{line:766,column:68}},"264":{start:{line:767,column:12},end:{line:767,column:65}},"265":{start:{line:768,column:12},end:{line:768,column:89}},"266":{start:{line:771,column:12},end:{line:771,column:62}},"267":{start:{line:772,column:12},end:{line:775,column:15}},"268":{start:{line:776,column:12},end:{line:776,column:24}},"269":{start:{line:780,column:0},end:{line:780,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:58},end:{line:72,column:5}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:32,column:47},end:{line:32,column:48}},loc:{start:{line:32,column:72},end:{line:34,column:9}},line:32},"2":{name:"(anonymous_2)",decl:{start:{line:57,column:33},end:{line:57,column:34}},loc:{start:{line:57,column:42},end:{line:57,column:45}},line:57},"3":{name:"(anonymous_3)",decl:{start:{line:79,column:4},end:{line:79,column:5}},loc:{start:{line:79,column:47},end:{line:86,column:5}},line:79},"4":{name:"(anonymous_4)",decl:{start:{line:92,column:4},end:{line:92,column:5}},loc:{start:{line:92,column:36},end:{line:94,column:5}},line:92},"5":{name:"(anonymous_5)",decl:{start:{line:100,column:4},end:{line:100,column:5}},loc:{start:{line:100,column:30},end:{line:102,column:5}},line:100},"6":{name:"(anonymous_6)",decl:{start:{line:110,column:4},end:{line:110,column:5}},loc:{start:{line:110,column:52},end:{line:123,column:5}},line:110},"7":{name:"(anonymous_7)",decl:{start:{line:131,column:4},end:{line:131,column:5}},loc:{start:{line:131,column:55},end:{line:144,column:5}},line:131},"8":{name:"(anonymous_8)",decl:{start:{line:145,column:4},end:{line:145,column:5}},loc:{start:{line:145,column:116},end:{line:168,column:5}},line:145},"9":{name:"(anonymous_9)",decl:{start:{line:148,column:51},end:{line:148,column:52}},loc:{start:{line:148,column:60},end:{line:148,column:72}},line:148},"10":{name:"(anonymous_10)",decl:{start:{line:152,column:37},end:{line:152,column:38}},loc:{start:{line:152,column:65},end:{line:159,column:9}},line:152},"11":{name:"(anonymous_11)",decl:{start:{line:169,column:4},end:{line:169,column:5}},loc:{start:{line:169,column:39},end:{line:176,column:5}},line:169},"12":{name:"(anonymous_12)",decl:{start:{line:170,column:24},end:{line:170,column:25}},loc:{start:{line:170,column:41},end:{line:175,column:9}},line:170},"13":{name:"(anonymous_13)",decl:{start:{line:196,column:4},end:{line:196,column:5}},loc:{start:{line:196,column:206},end:{line:235,column:5}},line:196},"14":{name:"(anonymous_14)",decl:{start:{line:259,column:4},end:{line:259,column:5}},loc:{start:{line:259,column:250},end:{line:309,column:5}},line:259},"15":{name:"(anonymous_15)",decl:{start:{line:327,column:4},end:{line:327,column:5}},loc:{start:{line:327,column:270},end:{line:370,column:5}},line:327},"16":{name:"(anonymous_16)",decl:{start:{line:381,column:4},end:{line:381,column:5}},loc:{start:{line:381,column:77},end:{line:406,column:5}},line:381},"17":{name:"(anonymous_17)",decl:{start:{line:421,column:4},end:{line:421,column:5}},loc:{start:{line:421,column:88},end:{line:471,column:5}},line:421},"18":{name:"(anonymous_18)",decl:{start:{line:476,column:4},end:{line:476,column:5}},loc:{start:{line:476,column:32},end:{line:486,column:5}},line:476},"19":{name:"(anonymous_19)",decl:{start:{line:497,column:4},end:{line:497,column:5}},loc:{start:{line:497,column:138},end:{line:503,column:5}},line:497},"20":{name:"(anonymous_20)",decl:{start:{line:514,column:4},end:{line:514,column:5}},loc:{start:{line:514,column:58},end:{line:527,column:5}},line:514},"21":{name:"(anonymous_21)",decl:{start:{line:537,column:4},end:{line:537,column:5}},loc:{start:{line:537,column:78},end:{line:539,column:5}},line:537},"22":{name:"(anonymous_22)",decl:{start:{line:552,column:4},end:{line:552,column:5}},loc:{start:{line:552,column:57},end:{line:567,column:5}},line:552},"23":{name:"(anonymous_23)",decl:{start:{line:577,column:4},end:{line:577,column:5}},loc:{start:{line:577,column:49},end:{line:608,column:5}},line:577},"24":{name:"(anonymous_24)",decl:{start:{line:618,column:4},end:{line:618,column:5}},loc:{start:{line:618,column:74},end:{line:664,column:5}},line:618},"25":{name:"(anonymous_25)",decl:{start:{line:675,column:4},end:{line:675,column:5}},loc:{start:{line:675,column:38},end:{line:688,column:5}},line:675},"26":{name:"(anonymous_26)",decl:{start:{line:697,column:4},end:{line:697,column:5}},loc:{start:{line:697,column:95},end:{line:732,column:5}},line:697},"27":{name:"(anonymous_27)",decl:{start:{line:733,column:4},end:{line:733,column:5}},loc:{start:{line:733,column:27},end:{line:735,column:5}},line:733},"28":{name:"(anonymous_28)",decl:{start:{line:740,column:4},end:{line:740,column:5}},loc:{start:{line:740,column:53},end:{line:754,column:5}},line:740},"29":{name:"(anonymous_29)",decl:{start:{line:747,column:80},end:{line:747,column:81}},loc:{start:{line:747,column:90},end:{line:747,column:102}},line:747},"30":{name:"(anonymous_30)",decl:{start:{line:761,column:4},end:{line:761,column:5}},loc:{start:{line:761,column:67},end:{line:778,column:5}},line:761}},branchMap:{"0":{loc:{start:{line:29,column:34},end:{line:29,column:48}},type:"default-arg",locations:[{start:{line:29,column:46},end:{line:29,column:48}}],line:29},"1":{loc:{start:{line:36,column:8},end:{line:36,column:68}},type:"binary-expr",locations:[{start:{line:36,column:8},end:{line:36,column:23}},{start:{line:36,column:28},end:{line:36,column:67}}],line:36},"2":{loc:{start:{line:39,column:25},end:{line:40,column:28}},type:"binary-expr",locations:[{start:{line:39,column:25},end:{line:39,column:50}},{start:{line:40,column:12},end:{line:40,column:28}}],line:39},"3":{loc:{start:{line:41,column:33},end:{line:41,column:66}},type:"binary-expr",locations:[{start:{line:41,column:33},end:{line:41,column:49}},{start:{line:41,column:53},end:{line:41,column:66}}],line:41},"4":{loc:{start:{line:57,column:22},end:{line:57,column:46}},type:"binary-expr",locations:[{start:{line:57,column:22},end:{line:57,column:28}},{start:{line:57,column:33},end:{line:57,column:45}}],line:57},"5":{loc:{start:{line:65,column:12},end:{line:70,column:13}},type:"if",locations:[{start:{line:65,column:12},end:{line:70,column:13}},{start:{line:65,column:12},end:{line:70,column:13}}],line:65},"6":{loc:{start:{line:79,column:33},end:{line:79,column:45}},type:"default-arg",locations:[{start:{line:79,column:40},end:{line:79,column:45}}],line:79},"7":{loc:{start:{line:80,column:8},end:{line:85,column:9}},type:"if",locations:[{start:{line:80,column:8},end:{line:85,column:9}},{start:{line:80,column:8},end:{line:85,column:9}}],line:80},"8":{loc:{start:{line:147,column:8},end:{line:149,column:9}},type:"if",locations:[{start:{line:147,column:8},end:{line:149,column:9}},{start:{line:147,column:8},end:{line:149,column:9}}],line:147},"9":{loc:{start:{line:156,column:64},end:{line:156,column:88}},type:"binary-expr",locations:[{start:{line:156,column:64},end:{line:156,column:73}},{start:{line:156,column:77},end:{line:156,column:88}}],line:156},"10":{loc:{start:{line:161,column:8},end:{line:163,column:9}},type:"if",locations:[{start:{line:161,column:8},end:{line:163,column:9}},{start:{line:161,column:8},end:{line:163,column:9}}],line:161},"11":{loc:{start:{line:169,column:22},end:{line:169,column:37}},type:"default-arg",locations:[{start:{line:169,column:35},end:{line:169,column:37}}],line:169},"12":{loc:{start:{line:173,column:24},end:{line:173,column:51}},type:"binary-expr",locations:[{start:{line:173,column:24},end:{line:173,column:38}},{start:{line:173,column:42},end:{line:173,column:51}}],line:173},"13":{loc:{start:{line:174,column:20},end:{line:174,column:55}},type:"binary-expr",locations:[{start:{line:174,column:20},end:{line:174,column:48}},{start:{line:174,column:52},end:{line:174,column:55}}],line:174},"14":{loc:{start:{line:196,column:60},end:{line:196,column:72}},type:"default-arg",locations:[{start:{line:196,column:71},end:{line:196,column:72}}],line:196},"15":{loc:{start:{line:196,column:104},end:{line:196,column:165}},type:"default-arg",locations:[{start:{line:196,column:126},end:{line:196,column:165}}],line:196},"16":{loc:{start:{line:196,column:167},end:{line:196,column:201}},type:"default-arg",locations:[{start:{line:196,column:196},end:{line:196,column:201}}],line:196},"17":{loc:{start:{line:199,column:72},end:{line:199,column:85}},type:"binary-expr",locations:[{start:{line:199,column:72},end:{line:199,column:80}},{start:{line:199,column:84},end:{line:199,column:85}}],line:199},"18":{loc:{start:{line:200,column:105},end:{line:200,column:168}},type:"binary-expr",locations:[{start:{line:200,column:105},end:{line:200,column:119}},{start:{line:200,column:123},end:{line:200,column:168}}],line:200},"19":{loc:{start:{line:209,column:8},end:{line:211,column:9}},type:"if",locations:[{start:{line:209,column:8},end:{line:211,column:9}},{start:{line:209,column:8},end:{line:211,column:9}}],line:209},"20":{loc:{start:{line:220,column:21},end:{line:222,column:74}},type:"cond-expr",locations:[{start:{line:221,column:18},end:{line:221,column:51}},{start:{line:222,column:18},end:{line:222,column:74}}],line:220},"21":{loc:{start:{line:225,column:25},end:{line:225,column:34}},type:"binary-expr",locations:[{start:{line:225,column:25},end:{line:225,column:29}},{start:{line:225,column:33},end:{line:225,column:34}}],line:225},"22":{loc:{start:{line:259,column:73},end:{line:259,column:85}},type:"default-arg",locations:[{start:{line:259,column:84},end:{line:259,column:85}}],line:259},"23":{loc:{start:{line:259,column:130},end:{line:259,column:179}},type:"default-arg",locations:[{start:{line:259,column:152},end:{line:259,column:179}}],line:259},"24":{loc:{start:{line:259,column:211},end:{line:259,column:245}},type:"default-arg",locations:[{start:{line:259,column:240},end:{line:259,column:245}}],line:259},"25":{loc:{start:{line:262,column:64},end:{line:262,column:77}},type:"binary-expr",locations:[{start:{line:262,column:64},end:{line:262,column:72}},{start:{line:262,column:76},end:{line:262,column:77}}],line:262},"26":{loc:{start:{line:263,column:8},end:{line:265,column:9}},type:"if",locations:[{start:{line:263,column:8},end:{line:265,column:9}},{start:{line:263,column:8},end:{line:265,column:9}}],line:263},"27":{loc:{start:{line:263,column:12},end:{line:263,column:80}},type:"binary-expr",locations:[{start:{line:263,column:12},end:{line:263,column:26}},{start:{line:263,column:30},end:{line:263,column:80}}],line:263},"28":{loc:{start:{line:266,column:115},end:{line:266,column:178}},type:"binary-expr",locations:[{start:{line:266,column:115},end:{line:266,column:129}},{start:{line:266,column:133},end:{line:266,column:178}}],line:266},"29":{loc:{start:{line:266,column:193},end:{line:266,column:215}},type:"binary-expr",locations:[{start:{line:266,column:193},end:{line:266,column:202}},{start:{line:266,column:206},end:{line:266,column:215}}],line:266},"30":{loc:{start:{line:276,column:8},end:{line:278,column:9}},type:"if",locations:[{start:{line:276,column:8},end:{line:278,column:9}},{start:{line:276,column:8},end:{line:278,column:9}}],line:276},"31":{loc:{start:{line:280,column:8},end:{line:290,column:9}},type:"if",locations:[{start:{line:280,column:8},end:{line:290,column:9}},{start:{line:280,column:8},end:{line:290,column:9}}],line:280},"32":{loc:{start:{line:281,column:12},end:{line:286,column:13}},type:"if",locations:[{start:{line:281,column:12},end:{line:286,column:13}},{start:{line:281,column:12},end:{line:286,column:13}}],line:281},"33":{loc:{start:{line:288,column:13},end:{line:290,column:9}},type:"if",locations:[{start:{line:288,column:13},end:{line:290,column:9}},{start:{line:288,column:13},end:{line:290,column:9}}],line:288},"34":{loc:{start:{line:295,column:21},end:{line:296,column:72}},type:"binary-expr",locations:[{start:{line:295,column:21},end:{line:295,column:47}},{start:{line:296,column:16},end:{line:296,column:72}}],line:295},"35":{loc:{start:{line:299,column:25},end:{line:299,column:34}},type:"binary-expr",locations:[{start:{line:299,column:25},end:{line:299,column:29}},{start:{line:299,column:33},end:{line:299,column:34}}],line:299},"36":{loc:{start:{line:301,column:31},end:{line:301,column:60}},type:"cond-expr",locations:[{start:{line:301,column:48},end:{line:301,column:53}},{start:{line:301,column:56},end:{line:301,column:60}}],line:301},"37":{loc:{start:{line:327,column:114},end:{line:327,column:175}},type:"default-arg",locations:[{start:{line:327,column:136},end:{line:327,column:175}}],line:327},"38":{loc:{start:{line:327,column:177},end:{line:327,column:211}},type:"default-arg",locations:[{start:{line:327,column:206},end:{line:327,column:211}}],line:327},"39":{loc:{start:{line:327,column:213},end:{line:327,column:242}},type:"default-arg",locations:[{start:{line:327,column:238},end:{line:327,column:242}}],line:327},"40":{loc:{start:{line:338,column:105},end:{line:338,column:168}},type:"binary-expr",locations:[{start:{line:338,column:105},end:{line:338,column:119}},{start:{line:338,column:123},end:{line:338,column:168}}],line:338},"41":{loc:{start:{line:359,column:21},end:{line:360,column:72}},type:"binary-expr",locations:[{start:{line:359,column:21},end:{line:359,column:47}},{start:{line:360,column:16},end:{line:360,column:72}}],line:359},"42":{loc:{start:{line:363,column:25},end:{line:363,column:34}},type:"binary-expr",locations:[{start:{line:363,column:25},end:{line:363,column:29}},{start:{line:363,column:33},end:{line:363,column:34}}],line:363},"43":{loc:{start:{line:382,column:8},end:{line:384,column:9}},type:"if",locations:[{start:{line:382,column:8},end:{line:384,column:9}},{start:{line:382,column:8},end:{line:384,column:9}}],line:382},"44":{loc:{start:{line:401,column:8},end:{line:403,column:9}},type:"if",locations:[{start:{line:401,column:8},end:{line:403,column:9}},{start:{line:401,column:8},end:{line:403,column:9}}],line:401},"45":{loc:{start:{line:423,column:32},end:{line:423,column:79}},type:"binary-expr",locations:[{start:{line:423,column:32},end:{line:423,column:53}},{start:{line:423,column:57},end:{line:423,column:79}}],line:423},"46":{loc:{start:{line:425,column:26},end:{line:425,column:61}},type:"binary-expr",locations:[{start:{line:425,column:26},end:{line:425,column:41}},{start:{line:425,column:45},end:{line:425,column:61}}],line:425},"47":{loc:{start:{line:426,column:21},end:{line:429,column:40}},type:"binary-expr",locations:[{start:{line:426,column:21},end:{line:426,column:31}},{start:{line:427,column:13},end:{line:429,column:39}}],line:426},"48":{loc:{start:{line:427,column:13},end:{line:429,column:39}},type:"cond-expr",locations:[{start:{line:428,column:18},end:{line:428,column:39}},{start:{line:429,column:18},end:{line:429,column:39}}],line:427},"49":{loc:{start:{line:431,column:29},end:{line:431,column:70}},type:"binary-expr",locations:[{start:{line:431,column:29},end:{line:431,column:47}},{start:{line:431,column:51},end:{line:431,column:70}}],line:431},"50":{loc:{start:{line:432,column:8},end:{line:442,column:9}},type:"if",locations:[{start:{line:432,column:8},end:{line:442,column:9}},{start:{line:432,column:8},end:{line:442,column:9}}],line:432},"51":{loc:{start:{line:437,column:12},end:{line:439,column:13}},type:"if",locations:[{start:{line:437,column:12},end:{line:439,column:13}},{start:{line:437,column:12},end:{line:439,column:13}}],line:437},"52":{loc:{start:{line:437,column:16},end:{line:437,column:75}},type:"binary-expr",locations:[{start:{line:437,column:16},end:{line:437,column:37}},{start:{line:437,column:41},end:{line:437,column:75}}],line:437},"53":{loc:{start:{line:443,column:33},end:{line:443,column:73}},type:"cond-expr",locations:[{start:{line:443,column:52},end:{line:443,column:65}},{start:{line:443,column:68},end:{line:443,column:73}}],line:443},"54":{loc:{start:{line:444,column:8},end:{line:454,column:9}},type:"if",locations:[{start:{line:444,column:8},end:{line:454,column:9}},{start:{line:444,column:8},end:{line:454,column:9}}],line:444},"55":{loc:{start:{line:445,column:12},end:{line:447,column:13}},type:"if",locations:[{start:{line:445,column:12},end:{line:447,column:13}},{start:{line:445,column:12},end:{line:447,column:13}}],line:445},"56":{loc:{start:{line:466,column:8},end:{line:468,column:9}},type:"if",locations:[{start:{line:466,column:8},end:{line:468,column:9}},{start:{line:466,column:8},end:{line:468,column:9}}],line:466},"57":{loc:{start:{line:478,column:8},end:{line:485,column:9}},type:"switch",locations:[{start:{line:479,column:12},end:{line:480,column:41}},{start:{line:481,column:12},end:{line:482,column:41}},{start:{line:483,column:12},end:{line:484,column:84}}],line:478},"58":{loc:{start:{line:497,column:64},end:{line:497,column:122}},type:"default-arg",locations:[{start:{line:497,column:82},end:{line:497,column:122}}],line:497},"59":{loc:{start:{line:537,column:58},end:{line:537,column:76}},type:"default-arg",locations:[{start:{line:537,column:66},end:{line:537,column:76}}],line:537},"60":{loc:{start:{line:562,column:12},end:{line:564,column:13}},type:"if",locations:[{start:{line:562,column:12},end:{line:564,column:13}},{start:{line:562,column:12},end:{line:564,column:13}}],line:562},"61":{loc:{start:{line:562,column:16},end:{line:562,column:83}},type:"binary-expr",locations:[{start:{line:562,column:16},end:{line:562,column:48}},{start:{line:562,column:52},end:{line:562,column:83}}],line:562},"62":{loc:{start:{line:578,column:8},end:{line:607,column:9}},type:"switch",locations:[{start:{line:579,column:12},end:{line:582,column:13}},{start:{line:583,column:12},end:{line:589,column:13}},{start:{line:590,column:12},end:{line:604,column:13}},{start:{line:605,column:12},end:{line:606,column:77}}],line:578},"63":{loc:{start:{line:584,column:16},end:{line:586,column:17}},type:"if",locations:[{start:{line:584,column:16},end:{line:586,column:17}},{start:{line:584,column:16},end:{line:586,column:17}}],line:584},"64":{loc:{start:{line:584,column:20},end:{line:584,column:73}},type:"binary-expr",locations:[{start:{line:584,column:20},end:{line:584,column:47}},{start:{line:584,column:51},end:{line:584,column:73}}],line:584},"65":{loc:{start:{line:591,column:16},end:{line:593,column:17}},type:"if",locations:[{start:{line:591,column:16},end:{line:593,column:17}},{start:{line:591,column:16},end:{line:593,column:17}}],line:591},"66":{loc:{start:{line:591,column:20},end:{line:591,column:73}},type:"binary-expr",locations:[{start:{line:591,column:20},end:{line:591,column:47}},{start:{line:591,column:51},end:{line:591,column:73}}],line:591},"67":{loc:{start:{line:601,column:65},end:{line:601,column:87}},type:"binary-expr",locations:[{start:{line:601,column:65},end:{line:601,column:78}},{start:{line:601,column:82},end:{line:601,column:87}}],line:601},"68":{loc:{start:{line:622,column:8},end:{line:652,column:9}},type:"switch",locations:[{start:{line:623,column:12},end:{line:630,column:13}},{start:{line:631,column:12},end:{line:641,column:13}},{start:{line:642,column:12},end:{line:649,column:13}},{start:{line:650,column:12},end:{line:651,column:75}}],line:622},"69":{loc:{start:{line:624,column:16},end:{line:626,column:17}},type:"if",locations:[{start:{line:624,column:16},end:{line:626,column:17}},{start:{line:624,column:16},end:{line:626,column:17}}],line:624},"70":{loc:{start:{line:632,column:16},end:{line:634,column:17}},type:"if",locations:[{start:{line:632,column:16},end:{line:634,column:17}},{start:{line:632,column:16},end:{line:634,column:17}}],line:632},"71":{loc:{start:{line:632,column:20},end:{line:632,column:73}},type:"binary-expr",locations:[{start:{line:632,column:20},end:{line:632,column:47}},{start:{line:632,column:51},end:{line:632,column:73}}],line:632},"72":{loc:{start:{line:635,column:16},end:{line:637,column:17}},type:"if",locations:[{start:{line:635,column:16},end:{line:637,column:17}},{start:{line:635,column:16},end:{line:637,column:17}}],line:635},"73":{loc:{start:{line:643,column:16},end:{line:645,column:17}},type:"if",locations:[{start:{line:643,column:16},end:{line:645,column:17}},{start:{line:643,column:16},end:{line:645,column:17}}],line:643},"74":{loc:{start:{line:643,column:20},end:{line:643,column:73}},type:"binary-expr",locations:[{start:{line:643,column:20},end:{line:643,column:47}},{start:{line:643,column:51},end:{line:643,column:73}}],line:643},"75":{loc:{start:{line:701,column:8},end:{line:710,column:9}},type:"if",locations:[{start:{line:701,column:8},end:{line:710,column:9}},{start:{line:701,column:8},end:{line:710,column:9}}],line:701},"76":{loc:{start:{line:702,column:12},end:{line:709,column:13}},type:"if",locations:[{start:{line:702,column:12},end:{line:709,column:13}},{start:{line:702,column:12},end:{line:709,column:13}}],line:702},"77":{loc:{start:{line:712,column:29},end:{line:714,column:23}},type:"cond-expr",locations:[{start:{line:713,column:14},end:{line:713,column:72}},{start:{line:714,column:14},end:{line:714,column:23}}],line:712},"78":{loc:{start:{line:715,column:29},end:{line:715,column:92}},type:"cond-expr",locations:[{start:{line:715,column:58},end:{line:715,column:87}},{start:{line:715,column:90},end:{line:715,column:92}}],line:715},"79":{loc:{start:{line:719,column:8},end:{line:721,column:9}},type:"if",locations:[{start:{line:719,column:8},end:{line:721,column:9}},{start:{line:719,column:8},end:{line:721,column:9}}],line:719},"80":{loc:{start:{line:719,column:12},end:{line:719,column:53}},type:"binary-expr",locations:[{start:{line:719,column:12},end:{line:719,column:31}},{start:{line:719,column:35},end:{line:719,column:53}}],line:719},"81":{loc:{start:{line:722,column:8},end:{line:724,column:9}},type:"if",locations:[{start:{line:722,column:8},end:{line:724,column:9}},{start:{line:722,column:8},end:{line:724,column:9}}],line:722},"82":{loc:{start:{line:722,column:12},end:{line:722,column:58}},type:"binary-expr",locations:[{start:{line:722,column:12},end:{line:722,column:19}},{start:{line:722,column:23},end:{line:722,column:58}}],line:722},"83":{loc:{start:{line:725,column:8},end:{line:727,column:9}},type:"if",locations:[{start:{line:725,column:8},end:{line:727,column:9}},{start:{line:725,column:8},end:{line:727,column:9}}],line:725},"84":{loc:{start:{line:728,column:8},end:{line:730,column:9}},type:"if",locations:[{start:{line:728,column:8},end:{line:730,column:9}},{start:{line:728,column:8},end:{line:730,column:9}}],line:728},"85":{loc:{start:{line:728,column:12},end:{line:728,column:61}},type:"binary-expr",locations:[{start:{line:728,column:12},end:{line:728,column:28}},{start:{line:728,column:32},end:{line:728,column:61}}],line:728},"86":{loc:{start:{line:743,column:8},end:{line:749,column:9}},type:"if",locations:[{start:{line:743,column:8},end:{line:749,column:9}},{start:{line:743,column:8},end:{line:749,column:9}}],line:743},"87":{loc:{start:{line:746,column:13},end:{line:749,column:9}},type:"if",locations:[{start:{line:746,column:13},end:{line:749,column:9}},{start:{line:746,column:13},end:{line:749,column:9}}],line:746},"88":{loc:{start:{line:750,column:8},end:{line:752,column:9}},type:"if",locations:[{start:{line:750,column:8},end:{line:752,column:9}},{start:{line:750,column:8},end:{line:752,column:9}}],line:750},"89":{loc:{start:{line:753,column:147},end:{line:753,column:215}},type:"cond-expr",locations:[{start:{line:753,column:178},end:{line:753,column:206}},{start:{line:753,column:209},end:{line:753,column:215}}],line:753}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0],"12":[0,0],"13":[0,0],"14":[0],"15":[0],"16":[0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0],"23":[0],"24":[0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0],"38":[0],"39":[0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0,0],"58":[0],"59":[0],"60":[0,0],"61":[0,0],"62":[0,0,0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0,0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0]},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/src/sdk.ts",sources:["/Users/rg/dev/opensea-js/src/sdk.ts"],names:[],mappings:"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",sourcesContent:["import EventEmitter = require(\"events\");\nimport { Seaport } from \"@opensea/seaport-js\";\nimport {\n  CROSS_CHAIN_SEAPORT_V1_5_ADDRESS,\n  CROSS_CHAIN_SEAPORT_V1_6_ADDRESS,\n  OPENSEA_CONDUIT_KEY,\n} from \"@opensea/seaport-js/lib/constants\";\nimport {\n  AdvancedOrder,\n  ConsiderationInputItem,\n  CreateInputItem,\n  OrderComponents,\n} from \"@opensea/seaport-js/lib/types\";\nimport {\n  BigNumberish,\n  Contract,\n  FixedNumber,\n  Overrides,\n  Signer,\n  ethers,\n  parseEther,\n  JsonRpcProvider,\n  ContractTransactionResponse,\n} from \"ethers\";\nimport { OpenSeaAPI } from \"./api/api\";\nimport { CollectionOffer, Listing, NFT, Order } from \"./api/types\";\nimport {\n  INVERSE_BASIS_POINT,\n  DEFAULT_ZONE,\n  ENGLISH_AUCTION_ZONE_MAINNETS,\n  ENGLISH_AUCTION_ZONE_TESTNETS,\n} from \"./constants\";\nimport {\n  constructPrivateListingCounterOrder,\n  getPrivateListingConsiderations,\n  getPrivateListingFulfillments,\n} from \"./orders/privateListings\";\nimport { OrderType, OrderV2 } from \"./orders/types\";\nimport { DEFAULT_SEAPORT_CONTRACT_ADDRESS } from \"./orders/utils\";\nimport {\n  ERC1155__factory,\n  ERC20__factory,\n  ERC721__factory,\n} from \"./typechain/contracts\";\nimport {\n  EventData,\n  EventType,\n  Chain,\n  OpenSeaAPIConfig,\n  OpenSeaCollection,\n  OrderSide,\n  TokenStandard,\n  AssetWithTokenStandard,\n  AssetWithTokenId,\n} from \"./types\";\nimport {\n  getMaxOrderExpirationTimestamp,\n  hasErrorCode,\n  getAssetItemType,\n  getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress,\n  requireValidProtocol,\n  getWETHAddress,\n  isTestChain,\n  basisPointsForFee,\n  totalBasisPointsForFees,\n} from \"./utils/utils\";\n\n/**\n * The OpenSea SDK main class.\n * @category Main Classes\n */\nexport class OpenSeaSDK {\n  /** Provider to use for transactions. */\n  public provider: JsonRpcProvider;\n  /** Seaport v1.6 client @see {@link https://github.com/ProjectOpenSea/seaport-js} */\n  public seaport_v1_6: Seaport;\n  /** Seaport v1.5 client @see {@link https://github.com/ProjectOpenSea/seaport-js} */\n  public seaport_v1_5: Seaport;\n  /** Logger function to use when debugging */\n  public logger: (arg: string) => void;\n  /** API instance */\n  public readonly api: OpenSeaAPI;\n  /** The configured chain */\n  public readonly chain: Chain;\n  /** Internal cache of decimals for payment tokens to save network requests */\n  private _cachedPaymentTokenDecimals: { [address: string]: number } = {};\n\n  private _emitter: EventEmitter;\n  private _signerOrProvider: Signer | JsonRpcProvider;\n\n  /**\n   * Create a new instance of OpenSeaSDK.\n   * @param signerOrProvider Signer or provider to use for transactions. For example:\n   * `new ethers.providers.JsonRpcProvider('https://mainnet.infura.io')` or\n   * `new ethers.Wallet(privKey, provider)`\n   * @param apiConfig configuration options, including `chain`\n   * @param logger optional function for logging debug strings. defaults to no logging\n   */\n  constructor(\n    signerOrProvider: Signer | JsonRpcProvider,\n    apiConfig: OpenSeaAPIConfig = {},\n    logger?: (arg: string) => void,\n  ) {\n    // API config\n    apiConfig.chain ??= Chain.Mainnet;\n    this.chain = apiConfig.chain;\n    this.api = new OpenSeaAPI(apiConfig);\n\n    this.provider = ((signerOrProvider as Signer).provider ??\n      signerOrProvider) as JsonRpcProvider;\n    this._signerOrProvider = signerOrProvider ?? this.provider;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.seaport_v1_5 = new Seaport(this._signerOrProvider as any, {\n      overrides: {\n        contractAddress: CROSS_CHAIN_SEAPORT_V1_5_ADDRESS,\n        seaportVersion: \"1.5\",\n        defaultConduitKey: OPENSEA_CONDUIT_KEY,\n      },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.seaport_v1_6 = new Seaport(this._signerOrProvider as any, {\n      overrides: { defaultConduitKey: OPENSEA_CONDUIT_KEY },\n    });\n\n    // Emit events\n    this._emitter = new EventEmitter();\n\n    // Logger: default to no logging if fn not provided\n    this.logger = logger ?? ((arg: string) => arg);\n\n    // Cache decimals for WETH payment token to skip network request\n    try {\n      const wethAddress = getWETHAddress(this.chain).toLowerCase();\n      this._cachedPaymentTokenDecimals[wethAddress] = 18;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      if (error.message.includes(\"Unknown WETH address\")) {\n        // Ignore\n      } else {\n        console.error(error);\n      }\n    }\n  }\n\n  /**\n   * Add a listener for events emitted by the SDK.\n   * @param event The {@link EventType} to listen to.\n   * @param listener A callback that will accept an object with {@link EventData}\\\n   * @param once Whether the listener should only be called once, or continue listening until removed.\n   */\n  public addListener(\n    event: EventType,\n    listener: (data: EventData) => void,\n    once = false,\n  ) {\n    if (once) {\n      this._emitter.once(event, listener);\n    } else {\n      this._emitter.addListener(event, listener);\n    }\n  }\n\n  /**\n   * Remove an event listener by calling `.removeListener()` on an event and listener.\n   * @param event The {@link EventType} to remove a listener for\\\n   * @param listener The listener to remove\n   */\n  public removeListener(event: EventType, listener: (data: EventData) => void) {\n    this._emitter.removeListener(event, listener);\n  }\n\n  /**\n   * Remove all event listeners. This should be called when you're unmounting\n   * a component that listens to events to make UI updates.\n   * @param event Optional EventType to remove listeners for\n   */\n  public removeAllListeners(event?: EventType) {\n    this._emitter.removeAllListeners(event);\n  }\n\n  /**\n   * Wrap ETH into WETH.\n   * W-ETH is needed for making offers.\n   * @param options\n   * @param options.amountInEth Amount of ether to wrap\n   * @param options.accountAddress Address of the user's wallet containing the ether\n   */\n  public async wrapEth({\n    amountInEth,\n    accountAddress,\n  }: {\n    amountInEth: BigNumberish;\n    accountAddress: string;\n  }) {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const value = parseEther(FixedNumber.fromValue(amountInEth).toString());\n\n    this._dispatch(EventType.WrapEth, { accountAddress, amount: value });\n\n    const wethContract = new Contract(\n      getWETHAddress(this.chain),\n      [\"function deposit() payable\"],\n      this._signerOrProvider,\n    );\n\n    try {\n      const transaction = await wethContract.deposit({ value });\n      await this._confirmTransaction(\n        transaction.hash,\n        EventType.WrapEth,\n        \"Wrapping ETH\",\n      );\n    } catch (error) {\n      console.error(error);\n      this._dispatch(EventType.TransactionDenied, { error, accountAddress });\n    }\n  }\n\n  /**\n   * Unwrap WETH into ETH.\n   * Emits the `UnwrapWeth` event when the transaction is prompted.\n   * @param options\n   * @param options.amountInEth How much WETH to unwrap\n   * @param options.accountAddress Address of the user's wallet containing the WETH\n   */\n  public async unwrapWeth({\n    amountInEth,\n    accountAddress,\n  }: {\n    amountInEth: BigNumberish;\n    accountAddress: string;\n  }) {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const amount = parseEther(FixedNumber.fromValue(amountInEth).toString());\n\n    this._dispatch(EventType.UnwrapWeth, { accountAddress, amount });\n\n    const wethContract = new Contract(\n      getWETHAddress(this.chain),\n      [\"function withdraw(uint wad) public\"],\n      this._signerOrProvider,\n    );\n\n    try {\n      const transaction = await wethContract.withdraw(amount);\n      await this._confirmTransaction(\n        transaction.hash,\n        EventType.UnwrapWeth,\n        \"Unwrapping W-ETH\",\n      );\n    } catch (error) {\n      console.error(error);\n      this._dispatch(EventType.TransactionDenied, { error, accountAddress });\n    }\n  }\n\n  private getAmountWithBasisPointsApplied = (\n    amount: bigint,\n    basisPoints: bigint,\n  ): string => {\n    return ((amount * basisPoints) / INVERSE_BASIS_POINT).toString();\n  };\n\n  private async getFees({\n    collection,\n    seller,\n    paymentTokenAddress,\n    startAmount,\n    endAmount,\n    excludeOptionalCreatorFees,\n  }: {\n    collection: OpenSeaCollection;\n    seller?: string;\n    paymentTokenAddress: string;\n    startAmount: bigint;\n    endAmount?: bigint;\n    excludeOptionalCreatorFees?: boolean;\n  }): Promise<ConsiderationInputItem[]> {\n    let collectionFees = collection.fees;\n    if (excludeOptionalCreatorFees) {\n      collectionFees = collectionFees.filter((fee) => fee.required);\n    }\n    const collectionFeesBasisPoints = totalBasisPointsForFees(collectionFees);\n    const sellerBasisPoints = INVERSE_BASIS_POINT - collectionFeesBasisPoints;\n\n    const getConsiderationItem = (basisPoints: bigint, recipient?: string) => {\n      return {\n        token: paymentTokenAddress,\n        amount: this.getAmountWithBasisPointsApplied(startAmount, basisPoints),\n        endAmount: this.getAmountWithBasisPointsApplied(\n          endAmount ?? startAmount,\n          basisPoints,\n        ),\n        recipient,\n      };\n    };\n\n    const considerationItems: ConsiderationInputItem[] = [];\n\n    if (seller) {\n      considerationItems.push(getConsiderationItem(sellerBasisPoints, seller));\n    }\n    for (const fee of collectionFees) {\n      considerationItems.push(\n        getConsiderationItem(basisPointsForFee(fee), fee.recipient),\n      );\n    }\n    return considerationItems;\n  }\n\n  private getNFTItems(\n    nfts: NFT[],\n    quantities: bigint[] = [],\n  ): CreateInputItem[] {\n    return nfts.map((nft, index) => ({\n      itemType: getAssetItemType(\n        nft.token_standard.toUpperCase() as TokenStandard,\n      ),\n      token:\n        getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress(\n          nft.contract,\n        ),\n      identifier: nft.identifier ?? undefined,\n      amount: quantities[index].toString() ?? \"1\",\n    }));\n  }\n\n  /**\n   * Create and submit an offer on an asset.\n   * @param options\n   * @param options.asset The asset to trade. tokenAddress and tokenId must be defined.\n   * @param options.accountAddress Address of the wallet making the offer.\n   * @param options.startAmount Value of the offer in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified)\n   * @param options.quantity The number of assets to bid for (if fungible or semi-fungible). Defaults to 1.\n   * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt.\n   * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n   * @param options.expirationTime Expiration time for the order, in UTC seconds\n   * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to WETH\n   * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the offer. Default: false.\n   * @returns The {@link OrderV2} that was created.\n   *\n   * @throws Error if the asset does not contain a token id.\n   * @throws Error if the accountAddress is not available through wallet or provider.\n   * @throws Error if the startAmount is not greater than 0.\n   * @throws Error if paymentTokenAddress is not WETH on anything other than Ethereum mainnet.\n   */\n  public async createOffer({\n    asset,\n    accountAddress,\n    startAmount,\n    quantity = 1,\n    domain,\n    salt,\n    expirationTime,\n    paymentTokenAddress = getWETHAddress(this.chain),\n    excludeOptionalCreatorFees = false,\n  }: {\n    asset: AssetWithTokenId;\n    accountAddress: string;\n    startAmount: BigNumberish;\n    quantity?: BigNumberish;\n    domain?: string;\n    salt?: BigNumberish;\n    expirationTime?: BigNumberish;\n    paymentTokenAddress?: string;\n    excludeOptionalCreatorFees?: boolean;\n  }): Promise<OrderV2> {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const { nft } = await this.api.getNFT(asset.tokenAddress, asset.tokenId);\n    const considerationAssetItems = this.getNFTItems(\n      [nft],\n      [BigInt(quantity ?? 1)],\n    );\n\n    const { basePrice } = await this._getPriceParameters(\n      OrderSide.BID,\n      paymentTokenAddress,\n      expirationTime ?? getMaxOrderExpirationTimestamp(),\n      startAmount,\n    );\n\n    const collection = await this.api.getCollection(nft.collection);\n\n    const considerationFeeItems = await this.getFees({\n      collection,\n      paymentTokenAddress,\n      startAmount: basePrice,\n      excludeOptionalCreatorFees,\n    });\n\n    let zone = DEFAULT_ZONE;\n    if (collection.requiredZone) {\n      zone = collection.requiredZone;\n    }\n\n    const { executeAllActions } = await this.seaport_v1_6.createOrder(\n      {\n        offer: [\n          {\n            token: paymentTokenAddress,\n            amount: basePrice.toString(),\n          },\n        ],\n        consideration: [...considerationAssetItems, ...considerationFeeItems],\n        endTime:\n          expirationTime !== undefined\n            ? BigInt(expirationTime).toString()\n            : getMaxOrderExpirationTimestamp().toString(),\n        zone,\n        domain,\n        salt: BigInt(salt ?? 0).toString(),\n        restrictedByZone: zone !== DEFAULT_ZONE,\n        allowPartialFills: true,\n      },\n      accountAddress,\n    );\n    const order = await executeAllActions();\n\n    return this.api.postOrder(order, {\n      protocol: \"seaport\",\n      protocolAddress: DEFAULT_SEAPORT_CONTRACT_ADDRESS,\n      side: OrderSide.BID,\n    });\n  }\n\n  /**\n   * Create and submit a listing for an asset.\n   * @param options\n   * @param options.asset The asset to trade. tokenAddress and tokenId must be defined.\n   * @param options.accountAddress  Address of the wallet making the listing\n   * @param options.startAmount Value of the listing at the start of the auction in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified)\n   * @param options.endAmount Value of the listing at the end of the auction. If specified, price will change linearly between startAmount and endAmount as time progresses.\n   * @param options.quantity The number of assets to list (if fungible or semi-fungible). Defaults to 1.\n   * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt. This can be used for on-chain order attribution to assist with analytics.\n   * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n   * @param options.listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.\n   * @param options.expirationTime Expiration time for the order, in UTC seconds.\n   * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to ETH\n   * @param options.buyerAddress Optional address that's allowed to purchase this item. If specified, no other address will be able to take the order, unless its value is the null address.\n   * @param options.englishAuction If true, the order will be listed as an English auction.\n   * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the listing. Default: false.\n   * @returns The {@link OrderV2} that was created.\n   *\n   * @throws Error if the asset does not contain a token id.\n   * @throws Error if the accountAddress is not available through wallet or provider.\n   * @throws Error if the startAmount is not greater than 0.\n   * @throws Error if paymentTokenAddress is not WETH on anything other than Ethereum mainnet.\n   */\n  public async createListing({\n    asset,\n    accountAddress,\n    startAmount,\n    endAmount,\n    quantity = 1,\n    domain,\n    salt,\n    listingTime,\n    expirationTime,\n    paymentTokenAddress = ethers.ZeroAddress,\n    buyerAddress,\n    englishAuction,\n    excludeOptionalCreatorFees = false,\n  }: {\n    asset: AssetWithTokenId;\n    accountAddress: string;\n    startAmount: BigNumberish;\n    endAmount?: BigNumberish;\n    quantity?: BigNumberish;\n    domain?: string;\n    salt?: BigNumberish;\n    listingTime?: number;\n    expirationTime?: number;\n    paymentTokenAddress?: string;\n    buyerAddress?: string;\n    englishAuction?: boolean;\n    excludeOptionalCreatorFees?: boolean;\n  }): Promise<OrderV2> {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const { nft } = await this.api.getNFT(asset.tokenAddress, asset.tokenId);\n    const offerAssetItems = this.getNFTItems([nft], [BigInt(quantity ?? 1)]);\n\n    if (englishAuction && paymentTokenAddress == ethers.ZeroAddress) {\n      throw new Error(\n        `English auctions must use wrapped ETH or an ERC-20 token.`,\n      );\n    }\n\n    const { basePrice, endPrice } = await this._getPriceParameters(\n      OrderSide.ASK,\n      paymentTokenAddress,\n      expirationTime ?? getMaxOrderExpirationTimestamp(),\n      startAmount,\n      endAmount ?? undefined,\n    );\n\n    const collection = await this.api.getCollection(nft.collection);\n\n    const considerationFeeItems = await this.getFees({\n      collection,\n      seller: accountAddress,\n      paymentTokenAddress,\n      startAmount: basePrice,\n      endAmount: endPrice,\n      excludeOptionalCreatorFees,\n    });\n\n    if (buyerAddress) {\n      considerationFeeItems.push(\n        ...getPrivateListingConsiderations(offerAssetItems, buyerAddress),\n      );\n    }\n\n    let zone = DEFAULT_ZONE;\n    if (englishAuction) {\n      if (isTestChain(this.chain)) {\n        zone = ENGLISH_AUCTION_ZONE_TESTNETS;\n      } else {\n        zone = ENGLISH_AUCTION_ZONE_MAINNETS;\n      }\n    } else if (collection.requiredZone) {\n      zone = collection.requiredZone;\n    }\n\n    const { executeAllActions } = await this.seaport_v1_6.createOrder(\n      {\n        offer: offerAssetItems,\n        consideration: considerationFeeItems,\n        startTime: listingTime?.toString(),\n        endTime:\n          expirationTime?.toString() ??\n          getMaxOrderExpirationTimestamp().toString(),\n        zone,\n        domain,\n        salt: BigInt(salt ?? 0).toString(),\n        restrictedByZone: zone !== DEFAULT_ZONE,\n        allowPartialFills: englishAuction ? false : true,\n      },\n      accountAddress,\n    );\n    const order = await executeAllActions();\n\n    return this.api.postOrder(order, {\n      protocol: \"seaport\",\n      protocolAddress: DEFAULT_SEAPORT_CONTRACT_ADDRESS,\n      side: OrderSide.ASK,\n    });\n  }\n\n  /**\n   * Create and submit a collection offer.\n   * @param options\n   * @param options.collectionSlug Identifier for the collection.\n   * @param options.accountAddress Address of the wallet making the offer.\n   * @param options.amount Value of the offer in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified).\n   * @param options.quantity The number of assets to bid for (if fungible or semi-fungible).\n   * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt. This can be used for on-chain order attribution to assist with analytics.\n   * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n   * @param options.expirationTime Expiration time for the order, in UTC seconds.\n   * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to WETH.\n   * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the offer. Default: false.\n   * @param options.offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.\n   * @param options.traitType If defined, the trait name to create the collection offer for.\n   * @param options.traitValue If defined, the trait value to create the collection offer for.\n   * @returns The {@link CollectionOffer} that was created.\n   */\n  public async createCollectionOffer({\n    collectionSlug,\n    accountAddress,\n    amount,\n    quantity,\n    domain,\n    salt,\n    expirationTime,\n    paymentTokenAddress = getWETHAddress(this.chain),\n    excludeOptionalCreatorFees = false,\n    offerProtectionEnabled = true,\n    traitType,\n    traitValue,\n  }: {\n    collectionSlug: string;\n    accountAddress: string;\n    amount: BigNumberish;\n    quantity: number;\n    domain?: string;\n    salt?: BigNumberish;\n    expirationTime?: number | string;\n    paymentTokenAddress: string;\n    excludeOptionalCreatorFees?: boolean;\n    offerProtectionEnabled?: boolean;\n    traitType?: string;\n    traitValue?: string;\n  }): Promise<CollectionOffer | null> {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const collection = await this.api.getCollection(collectionSlug);\n    const buildOfferResult = await this.api.buildOffer(\n      accountAddress,\n      quantity,\n      collectionSlug,\n      offerProtectionEnabled,\n      traitType,\n      traitValue,\n    );\n    const item = buildOfferResult.partialParameters.consideration[0];\n    const convertedConsiderationItem = {\n      itemType: item.itemType,\n      token: item.token,\n      identifier: item.identifierOrCriteria,\n      amount: item.startAmount,\n    };\n\n    const { basePrice } = await this._getPriceParameters(\n      OrderSide.ASK,\n      paymentTokenAddress,\n      expirationTime ?? getMaxOrderExpirationTimestamp(),\n      amount,\n    );\n    const considerationFeeItems = await this.getFees({\n      collection,\n      paymentTokenAddress,\n      startAmount: basePrice,\n      endAmount: basePrice,\n      excludeOptionalCreatorFees,\n    });\n\n    const considerationItems = [\n      convertedConsiderationItem,\n      ...considerationFeeItems,\n    ];\n\n    const payload = {\n      offerer: accountAddress,\n      offer: [\n        {\n          token: paymentTokenAddress,\n          amount: basePrice.toString(),\n        },\n      ],\n      consideration: considerationItems,\n      endTime:\n        expirationTime?.toString() ??\n        getMaxOrderExpirationTimestamp().toString(),\n      zone: buildOfferResult.partialParameters.zone,\n      domain,\n      salt: BigInt(salt ?? 0).toString(),\n      restrictedByZone: true,\n      allowPartialFills: true,\n    };\n\n    const { executeAllActions } = await this.seaport_v1_6.createOrder(\n      payload,\n      accountAddress,\n    );\n    const order = await executeAllActions();\n\n    return this.api.postCollectionOffer(\n      order,\n      collectionSlug,\n      traitType,\n      traitValue,\n    );\n  }\n\n  /**\n   * Fulfill a private order for a designated address.\n   * @param options\n   * @param options.order The order to fulfill\n   * @param options.accountAddress Address of the wallet taking the order.\n   * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.\n   *                       This can be used for on-chain order attribution to assist with analytics.\n   * @param options.overrides Transaction overrides, ignored if not set.\n   * @returns Transaction hash of the order.\n   */\n  private async fulfillPrivateOrder({\n    order,\n    accountAddress,\n    domain,\n    overrides,\n  }: {\n    order: OrderV2;\n    accountAddress: string;\n    domain?: string;\n    overrides?: Overrides;\n  }): Promise<string> {\n    if (!order.taker?.address) {\n      throw new Error(\n        \"Order is not a private listing - must have a taker address\",\n      );\n    }\n    const counterOrder = constructPrivateListingCounterOrder(\n      order.protocolData,\n      order.taker.address,\n    );\n    const fulfillments = getPrivateListingFulfillments(order.protocolData);\n    const seaport = this.getSeaport(order.protocolAddress);\n    const transaction = await seaport\n      .matchOrders({\n        orders: [order.protocolData, counterOrder],\n        fulfillments,\n        overrides: {\n          ...overrides,\n          value: counterOrder.parameters.offer[0].startAmount,\n        },\n        accountAddress,\n        domain,\n      })\n      .transact();\n    const transactionReceipt = await transaction.wait();\n    if (!transactionReceipt) {\n      throw new Error(\"Missing transaction receipt\");\n    }\n\n    await this._confirmTransaction(\n      transactionReceipt.hash,\n      EventType.MatchOrders,\n      \"Fulfilling order\",\n    );\n    return transactionReceipt.hash;\n  }\n\n  /**\n   * Fulfill an order for an asset. The order can be either a listing or an offer.\n   * @param options\n   * @param options.order The order to fulfill, a.k.a. \"take\"\n   * @param options.accountAddress Address of the wallet taking the offer.\n   * @param options.recipientAddress The optional address to receive the order's item(s) or currencies. If not specified, defaults to accountAddress.\n   * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.\n   * @param options.overrides Transaction overrides, ignored if not set.\n   * @returns Transaction hash of the order.\n   *\n   * @throws Error if the accountAddress is not available through wallet or provider.\n   * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n   * @throws Error if attempting to fulfill the order with a recipient address which does not match a private listing.\n   */\n  public async fulfillOrder({\n    order,\n    accountAddress,\n    recipientAddress,\n    domain,\n    overrides,\n  }: {\n    order: OrderV2 | Order;\n    accountAddress: string;\n    recipientAddress?: string;\n    domain?: string;\n    overrides?: Overrides;\n  }): Promise<string> {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const protocolAddress =\n      (order as OrderV2).protocolAddress ?? (order as Order).protocol_address;\n    requireValidProtocol(protocolAddress);\n\n    const orderHash =\n      (order as OrderV2).orderHash ?? (order as Order).order_hash;\n\n    const side =\n      (order as OrderV2).side ??\n      ([OrderType.BASIC, OrderType.ENGLISH].includes((order as Listing).type)\n        ? OrderSide.ASK\n        : OrderSide.BID);\n\n    let extraData: string | undefined = undefined;\n\n    const protocolData =\n      (order as OrderV2).protocolData ?? (order as Order).protocol_data;\n\n    if (orderHash) {\n      const result = await this.api.generateFulfillmentData(\n        accountAddress,\n        orderHash,\n        protocolAddress,\n        side,\n      );\n\n      // If the order is using offer protection, the extraData\n      // must be included with the order to successfully fulfill.\n      const inputData = result.fulfillment_data.transaction.input_data;\n      if (\"orders\" in inputData && \"extraData\" in inputData.orders[0]) {\n        extraData = (inputData.orders[0] as AdvancedOrder).extraData;\n      }\n      const signature = result.fulfillment_data.orders[0].signature;\n      protocolData.signature = signature;\n    }\n\n    const isPrivateListing = \"taker\" in order ? !!order.taker : false;\n    if (isPrivateListing) {\n      if (recipientAddress) {\n        throw new Error(\n          \"Private listings cannot be fulfilled with a recipient address\",\n        );\n      }\n      return this.fulfillPrivateOrder({\n        order: order as OrderV2,\n        accountAddress,\n        domain,\n        overrides,\n      });\n    }\n\n    const seaport = this.getSeaport(protocolAddress);\n    const { executeAllActions } = await seaport.fulfillOrder({\n      order: protocolData,\n      accountAddress,\n      recipientAddress,\n      extraData,\n      domain,\n      overrides,\n    });\n    const transaction = await executeAllActions();\n\n    const transactionHash = ethers.Transaction.from(transaction).hash;\n    if (!transactionHash) {\n      throw new Error(\"Missing transaction hash\");\n    }\n\n    await this._confirmTransaction(\n      transactionHash,\n      EventType.MatchOrders,\n      \"Fulfilling order\",\n    );\n    return transactionHash;\n  }\n\n  /**\n   * Utility function to get the Seaport client based on the address.\n   * @param protocolAddress The Seaport address.\n   */\n  private getSeaport(protocolAddress: string): Seaport {\n    const checksummedProtocolAddress = ethers.getAddress(protocolAddress);\n    switch (checksummedProtocolAddress) {\n      case CROSS_CHAIN_SEAPORT_V1_5_ADDRESS:\n        return this.seaport_v1_5;\n      case CROSS_CHAIN_SEAPORT_V1_6_ADDRESS:\n        return this.seaport_v1_6;\n      default:\n        throw new Error(`Unsupported protocol address: ${protocolAddress}`);\n    }\n  }\n\n  /**\n   * Cancel orders onchain, preventing them from being fulfilled.\n   * @param options\n   * @param options.orders The orders to cancel\n   * @param options.accountAddress The account address cancelling the orders.\n   * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.\n   *                       This can be used for on-chain order attribution to assist with analytics.\n   * @param options.overrides Transaction overrides, ignored if not set.\n   * @returns Transaction hash of the order.\n   */\n  private async cancelSeaportOrders({\n    orders,\n    accountAddress,\n    domain,\n    protocolAddress = DEFAULT_SEAPORT_CONTRACT_ADDRESS,\n    overrides,\n  }: {\n    orders: OrderComponents[];\n    accountAddress: string;\n    domain?: string;\n    protocolAddress?: string;\n    overrides?: Overrides;\n  }): Promise<string> {\n    const seaport = this.getSeaport(protocolAddress);\n\n    const transaction = await seaport\n      .cancelOrders(orders, accountAddress, domain, overrides)\n      .transact();\n\n    return transaction.hash;\n  }\n\n  /**\n   * Cancel an order onchain, preventing it from ever being fulfilled.\n   * @param options\n   * @param options.order The order to cancel\n   * @param options.accountAddress The account address that will be cancelling the order.\n   * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.\n   *\n   * @throws Error if the accountAddress is not available through wallet or provider.\n   * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n   */\n  public async cancelOrder({\n    order,\n    accountAddress,\n    domain,\n  }: {\n    order: OrderV2;\n    accountAddress: string;\n    domain?: string;\n  }) {\n    await this._requireAccountIsAvailable(accountAddress);\n    requireValidProtocol(order.protocolAddress);\n\n    this._dispatch(EventType.CancelOrder, { orderV2: order, accountAddress });\n\n    // Transact and get the transaction hash\n    const transactionHash = await this.cancelSeaportOrders({\n      orders: [order.protocolData.parameters],\n      accountAddress,\n      domain,\n      protocolAddress: order.protocolAddress,\n    });\n\n    // Await transaction confirmation\n    await this._confirmTransaction(\n      transactionHash,\n      EventType.CancelOrder,\n      \"Cancelling order\",\n    );\n  }\n\n  /**\n   * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.\n   * Protocol and Chain are required to prevent hash collisions.\n   * Please note cancellation is only assured if a fulfillment signature was not vended prior to cancellation.\n   * @param protocolAddress The Seaport address for the order.\n   * @param orderJash The order hash, or external identifier, of the order.\n   * @param chain The chain where the order is located.\n   * @returns The response from the API.\n   */\n  public async offchainCancelOrder(\n    protocolAddress: string,\n    orderHash: string,\n    chain: Chain = this.chain,\n  ) {\n    return this.api.offchainCancelOrder(protocolAddress, orderHash, chain);\n  }\n\n  /**\n   * Returns whether an order is fulfillable.\n   * An order may not be fulfillable if a target item's transfer function\n   * is locked for some reason, e.g. an item is being rented within a game\n   * or trading has been locked for an item type.\n   * @param options\n   * @param options.order Order to check\n   * @param options.accountAddress The account address that will be fulfilling the order\n   * @returns True if the order is fulfillable, else False.\n   *\n   * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n   */\n  public async isOrderFulfillable({\n    order,\n    accountAddress,\n  }: {\n    order: OrderV2;\n    accountAddress: string;\n  }): Promise<boolean> {\n    requireValidProtocol(order.protocolAddress);\n\n    const seaport = this.getSeaport(order.protocolAddress);\n\n    try {\n      const isValid = await seaport\n        .validate([order.protocolData], accountAddress)\n        .staticCall();\n      return !!isValid;\n    } catch (error) {\n      if (hasErrorCode(error) && error.code === \"CALL_EXCEPTION\") {\n        return false;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get an account's balance of any Asset. This asset can be an ERC20, ERC1155, or ERC721.\n   * @param options\n   * @param options.accountAddress Account address to check\n   * @param options.asset The Asset to check balance for. tokenStandard must be set.\n   * @returns The balance of the asset for the account.\n   *\n   * @throws Error if the token standard does not support balanceOf.\n   */\n  public async getBalance({\n    accountAddress,\n    asset,\n  }: {\n    accountAddress: string;\n    asset: AssetWithTokenStandard;\n  }): Promise<bigint> {\n    switch (asset.tokenStandard) {\n      case TokenStandard.ERC20: {\n        const contract = ERC20__factory.connect(\n          asset.tokenAddress,\n          this.provider,\n        );\n        return await contract.balanceOf.staticCall(accountAddress);\n      }\n      case TokenStandard.ERC1155: {\n        if (asset.tokenId === undefined || asset.tokenId === null) {\n          throw new Error(\"Missing ERC1155 tokenId for getBalance\");\n        }\n        const contract = ERC1155__factory.connect(\n          asset.tokenAddress,\n          this.provider,\n        );\n        return await contract.balanceOf.staticCall(\n          accountAddress,\n          asset.tokenId,\n        );\n      }\n      case TokenStandard.ERC721: {\n        if (asset.tokenId === undefined || asset.tokenId === null) {\n          throw new Error(\"Missing ERC721 tokenId for getBalance\");\n        }\n        const contract = ERC721__factory.connect(\n          asset.tokenAddress,\n          this.provider,\n        );\n        try {\n          const owner = await contract.ownerOf.staticCall(asset.tokenId);\n          return BigInt(owner.toLowerCase() == accountAddress.toLowerCase());\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } catch (error: any) {\n          this.logger(\n            `Failed to get ownerOf ERC721: ${error.message ?? error}`,\n          );\n          return 0n;\n        }\n      }\n      default:\n        throw new Error(\"Unsupported token standard for getBalance\");\n    }\n  }\n\n  /**\n   * Transfer an asset. This asset can be an ERC20, ERC1155, or ERC721.\n   * @param options\n   * @param options.asset The Asset to transfer. tokenStandard must be set.\n   * @param options.amount Amount of asset to transfer. Not used for ERC721.\n   * @param options.fromAddress The address to transfer from\n   * @param options.toAddress The address to transfer to\n   * @param options.overrides Transaction overrides, ignored if not set.\n   */\n  public async transfer({\n    asset,\n    amount,\n    fromAddress,\n    toAddress,\n    overrides,\n  }: {\n    asset: AssetWithTokenStandard;\n    amount?: BigNumberish;\n    fromAddress: string;\n    toAddress: string;\n    overrides?: Overrides;\n  }): Promise<void> {\n    await this._requireAccountIsAvailable(fromAddress);\n    overrides = { ...overrides, from: fromAddress };\n    let transaction: Promise<ContractTransactionResponse>;\n\n    switch (asset.tokenStandard) {\n      case TokenStandard.ERC20: {\n        if (!amount) {\n          throw new Error(\"Missing ERC20 amount for transfer\");\n        }\n        const contract = ERC20__factory.connect(\n          asset.tokenAddress,\n          this._signerOrProvider,\n        );\n        transaction = contract.transfer(toAddress, amount, overrides);\n        break;\n      }\n      case TokenStandard.ERC1155: {\n        if (asset.tokenId === undefined || asset.tokenId === null) {\n          throw new Error(\"Missing ERC1155 tokenId for transfer\");\n        }\n        if (!amount) {\n          throw new Error(\"Missing ERC1155 amount for transfer\");\n        }\n        const contract = ERC1155__factory.connect(\n          asset.tokenAddress,\n          this._signerOrProvider,\n        );\n        transaction = contract.safeTransferFrom(\n          fromAddress,\n          toAddress,\n          asset.tokenId,\n          amount,\n          \"\",\n          overrides,\n        );\n        break;\n      }\n      case TokenStandard.ERC721: {\n        if (asset.tokenId === undefined || asset.tokenId === null) {\n          throw new Error(\"Missing ERC721 tokenId for transfer\");\n        }\n        const contract = ERC721__factory.connect(\n          asset.tokenAddress,\n          this._signerOrProvider,\n        );\n        transaction = contract.transferFrom(\n          fromAddress,\n          toAddress,\n          asset.tokenId,\n          overrides,\n        );\n        break;\n      }\n      default:\n        throw new Error(\"Unsupported token standard for transfer\");\n    }\n\n    try {\n      const transactionResponse = await transaction;\n      await this._confirmTransaction(\n        transactionResponse.hash,\n        EventType.Transfer,\n        \"Transferring asset\",\n      );\n    } catch (error) {\n      console.error(error);\n      this._dispatch(EventType.TransactionDenied, {\n        error,\n        accountAddress: fromAddress,\n      });\n    }\n  }\n\n  /**\n   * Instead of signing an off-chain order, this methods allows you to approve an order\n   * with on on-chain transaction.\n   * @param order Order to approve\n   * @param domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.\n   * @returns Transaction hash of the approval transaction\n   *\n   * @throws Error if the accountAddress is not available through wallet or provider.\n   * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n   */\n  public async approveOrder(order: OrderV2, domain?: string) {\n    await this._requireAccountIsAvailable(order.maker.address);\n    requireValidProtocol(order.protocolAddress);\n\n    this._dispatch(EventType.ApproveOrder, {\n      orderV2: order,\n      accountAddress: order.maker.address,\n    });\n\n    const seaport = this.getSeaport(order.protocolAddress);\n    const transaction = await seaport\n      .validate([order.protocolData], order.maker.address, domain)\n      .transact();\n\n    await this._confirmTransaction(\n      transaction.hash,\n      EventType.ApproveOrder,\n      \"Approving order\",\n    );\n\n    return transaction.hash;\n  }\n\n  /**\n   * Compute the `basePrice` and `endPrice` parameters to be used to price an order.\n   * Also validates the expiration time and auction type.\n   * @param tokenAddress Address of the ERC-20 token to use for trading. Use the null address for ETH.\n   * @param expirationTime When the auction expires, or 0 if never.\n   * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)\n   * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei)\n   */\n  private async _getPriceParameters(\n    orderSide: OrderSide,\n    tokenAddress: string,\n    expirationTime: BigNumberish,\n    startAmount: BigNumberish,\n    endAmount?: BigNumberish,\n  ) {\n    tokenAddress = tokenAddress.toLowerCase();\n    const isEther = tokenAddress === ethers.ZeroAddress;\n    let decimals = 18;\n    if (!isEther) {\n      if (tokenAddress in this._cachedPaymentTokenDecimals) {\n        decimals = this._cachedPaymentTokenDecimals[tokenAddress];\n      } else {\n        const paymentToken = await this.api.getPaymentToken(tokenAddress);\n        this._cachedPaymentTokenDecimals[tokenAddress] = paymentToken.decimals;\n        decimals = paymentToken.decimals;\n      }\n    }\n\n    const startAmountWei = ethers.parseUnits(startAmount.toString(), decimals);\n    const endAmountWei = endAmount\n      ? ethers.parseUnits(endAmount.toString(), decimals)\n      : undefined;\n    const priceDiffWei =\n      endAmountWei !== undefined ? startAmountWei - endAmountWei : 0n;\n\n    const basePrice = startAmountWei;\n    const endPrice = endAmountWei;\n\n    // Validation\n    if (startAmount == null || startAmountWei < 0) {\n      throw new Error(\"Starting price must be a number >= 0\");\n    }\n    if (isEther && orderSide === OrderSide.BID) {\n      throw new Error(\"Offers must use wrapped ETH or an ERC-20 token.\");\n    }\n    if (priceDiffWei < 0) {\n      throw new Error(\n        \"End price must be less than or equal to the start price.\",\n      );\n    }\n    if (priceDiffWei > 0 && BigInt(expirationTime) === 0n) {\n      throw new Error(\n        \"Expiration time must be set if order will change in price.\",\n      );\n    }\n    return { basePrice, endPrice };\n  }\n\n  private _dispatch(event: EventType, data: EventData) {\n    this._emitter.emit(event, data);\n  }\n\n  /**\n   * Throws an error if an account is not available through the provider.\n   * @param accountAddress The account address to check is available.\n   */\n  private async _requireAccountIsAvailable(accountAddress: string) {\n    const accountAddressChecksummed = ethers.getAddress(accountAddress);\n    const availableAccounts: string[] = [];\n\n    if (\"address\" in this._signerOrProvider) {\n      availableAccounts.push(this._signerOrProvider.address as string);\n    } else if (\"listAccounts\" in this._signerOrProvider) {\n      const addresses = (await this._signerOrProvider.listAccounts()).map(\n        (acct) => acct.address,\n      );\n      availableAccounts.push(...addresses);\n    }\n\n    if (availableAccounts.includes(accountAddressChecksummed)) {\n      return;\n    }\n\n    throw new Error(\n      `Specified accountAddress is not available through wallet or provider: ${accountAddressChecksummed}. Accounts available: ${\n        availableAccounts.length > 0 ? availableAccounts.join(\", \") : \"none\"\n      }`,\n    );\n  }\n\n  /**\n   * Wait for a transaction to confirm and log the success or failure.\n   * @param transactionHash The transaction hash to wait for.\n   * @param event The event type to log.\n   * @param description The description of the transaction.\n   */\n  private async _confirmTransaction(\n    transactionHash: string,\n    event: EventType,\n    description: string,\n  ): Promise<void> {\n    const transactionEventData = { transactionHash, event };\n    this.logger(`Transaction started: ${description}`);\n\n    try {\n      this._dispatch(EventType.TransactionCreated, transactionEventData);\n      await this.provider.waitForTransaction(transactionHash);\n      this.logger(`Transaction succeeded: ${description}`);\n      this._dispatch(EventType.TransactionConfirmed, transactionEventData);\n    } catch (error) {\n      this.logger(`Transaction failed: ${description}`);\n      this._dispatch(EventType.TransactionFailed, {\n        ...transactionEventData,\n        error,\n      });\n      throw error;\n    }\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5d9dffef3dd528b19cd97ec9511ffb4f4e65b362"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_i250qerm0=function(){return actualCoverage;};}return actualCoverage;}cov_i250qerm0();cov_i250qerm0().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_i250qerm0().s[1]++;exports.OpenSeaSDK=void 0;const EventEmitter=(cov_i250qerm0().s[2]++,require("events"));const seaport_js_1=(cov_i250qerm0().s[3]++,require("@opensea/seaport-js"));const constants_1=(cov_i250qerm0().s[4]++,require("@opensea/seaport-js/lib/constants"));const ethers_1=(cov_i250qerm0().s[5]++,require("ethers"));const api_1=(cov_i250qerm0().s[6]++,require("./api/api"));const constants_2=(cov_i250qerm0().s[7]++,require("./constants"));const privateListings_1=(cov_i250qerm0().s[8]++,require("./orders/privateListings"));const types_1=(cov_i250qerm0().s[9]++,require("./orders/types"));const utils_1=(cov_i250qerm0().s[10]++,require("./orders/utils"));const contracts_1=(cov_i250qerm0().s[11]++,require("./typechain/contracts"));const types_2=(cov_i250qerm0().s[12]++,require("./types"));const utils_2=(cov_i250qerm0().s[13]++,require("./utils/utils"));/**
 * The OpenSea SDK main class.
 * @category Main Classes
 */class OpenSeaSDK{/**
     * Create a new instance of OpenSeaSDK.
     * @param signerOrProvider Signer or provider to use for transactions. For example:
     * `new ethers.providers.JsonRpcProvider('https://mainnet.infura.io')` or
     * `new ethers.Wallet(privKey, provider)`
     * @param apiConfig configuration options, including `chain`
     * @param logger optional function for logging debug strings. defaults to no logging
     */constructor(signerOrProvider,apiConfig=(cov_i250qerm0().b[0][0]++,{}),logger){cov_i250qerm0().f[0]++;cov_i250qerm0().s[14]++;/** Internal cache of decimals for payment tokens to save network requests */this._cachedPaymentTokenDecimals={};cov_i250qerm0().s[15]++;this.getAmountWithBasisPointsApplied=(amount,basisPoints)=>{cov_i250qerm0().f[1]++;cov_i250qerm0().s[16]++;return(amount*basisPoints/constants_2.INVERSE_BASIS_POINT).toString();};// API config
cov_i250qerm0().s[17]++;(cov_i250qerm0().b[1][0]++,apiConfig.chain)??(cov_i250qerm0().b[1][1]++,apiConfig.chain=types_2.Chain.Mainnet);cov_i250qerm0().s[18]++;this.chain=apiConfig.chain;cov_i250qerm0().s[19]++;this.api=new api_1.OpenSeaAPI(apiConfig);cov_i250qerm0().s[20]++;this.provider=(cov_i250qerm0().b[2][0]++,signerOrProvider.provider)??(cov_i250qerm0().b[2][1]++,signerOrProvider);cov_i250qerm0().s[21]++;this._signerOrProvider=(cov_i250qerm0().b[3][0]++,signerOrProvider)??(cov_i250qerm0().b[3][1]++,this.provider);// eslint-disable-next-line @typescript-eslint/no-explicit-any
cov_i250qerm0().s[22]++;this.seaport_v1_5=new seaport_js_1.Seaport(this._signerOrProvider,{overrides:{contractAddress:constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS,seaportVersion:"1.5",defaultConduitKey:constants_1.OPENSEA_CONDUIT_KEY}});// eslint-disable-next-line @typescript-eslint/no-explicit-any
cov_i250qerm0().s[23]++;this.seaport_v1_6=new seaport_js_1.Seaport(this._signerOrProvider,{overrides:{defaultConduitKey:constants_1.OPENSEA_CONDUIT_KEY}});// Emit events
cov_i250qerm0().s[24]++;this._emitter=new EventEmitter();// Logger: default to no logging if fn not provided
cov_i250qerm0().s[25]++;this.logger=(cov_i250qerm0().b[4][0]++,logger)??(cov_i250qerm0().b[4][1]++,arg=>{cov_i250qerm0().f[2]++;cov_i250qerm0().s[26]++;return arg;});// Cache decimals for WETH payment token to skip network request
cov_i250qerm0().s[27]++;try{const wethAddress=(cov_i250qerm0().s[28]++,(0,utils_2.getWETHAddress)(this.chain).toLowerCase());cov_i250qerm0().s[29]++;this._cachedPaymentTokenDecimals[wethAddress]=18;// eslint-disable-next-line @typescript-eslint/no-explicit-any
}catch(error){cov_i250qerm0().s[30]++;if(error.message.includes("Unknown WETH address")){cov_i250qerm0().b[5][0]++;}// Ignore
else{cov_i250qerm0().b[5][1]++;cov_i250qerm0().s[31]++;console.error(error);}}}/**
     * Add a listener for events emitted by the SDK.
     * @param event The {@link EventType} to listen to.
     * @param listener A callback that will accept an object with {@link EventData}\
     * @param once Whether the listener should only be called once, or continue listening until removed.
     */addListener(event,listener,once=(cov_i250qerm0().b[6][0]++,false)){cov_i250qerm0().f[3]++;cov_i250qerm0().s[32]++;if(once){cov_i250qerm0().b[7][0]++;cov_i250qerm0().s[33]++;this._emitter.once(event,listener);}else{cov_i250qerm0().b[7][1]++;cov_i250qerm0().s[34]++;this._emitter.addListener(event,listener);}}/**
     * Remove an event listener by calling `.removeListener()` on an event and listener.
     * @param event The {@link EventType} to remove a listener for\
     * @param listener The listener to remove
     */removeListener(event,listener){cov_i250qerm0().f[4]++;cov_i250qerm0().s[35]++;this._emitter.removeListener(event,listener);}/**
     * Remove all event listeners. This should be called when you're unmounting
     * a component that listens to events to make UI updates.
     * @param event Optional EventType to remove listeners for
     */removeAllListeners(event){cov_i250qerm0().f[5]++;cov_i250qerm0().s[36]++;this._emitter.removeAllListeners(event);}/**
     * Wrap ETH into WETH.
     * W-ETH is needed for making offers.
     * @param options
     * @param options.amountInEth Amount of ether to wrap
     * @param options.accountAddress Address of the user's wallet containing the ether
     */async wrapEth({amountInEth,accountAddress}){cov_i250qerm0().f[6]++;cov_i250qerm0().s[37]++;await this._requireAccountIsAvailable(accountAddress);const value=(cov_i250qerm0().s[38]++,(0,ethers_1.parseEther)(ethers_1.FixedNumber.fromValue(amountInEth).toString()));cov_i250qerm0().s[39]++;this._dispatch(types_2.EventType.WrapEth,{accountAddress,amount:value});const wethContract=(cov_i250qerm0().s[40]++,new ethers_1.Contract((0,utils_2.getWETHAddress)(this.chain),["function deposit() payable"],this._signerOrProvider));cov_i250qerm0().s[41]++;try{const transaction=(cov_i250qerm0().s[42]++,await wethContract.deposit({value}));cov_i250qerm0().s[43]++;await this._confirmTransaction(transaction.hash,types_2.EventType.WrapEth,"Wrapping ETH");}catch(error){cov_i250qerm0().s[44]++;console.error(error);cov_i250qerm0().s[45]++;this._dispatch(types_2.EventType.TransactionDenied,{error,accountAddress});}}/**
     * Unwrap WETH into ETH.
     * Emits the `UnwrapWeth` event when the transaction is prompted.
     * @param options
     * @param options.amountInEth How much WETH to unwrap
     * @param options.accountAddress Address of the user's wallet containing the WETH
     */async unwrapWeth({amountInEth,accountAddress}){cov_i250qerm0().f[7]++;cov_i250qerm0().s[46]++;await this._requireAccountIsAvailable(accountAddress);const amount=(cov_i250qerm0().s[47]++,(0,ethers_1.parseEther)(ethers_1.FixedNumber.fromValue(amountInEth).toString()));cov_i250qerm0().s[48]++;this._dispatch(types_2.EventType.UnwrapWeth,{accountAddress,amount});const wethContract=(cov_i250qerm0().s[49]++,new ethers_1.Contract((0,utils_2.getWETHAddress)(this.chain),["function withdraw(uint wad) public"],this._signerOrProvider));cov_i250qerm0().s[50]++;try{const transaction=(cov_i250qerm0().s[51]++,await wethContract.withdraw(amount));cov_i250qerm0().s[52]++;await this._confirmTransaction(transaction.hash,types_2.EventType.UnwrapWeth,"Unwrapping W-ETH");}catch(error){cov_i250qerm0().s[53]++;console.error(error);cov_i250qerm0().s[54]++;this._dispatch(types_2.EventType.TransactionDenied,{error,accountAddress});}}async getFees({collection,seller,paymentTokenAddress,startAmount,endAmount,excludeOptionalCreatorFees}){cov_i250qerm0().f[8]++;let collectionFees=(cov_i250qerm0().s[55]++,collection.fees);cov_i250qerm0().s[56]++;if(excludeOptionalCreatorFees){cov_i250qerm0().b[8][0]++;cov_i250qerm0().s[57]++;collectionFees=collectionFees.filter(fee=>{cov_i250qerm0().f[9]++;cov_i250qerm0().s[58]++;return fee.required;});}else{cov_i250qerm0().b[8][1]++;}const collectionFeesBasisPoints=(cov_i250qerm0().s[59]++,(0,utils_2.totalBasisPointsForFees)(collectionFees));const sellerBasisPoints=(cov_i250qerm0().s[60]++,constants_2.INVERSE_BASIS_POINT-collectionFeesBasisPoints);cov_i250qerm0().s[61]++;const getConsiderationItem=(basisPoints,recipient)=>{cov_i250qerm0().f[10]++;cov_i250qerm0().s[62]++;return{token:paymentTokenAddress,amount:this.getAmountWithBasisPointsApplied(startAmount,basisPoints),endAmount:this.getAmountWithBasisPointsApplied((cov_i250qerm0().b[9][0]++,endAmount)??(cov_i250qerm0().b[9][1]++,startAmount),basisPoints),recipient};};const considerationItems=(cov_i250qerm0().s[63]++,[]);cov_i250qerm0().s[64]++;if(seller){cov_i250qerm0().b[10][0]++;cov_i250qerm0().s[65]++;considerationItems.push(getConsiderationItem(sellerBasisPoints,seller));}else{cov_i250qerm0().b[10][1]++;}cov_i250qerm0().s[66]++;for(const fee of collectionFees){cov_i250qerm0().s[67]++;considerationItems.push(getConsiderationItem((0,utils_2.basisPointsForFee)(fee),fee.recipient));}cov_i250qerm0().s[68]++;return considerationItems;}getNFTItems(nfts,quantities=(cov_i250qerm0().b[11][0]++,[])){cov_i250qerm0().f[11]++;cov_i250qerm0().s[69]++;return nfts.map((nft,index)=>{cov_i250qerm0().f[12]++;cov_i250qerm0().s[70]++;return{itemType:(0,utils_2.getAssetItemType)(nft.token_standard.toUpperCase()),token:(0,utils_2.getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress)(nft.contract),identifier:(cov_i250qerm0().b[12][0]++,nft.identifier)??(cov_i250qerm0().b[12][1]++,undefined),amount:(cov_i250qerm0().b[13][0]++,quantities[index].toString())??(cov_i250qerm0().b[13][1]++,"1")};});}/**
     * Create and submit an offer on an asset.
     * @param options
     * @param options.asset The asset to trade. tokenAddress and tokenId must be defined.
     * @param options.accountAddress Address of the wallet making the offer.
     * @param options.startAmount Value of the offer in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified)
     * @param options.quantity The number of assets to bid for (if fungible or semi-fungible). Defaults to 1.
     * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt.
     * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.
     * @param options.expirationTime Expiration time for the order, in UTC seconds
     * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to WETH
     * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the offer. Default: false.
     * @returns The {@link OrderV2} that was created.
     *
     * @throws Error if the asset does not contain a token id.
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the startAmount is not greater than 0.
     * @throws Error if paymentTokenAddress is not WETH on anything other than Ethereum mainnet.
     */async createOffer({asset,accountAddress,startAmount,quantity=(cov_i250qerm0().b[14][0]++,1),domain,salt,expirationTime,paymentTokenAddress=(cov_i250qerm0().b[15][0]++,(0,utils_2.getWETHAddress)(this.chain)),excludeOptionalCreatorFees=(cov_i250qerm0().b[16][0]++,false)}){cov_i250qerm0().f[13]++;cov_i250qerm0().s[71]++;await this._requireAccountIsAvailable(accountAddress);const{nft}=(cov_i250qerm0().s[72]++,await this.api.getNFT(asset.tokenAddress,asset.tokenId));const considerationAssetItems=(cov_i250qerm0().s[73]++,this.getNFTItems([nft],[BigInt((cov_i250qerm0().b[17][0]++,quantity)??(cov_i250qerm0().b[17][1]++,1))]));const{basePrice}=(cov_i250qerm0().s[74]++,await this._getPriceParameters(types_2.OrderSide.BID,paymentTokenAddress,(cov_i250qerm0().b[18][0]++,expirationTime)??(cov_i250qerm0().b[18][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)()),startAmount));const collection=(cov_i250qerm0().s[75]++,await this.api.getCollection(nft.collection));const considerationFeeItems=(cov_i250qerm0().s[76]++,await this.getFees({collection,paymentTokenAddress,startAmount:basePrice,excludeOptionalCreatorFees}));let zone=(cov_i250qerm0().s[77]++,constants_2.DEFAULT_ZONE);cov_i250qerm0().s[78]++;if(collection.requiredZone){cov_i250qerm0().b[19][0]++;cov_i250qerm0().s[79]++;zone=collection.requiredZone;}else{cov_i250qerm0().b[19][1]++;}const{executeAllActions}=(cov_i250qerm0().s[80]++,await this.seaport_v1_6.createOrder({offer:[{token:paymentTokenAddress,amount:basePrice.toString()}],consideration:[...considerationAssetItems,...considerationFeeItems],endTime:expirationTime!==undefined?(cov_i250qerm0().b[20][0]++,BigInt(expirationTime).toString()):(cov_i250qerm0().b[20][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)().toString()),zone,domain,salt:BigInt((cov_i250qerm0().b[21][0]++,salt)??(cov_i250qerm0().b[21][1]++,0)).toString(),restrictedByZone:zone!==constants_2.DEFAULT_ZONE,allowPartialFills:true},accountAddress));const order=(cov_i250qerm0().s[81]++,await executeAllActions());cov_i250qerm0().s[82]++;return this.api.postOrder(order,{protocol:"seaport",protocolAddress:utils_1.DEFAULT_SEAPORT_CONTRACT_ADDRESS,side:types_2.OrderSide.BID});}/**
     * Create and submit a listing for an asset.
     * @param options
     * @param options.asset The asset to trade. tokenAddress and tokenId must be defined.
     * @param options.accountAddress  Address of the wallet making the listing
     * @param options.startAmount Value of the listing at the start of the auction in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified)
     * @param options.endAmount Value of the listing at the end of the auction. If specified, price will change linearly between startAmount and endAmount as time progresses.
     * @param options.quantity The number of assets to list (if fungible or semi-fungible). Defaults to 1.
     * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt. This can be used for on-chain order attribution to assist with analytics.
     * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.
     * @param options.listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
     * @param options.expirationTime Expiration time for the order, in UTC seconds.
     * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to ETH
     * @param options.buyerAddress Optional address that's allowed to purchase this item. If specified, no other address will be able to take the order, unless its value is the null address.
     * @param options.englishAuction If true, the order will be listed as an English auction.
     * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the listing. Default: false.
     * @returns The {@link OrderV2} that was created.
     *
     * @throws Error if the asset does not contain a token id.
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the startAmount is not greater than 0.
     * @throws Error if paymentTokenAddress is not WETH on anything other than Ethereum mainnet.
     */async createListing({asset,accountAddress,startAmount,endAmount,quantity=(cov_i250qerm0().b[22][0]++,1),domain,salt,listingTime,expirationTime,paymentTokenAddress=(cov_i250qerm0().b[23][0]++,ethers_1.ethers.ZeroAddress),buyerAddress,englishAuction,excludeOptionalCreatorFees=(cov_i250qerm0().b[24][0]++,false)}){cov_i250qerm0().f[14]++;cov_i250qerm0().s[83]++;await this._requireAccountIsAvailable(accountAddress);const{nft}=(cov_i250qerm0().s[84]++,await this.api.getNFT(asset.tokenAddress,asset.tokenId));const offerAssetItems=(cov_i250qerm0().s[85]++,this.getNFTItems([nft],[BigInt((cov_i250qerm0().b[25][0]++,quantity)??(cov_i250qerm0().b[25][1]++,1))]));cov_i250qerm0().s[86]++;if((cov_i250qerm0().b[27][0]++,englishAuction)&&(cov_i250qerm0().b[27][1]++,paymentTokenAddress==ethers_1.ethers.ZeroAddress)){cov_i250qerm0().b[26][0]++;cov_i250qerm0().s[87]++;throw new Error(`English auctions must use wrapped ETH or an ERC-20 token.`);}else{cov_i250qerm0().b[26][1]++;}const{basePrice,endPrice}=(cov_i250qerm0().s[88]++,await this._getPriceParameters(types_2.OrderSide.ASK,paymentTokenAddress,(cov_i250qerm0().b[28][0]++,expirationTime)??(cov_i250qerm0().b[28][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)()),startAmount,(cov_i250qerm0().b[29][0]++,endAmount)??(cov_i250qerm0().b[29][1]++,undefined)));const collection=(cov_i250qerm0().s[89]++,await this.api.getCollection(nft.collection));const considerationFeeItems=(cov_i250qerm0().s[90]++,await this.getFees({collection,seller:accountAddress,paymentTokenAddress,startAmount:basePrice,endAmount:endPrice,excludeOptionalCreatorFees}));cov_i250qerm0().s[91]++;if(buyerAddress){cov_i250qerm0().b[30][0]++;cov_i250qerm0().s[92]++;considerationFeeItems.push(...(0,privateListings_1.getPrivateListingConsiderations)(offerAssetItems,buyerAddress));}else{cov_i250qerm0().b[30][1]++;}let zone=(cov_i250qerm0().s[93]++,constants_2.DEFAULT_ZONE);cov_i250qerm0().s[94]++;if(englishAuction){cov_i250qerm0().b[31][0]++;cov_i250qerm0().s[95]++;if((0,utils_2.isTestChain)(this.chain)){cov_i250qerm0().b[32][0]++;cov_i250qerm0().s[96]++;zone=constants_2.ENGLISH_AUCTION_ZONE_TESTNETS;}else{cov_i250qerm0().b[32][1]++;cov_i250qerm0().s[97]++;zone=constants_2.ENGLISH_AUCTION_ZONE_MAINNETS;}}else{cov_i250qerm0().b[31][1]++;cov_i250qerm0().s[98]++;if(collection.requiredZone){cov_i250qerm0().b[33][0]++;cov_i250qerm0().s[99]++;zone=collection.requiredZone;}else{cov_i250qerm0().b[33][1]++;}}const{executeAllActions}=(cov_i250qerm0().s[100]++,await this.seaport_v1_6.createOrder({offer:offerAssetItems,consideration:considerationFeeItems,startTime:listingTime?.toString(),endTime:(cov_i250qerm0().b[34][0]++,expirationTime?.toString())??(cov_i250qerm0().b[34][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)().toString()),zone,domain,salt:BigInt((cov_i250qerm0().b[35][0]++,salt)??(cov_i250qerm0().b[35][1]++,0)).toString(),restrictedByZone:zone!==constants_2.DEFAULT_ZONE,allowPartialFills:englishAuction?(cov_i250qerm0().b[36][0]++,false):(cov_i250qerm0().b[36][1]++,true)},accountAddress));const order=(cov_i250qerm0().s[101]++,await executeAllActions());cov_i250qerm0().s[102]++;return this.api.postOrder(order,{protocol:"seaport",protocolAddress:utils_1.DEFAULT_SEAPORT_CONTRACT_ADDRESS,side:types_2.OrderSide.ASK});}/**
     * Create and submit a collection offer.
     * @param options
     * @param options.collectionSlug Identifier for the collection.
     * @param options.accountAddress Address of the wallet making the offer.
     * @param options.amount Value of the offer in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified).
     * @param options.quantity The number of assets to bid for (if fungible or semi-fungible).
     * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt. This can be used for on-chain order attribution to assist with analytics.
     * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.
     * @param options.expirationTime Expiration time for the order, in UTC seconds.
     * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to WETH.
     * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the offer. Default: false.
     * @param options.offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.
     * @param options.traitType If defined, the trait name to create the collection offer for.
     * @param options.traitValue If defined, the trait value to create the collection offer for.
     * @returns The {@link CollectionOffer} that was created.
     */async createCollectionOffer({collectionSlug,accountAddress,amount,quantity,domain,salt,expirationTime,paymentTokenAddress=(cov_i250qerm0().b[37][0]++,(0,utils_2.getWETHAddress)(this.chain)),excludeOptionalCreatorFees=(cov_i250qerm0().b[38][0]++,false),offerProtectionEnabled=(cov_i250qerm0().b[39][0]++,true),traitType,traitValue}){cov_i250qerm0().f[15]++;cov_i250qerm0().s[103]++;await this._requireAccountIsAvailable(accountAddress);const collection=(cov_i250qerm0().s[104]++,await this.api.getCollection(collectionSlug));const buildOfferResult=(cov_i250qerm0().s[105]++,await this.api.buildOffer(accountAddress,quantity,collectionSlug,offerProtectionEnabled,traitType,traitValue));const item=(cov_i250qerm0().s[106]++,buildOfferResult.partialParameters.consideration[0]);const convertedConsiderationItem=(cov_i250qerm0().s[107]++,{itemType:item.itemType,token:item.token,identifier:item.identifierOrCriteria,amount:item.startAmount});const{basePrice}=(cov_i250qerm0().s[108]++,await this._getPriceParameters(types_2.OrderSide.ASK,paymentTokenAddress,(cov_i250qerm0().b[40][0]++,expirationTime)??(cov_i250qerm0().b[40][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)()),amount));const considerationFeeItems=(cov_i250qerm0().s[109]++,await this.getFees({collection,paymentTokenAddress,startAmount:basePrice,endAmount:basePrice,excludeOptionalCreatorFees}));const considerationItems=(cov_i250qerm0().s[110]++,[convertedConsiderationItem,...considerationFeeItems]);const payload=(cov_i250qerm0().s[111]++,{offerer:accountAddress,offer:[{token:paymentTokenAddress,amount:basePrice.toString()}],consideration:considerationItems,endTime:(cov_i250qerm0().b[41][0]++,expirationTime?.toString())??(cov_i250qerm0().b[41][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)().toString()),zone:buildOfferResult.partialParameters.zone,domain,salt:BigInt((cov_i250qerm0().b[42][0]++,salt)??(cov_i250qerm0().b[42][1]++,0)).toString(),restrictedByZone:true,allowPartialFills:true});const{executeAllActions}=(cov_i250qerm0().s[112]++,await this.seaport_v1_6.createOrder(payload,accountAddress));const order=(cov_i250qerm0().s[113]++,await executeAllActions());cov_i250qerm0().s[114]++;return this.api.postCollectionOffer(order,collectionSlug,traitType,traitValue);}/**
     * Fulfill a private order for a designated address.
     * @param options
     * @param options.order The order to fulfill
     * @param options.accountAddress Address of the wallet taking the order.
     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.
     *                       This can be used for on-chain order attribution to assist with analytics.
     * @param options.overrides Transaction overrides, ignored if not set.
     * @returns Transaction hash of the order.
     */async fulfillPrivateOrder({order,accountAddress,domain,overrides}){cov_i250qerm0().f[16]++;cov_i250qerm0().s[115]++;if(!order.taker?.address){cov_i250qerm0().b[43][0]++;cov_i250qerm0().s[116]++;throw new Error("Order is not a private listing - must have a taker address");}else{cov_i250qerm0().b[43][1]++;}const counterOrder=(cov_i250qerm0().s[117]++,(0,privateListings_1.constructPrivateListingCounterOrder)(order.protocolData,order.taker.address));const fulfillments=(cov_i250qerm0().s[118]++,(0,privateListings_1.getPrivateListingFulfillments)(order.protocolData));const seaport=(cov_i250qerm0().s[119]++,this.getSeaport(order.protocolAddress));const transaction=(cov_i250qerm0().s[120]++,await seaport.matchOrders({orders:[order.protocolData,counterOrder],fulfillments,overrides:{...overrides,value:counterOrder.parameters.offer[0].startAmount},accountAddress,domain}).transact());const transactionReceipt=(cov_i250qerm0().s[121]++,await transaction.wait());cov_i250qerm0().s[122]++;if(!transactionReceipt){cov_i250qerm0().b[44][0]++;cov_i250qerm0().s[123]++;throw new Error("Missing transaction receipt");}else{cov_i250qerm0().b[44][1]++;}cov_i250qerm0().s[124]++;await this._confirmTransaction(transactionReceipt.hash,types_2.EventType.MatchOrders,"Fulfilling order");cov_i250qerm0().s[125]++;return transactionReceipt.hash;}/**
     * Fulfill an order for an asset. The order can be either a listing or an offer.
     * @param options
     * @param options.order The order to fulfill, a.k.a. "take"
     * @param options.accountAddress Address of the wallet taking the offer.
     * @param options.recipientAddress The optional address to receive the order's item(s) or currencies. If not specified, defaults to accountAddress.
     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.
     * @param options.overrides Transaction overrides, ignored if not set.
     * @returns Transaction hash of the order.
     *
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     * @throws Error if attempting to fulfill the order with a recipient address which does not match a private listing.
     */async fulfillOrder({order,accountAddress,recipientAddress,domain,overrides}){cov_i250qerm0().f[17]++;cov_i250qerm0().s[126]++;await this._requireAccountIsAvailable(accountAddress);const protocolAddress=(cov_i250qerm0().s[127]++,(cov_i250qerm0().b[45][0]++,order.protocolAddress)??(cov_i250qerm0().b[45][1]++,order.protocol_address));cov_i250qerm0().s[128]++;(0,utils_2.requireValidProtocol)(protocolAddress);const orderHash=(cov_i250qerm0().s[129]++,(cov_i250qerm0().b[46][0]++,order.orderHash)??(cov_i250qerm0().b[46][1]++,order.order_hash));const side=(cov_i250qerm0().s[130]++,(cov_i250qerm0().b[47][0]++,order.side)??(cov_i250qerm0().b[47][1]++,[types_1.OrderType.BASIC,types_1.OrderType.ENGLISH].includes(order.type)?(cov_i250qerm0().b[48][0]++,types_2.OrderSide.ASK):(cov_i250qerm0().b[48][1]++,types_2.OrderSide.BID)));let extraData=(cov_i250qerm0().s[131]++,undefined);const protocolData=(cov_i250qerm0().s[132]++,(cov_i250qerm0().b[49][0]++,order.protocolData)??(cov_i250qerm0().b[49][1]++,order.protocol_data));cov_i250qerm0().s[133]++;if(orderHash){cov_i250qerm0().b[50][0]++;const result=(cov_i250qerm0().s[134]++,await this.api.generateFulfillmentData(accountAddress,orderHash,protocolAddress,side));// If the order is using offer protection, the extraData
// must be included with the order to successfully fulfill.
const inputData=(cov_i250qerm0().s[135]++,result.fulfillment_data.transaction.input_data);cov_i250qerm0().s[136]++;if((cov_i250qerm0().b[52][0]++,"orders"in inputData)&&(cov_i250qerm0().b[52][1]++,"extraData"in inputData.orders[0])){cov_i250qerm0().b[51][0]++;cov_i250qerm0().s[137]++;extraData=inputData.orders[0].extraData;}else{cov_i250qerm0().b[51][1]++;}const signature=(cov_i250qerm0().s[138]++,result.fulfillment_data.orders[0].signature);cov_i250qerm0().s[139]++;protocolData.signature=signature;}else{cov_i250qerm0().b[50][1]++;}const isPrivateListing=(cov_i250qerm0().s[140]++,"taker"in order?(cov_i250qerm0().b[53][0]++,!!order.taker):(cov_i250qerm0().b[53][1]++,false));cov_i250qerm0().s[141]++;if(isPrivateListing){cov_i250qerm0().b[54][0]++;cov_i250qerm0().s[142]++;if(recipientAddress){cov_i250qerm0().b[55][0]++;cov_i250qerm0().s[143]++;throw new Error("Private listings cannot be fulfilled with a recipient address");}else{cov_i250qerm0().b[55][1]++;}cov_i250qerm0().s[144]++;return this.fulfillPrivateOrder({order:order,accountAddress,domain,overrides});}else{cov_i250qerm0().b[54][1]++;}const seaport=(cov_i250qerm0().s[145]++,this.getSeaport(protocolAddress));const{executeAllActions}=(cov_i250qerm0().s[146]++,await seaport.fulfillOrder({order:protocolData,accountAddress,recipientAddress,extraData,domain,overrides}));const transaction=(cov_i250qerm0().s[147]++,await executeAllActions());const transactionHash=(cov_i250qerm0().s[148]++,ethers_1.ethers.Transaction.from(transaction).hash);cov_i250qerm0().s[149]++;if(!transactionHash){cov_i250qerm0().b[56][0]++;cov_i250qerm0().s[150]++;throw new Error("Missing transaction hash");}else{cov_i250qerm0().b[56][1]++;}cov_i250qerm0().s[151]++;await this._confirmTransaction(transactionHash,types_2.EventType.MatchOrders,"Fulfilling order");cov_i250qerm0().s[152]++;return transactionHash;}/**
     * Utility function to get the Seaport client based on the address.
     * @param protocolAddress The Seaport address.
     */getSeaport(protocolAddress){cov_i250qerm0().f[18]++;const checksummedProtocolAddress=(cov_i250qerm0().s[153]++,ethers_1.ethers.getAddress(protocolAddress));cov_i250qerm0().s[154]++;switch(checksummedProtocolAddress){case constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS:cov_i250qerm0().b[57][0]++;cov_i250qerm0().s[155]++;return this.seaport_v1_5;case constants_1.CROSS_CHAIN_SEAPORT_V1_6_ADDRESS:cov_i250qerm0().b[57][1]++;cov_i250qerm0().s[156]++;return this.seaport_v1_6;default:cov_i250qerm0().b[57][2]++;cov_i250qerm0().s[157]++;throw new Error(`Unsupported protocol address: ${protocolAddress}`);}}/**
     * Cancel orders onchain, preventing them from being fulfilled.
     * @param options
     * @param options.orders The orders to cancel
     * @param options.accountAddress The account address cancelling the orders.
     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.
     *                       This can be used for on-chain order attribution to assist with analytics.
     * @param options.overrides Transaction overrides, ignored if not set.
     * @returns Transaction hash of the order.
     */async cancelSeaportOrders({orders,accountAddress,domain,protocolAddress=(cov_i250qerm0().b[58][0]++,utils_1.DEFAULT_SEAPORT_CONTRACT_ADDRESS),overrides}){cov_i250qerm0().f[19]++;const seaport=(cov_i250qerm0().s[158]++,this.getSeaport(protocolAddress));const transaction=(cov_i250qerm0().s[159]++,await seaport.cancelOrders(orders,accountAddress,domain,overrides).transact());cov_i250qerm0().s[160]++;return transaction.hash;}/**
     * Cancel an order onchain, preventing it from ever being fulfilled.
     * @param options
     * @param options.order The order to cancel
     * @param options.accountAddress The account address that will be cancelling the order.
     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.
     *
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     */async cancelOrder({order,accountAddress,domain}){cov_i250qerm0().f[20]++;cov_i250qerm0().s[161]++;await this._requireAccountIsAvailable(accountAddress);cov_i250qerm0().s[162]++;(0,utils_2.requireValidProtocol)(order.protocolAddress);cov_i250qerm0().s[163]++;this._dispatch(types_2.EventType.CancelOrder,{orderV2:order,accountAddress});// Transact and get the transaction hash
const transactionHash=(cov_i250qerm0().s[164]++,await this.cancelSeaportOrders({orders:[order.protocolData.parameters],accountAddress,domain,protocolAddress:order.protocolAddress}));// Await transaction confirmation
cov_i250qerm0().s[165]++;await this._confirmTransaction(transactionHash,types_2.EventType.CancelOrder,"Cancelling order");}/**
     * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.
     * Protocol and Chain are required to prevent hash collisions.
     * Please note cancellation is only assured if a fulfillment signature was not vended prior to cancellation.
     * @param protocolAddress The Seaport address for the order.
     * @param orderJash The order hash, or external identifier, of the order.
     * @param chain The chain where the order is located.
     * @returns The response from the API.
     */async offchainCancelOrder(protocolAddress,orderHash,chain=(cov_i250qerm0().b[59][0]++,this.chain)){cov_i250qerm0().f[21]++;cov_i250qerm0().s[166]++;return this.api.offchainCancelOrder(protocolAddress,orderHash,chain);}/**
     * Returns whether an order is fulfillable.
     * An order may not be fulfillable if a target item's transfer function
     * is locked for some reason, e.g. an item is being rented within a game
     * or trading has been locked for an item type.
     * @param options
     * @param options.order Order to check
     * @param options.accountAddress The account address that will be fulfilling the order
     * @returns True if the order is fulfillable, else False.
     *
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     */async isOrderFulfillable({order,accountAddress}){cov_i250qerm0().f[22]++;cov_i250qerm0().s[167]++;(0,utils_2.requireValidProtocol)(order.protocolAddress);const seaport=(cov_i250qerm0().s[168]++,this.getSeaport(order.protocolAddress));cov_i250qerm0().s[169]++;try{const isValid=(cov_i250qerm0().s[170]++,await seaport.validate([order.protocolData],accountAddress).staticCall());cov_i250qerm0().s[171]++;return!!isValid;}catch(error){cov_i250qerm0().s[172]++;if((cov_i250qerm0().b[61][0]++,(0,utils_2.hasErrorCode)(error))&&(cov_i250qerm0().b[61][1]++,error.code==="CALL_EXCEPTION")){cov_i250qerm0().b[60][0]++;cov_i250qerm0().s[173]++;return false;}else{cov_i250qerm0().b[60][1]++;}cov_i250qerm0().s[174]++;throw error;}}/**
     * Get an account's balance of any Asset. This asset can be an ERC20, ERC1155, or ERC721.
     * @param options
     * @param options.accountAddress Account address to check
     * @param options.asset The Asset to check balance for. tokenStandard must be set.
     * @returns The balance of the asset for the account.
     *
     * @throws Error if the token standard does not support balanceOf.
     */async getBalance({accountAddress,asset}){cov_i250qerm0().f[23]++;cov_i250qerm0().s[175]++;switch(asset.tokenStandard){case types_2.TokenStandard.ERC20:cov_i250qerm0().b[62][0]++;{const contract=(cov_i250qerm0().s[176]++,contracts_1.ERC20__factory.connect(asset.tokenAddress,this.provider));cov_i250qerm0().s[177]++;return await contract.balanceOf.staticCall(accountAddress);}case types_2.TokenStandard.ERC1155:cov_i250qerm0().b[62][1]++;{cov_i250qerm0().s[178]++;if((cov_i250qerm0().b[64][0]++,asset.tokenId===undefined)||(cov_i250qerm0().b[64][1]++,asset.tokenId===null)){cov_i250qerm0().b[63][0]++;cov_i250qerm0().s[179]++;throw new Error("Missing ERC1155 tokenId for getBalance");}else{cov_i250qerm0().b[63][1]++;}const contract=(cov_i250qerm0().s[180]++,contracts_1.ERC1155__factory.connect(asset.tokenAddress,this.provider));cov_i250qerm0().s[181]++;return await contract.balanceOf.staticCall(accountAddress,asset.tokenId);}case types_2.TokenStandard.ERC721:cov_i250qerm0().b[62][2]++;{cov_i250qerm0().s[182]++;if((cov_i250qerm0().b[66][0]++,asset.tokenId===undefined)||(cov_i250qerm0().b[66][1]++,asset.tokenId===null)){cov_i250qerm0().b[65][0]++;cov_i250qerm0().s[183]++;throw new Error("Missing ERC721 tokenId for getBalance");}else{cov_i250qerm0().b[65][1]++;}const contract=(cov_i250qerm0().s[184]++,contracts_1.ERC721__factory.connect(asset.tokenAddress,this.provider));cov_i250qerm0().s[185]++;try{const owner=(cov_i250qerm0().s[186]++,await contract.ownerOf.staticCall(asset.tokenId));cov_i250qerm0().s[187]++;return BigInt(owner.toLowerCase()==accountAddress.toLowerCase());// eslint-disable-next-line @typescript-eslint/no-explicit-any
}catch(error){cov_i250qerm0().s[188]++;this.logger(`Failed to get ownerOf ERC721: ${(cov_i250qerm0().b[67][0]++,error.message)??(cov_i250qerm0().b[67][1]++,error)}`);cov_i250qerm0().s[189]++;return 0n;}}default:cov_i250qerm0().b[62][3]++;cov_i250qerm0().s[190]++;throw new Error("Unsupported token standard for getBalance");}}/**
     * Transfer an asset. This asset can be an ERC20, ERC1155, or ERC721.
     * @param options
     * @param options.asset The Asset to transfer. tokenStandard must be set.
     * @param options.amount Amount of asset to transfer. Not used for ERC721.
     * @param options.fromAddress The address to transfer from
     * @param options.toAddress The address to transfer to
     * @param options.overrides Transaction overrides, ignored if not set.
     */async transfer({asset,amount,fromAddress,toAddress,overrides}){cov_i250qerm0().f[24]++;cov_i250qerm0().s[191]++;await this._requireAccountIsAvailable(fromAddress);cov_i250qerm0().s[192]++;overrides={...overrides,from:fromAddress};let transaction;cov_i250qerm0().s[193]++;switch(asset.tokenStandard){case types_2.TokenStandard.ERC20:cov_i250qerm0().b[68][0]++;{cov_i250qerm0().s[194]++;if(!amount){cov_i250qerm0().b[69][0]++;cov_i250qerm0().s[195]++;throw new Error("Missing ERC20 amount for transfer");}else{cov_i250qerm0().b[69][1]++;}const contract=(cov_i250qerm0().s[196]++,contracts_1.ERC20__factory.connect(asset.tokenAddress,this._signerOrProvider));cov_i250qerm0().s[197]++;transaction=contract.transfer(toAddress,amount,overrides);cov_i250qerm0().s[198]++;break;}case types_2.TokenStandard.ERC1155:cov_i250qerm0().b[68][1]++;{cov_i250qerm0().s[199]++;if((cov_i250qerm0().b[71][0]++,asset.tokenId===undefined)||(cov_i250qerm0().b[71][1]++,asset.tokenId===null)){cov_i250qerm0().b[70][0]++;cov_i250qerm0().s[200]++;throw new Error("Missing ERC1155 tokenId for transfer");}else{cov_i250qerm0().b[70][1]++;}cov_i250qerm0().s[201]++;if(!amount){cov_i250qerm0().b[72][0]++;cov_i250qerm0().s[202]++;throw new Error("Missing ERC1155 amount for transfer");}else{cov_i250qerm0().b[72][1]++;}const contract=(cov_i250qerm0().s[203]++,contracts_1.ERC1155__factory.connect(asset.tokenAddress,this._signerOrProvider));cov_i250qerm0().s[204]++;transaction=contract.safeTransferFrom(fromAddress,toAddress,asset.tokenId,amount,"",overrides);cov_i250qerm0().s[205]++;break;}case types_2.TokenStandard.ERC721:cov_i250qerm0().b[68][2]++;{cov_i250qerm0().s[206]++;if((cov_i250qerm0().b[74][0]++,asset.tokenId===undefined)||(cov_i250qerm0().b[74][1]++,asset.tokenId===null)){cov_i250qerm0().b[73][0]++;cov_i250qerm0().s[207]++;throw new Error("Missing ERC721 tokenId for transfer");}else{cov_i250qerm0().b[73][1]++;}const contract=(cov_i250qerm0().s[208]++,contracts_1.ERC721__factory.connect(asset.tokenAddress,this._signerOrProvider));cov_i250qerm0().s[209]++;transaction=contract.transferFrom(fromAddress,toAddress,asset.tokenId,overrides);cov_i250qerm0().s[210]++;break;}default:cov_i250qerm0().b[68][3]++;cov_i250qerm0().s[211]++;throw new Error("Unsupported token standard for transfer");}cov_i250qerm0().s[212]++;try{const transactionResponse=(cov_i250qerm0().s[213]++,await transaction);cov_i250qerm0().s[214]++;await this._confirmTransaction(transactionResponse.hash,types_2.EventType.Transfer,"Transferring asset");}catch(error){cov_i250qerm0().s[215]++;console.error(error);cov_i250qerm0().s[216]++;this._dispatch(types_2.EventType.TransactionDenied,{error,accountAddress:fromAddress});}}/**
     * Instead of signing an off-chain order, this methods allows you to approve an order
     * with on on-chain transaction.
     * @param order Order to approve
     * @param domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.
     * @returns Transaction hash of the approval transaction
     *
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     */async approveOrder(order,domain){cov_i250qerm0().f[25]++;cov_i250qerm0().s[217]++;await this._requireAccountIsAvailable(order.maker.address);cov_i250qerm0().s[218]++;(0,utils_2.requireValidProtocol)(order.protocolAddress);cov_i250qerm0().s[219]++;this._dispatch(types_2.EventType.ApproveOrder,{orderV2:order,accountAddress:order.maker.address});const seaport=(cov_i250qerm0().s[220]++,this.getSeaport(order.protocolAddress));const transaction=(cov_i250qerm0().s[221]++,await seaport.validate([order.protocolData],order.maker.address,domain).transact());cov_i250qerm0().s[222]++;await this._confirmTransaction(transaction.hash,types_2.EventType.ApproveOrder,"Approving order");cov_i250qerm0().s[223]++;return transaction.hash;}/**
     * Compute the `basePrice` and `endPrice` parameters to be used to price an order.
     * Also validates the expiration time and auction type.
     * @param tokenAddress Address of the ERC-20 token to use for trading. Use the null address for ETH.
     * @param expirationTime When the auction expires, or 0 if never.
     * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)
     * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei)
     */async _getPriceParameters(orderSide,tokenAddress,expirationTime,startAmount,endAmount){cov_i250qerm0().f[26]++;cov_i250qerm0().s[224]++;tokenAddress=tokenAddress.toLowerCase();const isEther=(cov_i250qerm0().s[225]++,tokenAddress===ethers_1.ethers.ZeroAddress);let decimals=(cov_i250qerm0().s[226]++,18);cov_i250qerm0().s[227]++;if(!isEther){cov_i250qerm0().b[75][0]++;cov_i250qerm0().s[228]++;if(tokenAddress in this._cachedPaymentTokenDecimals){cov_i250qerm0().b[76][0]++;cov_i250qerm0().s[229]++;decimals=this._cachedPaymentTokenDecimals[tokenAddress];}else{cov_i250qerm0().b[76][1]++;const paymentToken=(cov_i250qerm0().s[230]++,await this.api.getPaymentToken(tokenAddress));cov_i250qerm0().s[231]++;this._cachedPaymentTokenDecimals[tokenAddress]=paymentToken.decimals;cov_i250qerm0().s[232]++;decimals=paymentToken.decimals;}}else{cov_i250qerm0().b[75][1]++;}const startAmountWei=(cov_i250qerm0().s[233]++,ethers_1.ethers.parseUnits(startAmount.toString(),decimals));const endAmountWei=(cov_i250qerm0().s[234]++,endAmount?(cov_i250qerm0().b[77][0]++,ethers_1.ethers.parseUnits(endAmount.toString(),decimals)):(cov_i250qerm0().b[77][1]++,undefined));const priceDiffWei=(cov_i250qerm0().s[235]++,endAmountWei!==undefined?(cov_i250qerm0().b[78][0]++,startAmountWei-endAmountWei):(cov_i250qerm0().b[78][1]++,0n));const basePrice=(cov_i250qerm0().s[236]++,startAmountWei);const endPrice=(cov_i250qerm0().s[237]++,endAmountWei);// Validation
cov_i250qerm0().s[238]++;if((cov_i250qerm0().b[80][0]++,startAmount==null)||(cov_i250qerm0().b[80][1]++,startAmountWei<0)){cov_i250qerm0().b[79][0]++;cov_i250qerm0().s[239]++;throw new Error("Starting price must be a number >= 0");}else{cov_i250qerm0().b[79][1]++;}cov_i250qerm0().s[240]++;if((cov_i250qerm0().b[82][0]++,isEther)&&(cov_i250qerm0().b[82][1]++,orderSide===types_2.OrderSide.BID)){cov_i250qerm0().b[81][0]++;cov_i250qerm0().s[241]++;throw new Error("Offers must use wrapped ETH or an ERC-20 token.");}else{cov_i250qerm0().b[81][1]++;}cov_i250qerm0().s[242]++;if(priceDiffWei<0){cov_i250qerm0().b[83][0]++;cov_i250qerm0().s[243]++;throw new Error("End price must be less than or equal to the start price.");}else{cov_i250qerm0().b[83][1]++;}cov_i250qerm0().s[244]++;if((cov_i250qerm0().b[85][0]++,priceDiffWei>0)&&(cov_i250qerm0().b[85][1]++,BigInt(expirationTime)===0n)){cov_i250qerm0().b[84][0]++;cov_i250qerm0().s[245]++;throw new Error("Expiration time must be set if order will change in price.");}else{cov_i250qerm0().b[84][1]++;}cov_i250qerm0().s[246]++;return{basePrice,endPrice};}_dispatch(event,data){cov_i250qerm0().f[27]++;cov_i250qerm0().s[247]++;this._emitter.emit(event,data);}/**
     * Throws an error if an account is not available through the provider.
     * @param accountAddress The account address to check is available.
     */async _requireAccountIsAvailable(accountAddress){cov_i250qerm0().f[28]++;const accountAddressChecksummed=(cov_i250qerm0().s[248]++,ethers_1.ethers.getAddress(accountAddress));const availableAccounts=(cov_i250qerm0().s[249]++,[]);cov_i250qerm0().s[250]++;if("address"in this._signerOrProvider){cov_i250qerm0().b[86][0]++;cov_i250qerm0().s[251]++;availableAccounts.push(this._signerOrProvider.address);}else{cov_i250qerm0().b[86][1]++;cov_i250qerm0().s[252]++;if("listAccounts"in this._signerOrProvider){cov_i250qerm0().b[87][0]++;const addresses=(cov_i250qerm0().s[253]++,(await this._signerOrProvider.listAccounts()).map(acct=>{cov_i250qerm0().f[29]++;cov_i250qerm0().s[254]++;return acct.address;}));cov_i250qerm0().s[255]++;availableAccounts.push(...addresses);}else{cov_i250qerm0().b[87][1]++;}}cov_i250qerm0().s[256]++;if(availableAccounts.includes(accountAddressChecksummed)){cov_i250qerm0().b[88][0]++;cov_i250qerm0().s[257]++;return;}else{cov_i250qerm0().b[88][1]++;}cov_i250qerm0().s[258]++;throw new Error(`Specified accountAddress is not available through wallet or provider: ${accountAddressChecksummed}. Accounts available: ${availableAccounts.length>0?(cov_i250qerm0().b[89][0]++,availableAccounts.join(", ")):(cov_i250qerm0().b[89][1]++,"none")}`);}/**
     * Wait for a transaction to confirm and log the success or failure.
     * @param transactionHash The transaction hash to wait for.
     * @param event The event type to log.
     * @param description The description of the transaction.
     */async _confirmTransaction(transactionHash,event,description){cov_i250qerm0().f[30]++;const transactionEventData=(cov_i250qerm0().s[259]++,{transactionHash,event});cov_i250qerm0().s[260]++;this.logger(`Transaction started: ${description}`);cov_i250qerm0().s[261]++;try{cov_i250qerm0().s[262]++;this._dispatch(types_2.EventType.TransactionCreated,transactionEventData);cov_i250qerm0().s[263]++;await this.provider.waitForTransaction(transactionHash);cov_i250qerm0().s[264]++;this.logger(`Transaction succeeded: ${description}`);cov_i250qerm0().s[265]++;this._dispatch(types_2.EventType.TransactionConfirmed,transactionEventData);}catch(error){cov_i250qerm0().s[266]++;this.logger(`Transaction failed: ${description}`);cov_i250qerm0().s[267]++;this._dispatch(types_2.EventType.TransactionFailed,{...transactionEventData,error});cov_i250qerm0().s[268]++;throw error;}}}cov_i250qerm0().s[269]++;exports.OpenSeaSDK=OpenSeaSDK;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JnL2Rldi9vcGVuc2VhLWpzL3NyYy9zZGsudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yZy9kZXYvb3BlbnNlYS1qcy9zcmMvc2RrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUF3QztBQUN4QyxvREFBOEM7QUFDOUMsaUVBSTJDO0FBTzNDLG1DQVVnQjtBQUNoQixtQ0FBdUM7QUFFdkMsMkNBS3FCO0FBQ3JCLDhEQUlrQztBQUNsQywwQ0FBb0Q7QUFDcEQsMENBQWtFO0FBQ2xFLHFEQUkrQjtBQUMvQixtQ0FVaUI7QUFDakIseUNBVXVCO0FBRXZCOzs7R0FHRztBQUNILE1BQWEsVUFBVTtJQW1CckI7Ozs7Ozs7T0FPRztJQUNILFlBQ0UsZ0JBQTBDLEVBQzFDLFlBQThCLEVBQUUsRUFDaEMsTUFBOEI7UUFqQmhDLDZFQUE2RTtRQUNyRSxnQ0FBMkIsR0FBa0MsRUFBRSxDQUFDO1FBK0toRSxvQ0FBK0IsR0FBRyxDQUN4QyxNQUFjLEVBQ2QsV0FBbUIsRUFDWCxFQUFFO1lBQ1YsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxHQUFHLCtCQUFtQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkUsQ0FBQyxDQUFDO1FBbEtBLGFBQWE7UUFDYixTQUFTLENBQUMsS0FBSyxLQUFmLFNBQVMsQ0FBQyxLQUFLLEdBQUssYUFBSyxDQUFDLE9BQU8sRUFBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGdCQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFFLGdCQUEyQixDQUFDLFFBQVE7WUFDcEQsZ0JBQWdCLENBQW9CLENBQUM7UUFDdkMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFM0QsOERBQThEO1FBQzlELElB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QUFFLG9CQUFvQixDQUFDLENBQUM7WUFDbkUsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsMEJBQTBCLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBUyxDQUFDLG9CQUFvQixFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDdkUsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQVMsQ0FBQyxpQkFBaUIsRUFBRTtnQkFDMUMsR0FBRyxvQkFBb0I7Z0JBQ3ZCLEtBQUs7YUFDTixDQUFDLENBQUM7WUFDSCxNQUFNLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUF2ckNELGdDQXVyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmltcG9ydCB7IFNlYXBvcnQgfSBmcm9tIFwiQG9wZW5zZWEvc2VhcG9ydC1qc1wiO1xuaW1wb3J0IHtcbiAgQ1JPU1NfQ0hBSU5fU0VBUE9SVF9WMV81X0FERFJFU1MsXG4gIENST1NTX0NIQUlOX1NFQVBPUlRfVjFfNl9BRERSRVNTLFxuICBPUEVOU0VBX0NPTkRVSVRfS0VZLFxufSBmcm9tIFwiQG9wZW5zZWEvc2VhcG9ydC1qcy9saWIvY29uc3RhbnRzXCI7XG5pbXBvcnQge1xuICBBZHZhbmNlZE9yZGVyLFxuICBDb25zaWRlcmF0aW9uSW5wdXRJdGVtLFxuICBDcmVhdGVJbnB1dEl0ZW0sXG4gIE9yZGVyQ29tcG9uZW50cyxcbn0gZnJvbSBcIkBvcGVuc2VhL3NlYXBvcnQtanMvbGliL3R5cGVzXCI7XG5pbXBvcnQge1xuICBCaWdOdW1iZXJpc2gsXG4gIENvbnRyYWN0LFxuICBGaXhlZE51bWJlcixcbiAgT3ZlcnJpZGVzLFxuICBTaWduZXIsXG4gIGV0aGVycyxcbiAgcGFyc2VFdGhlcixcbiAgSnNvblJwY1Byb3ZpZGVyLFxuICBDb250cmFjdFRyYW5zYWN0aW9uUmVzcG9uc2UsXG59IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7IE9wZW5TZWFBUEkgfSBmcm9tIFwiLi9hcGkvYXBpXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uT2ZmZXIsIExpc3RpbmcsIE5GVCwgT3JkZXIgfSBmcm9tIFwiLi9hcGkvdHlwZXNcIjtcbmltcG9ydCB7XG4gIElOVkVSU0VfQkFTSVNfUE9JTlQsXG4gIERFRkFVTFRfWk9ORSxcbiAgRU5HTElTSF9BVUNUSU9OX1pPTkVfTUFJTk5FVFMsXG4gIEVOR0xJU0hfQVVDVElPTl9aT05FX1RFU1RORVRTLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7XG4gIGNvbnN0cnVjdFByaXZhdGVMaXN0aW5nQ291bnRlck9yZGVyLFxuICBnZXRQcml2YXRlTGlzdGluZ0NvbnNpZGVyYXRpb25zLFxuICBnZXRQcml2YXRlTGlzdGluZ0Z1bGZpbGxtZW50cyxcbn0gZnJvbSBcIi4vb3JkZXJzL3ByaXZhdGVMaXN0aW5nc1wiO1xuaW1wb3J0IHsgT3JkZXJUeXBlLCBPcmRlclYyIH0gZnJvbSBcIi4vb3JkZXJzL3R5cGVzXCI7XG5pbXBvcnQgeyBERUZBVUxUX1NFQVBPUlRfQ09OVFJBQ1RfQUREUkVTUyB9IGZyb20gXCIuL29yZGVycy91dGlsc1wiO1xuaW1wb3J0IHtcbiAgRVJDMTE1NV9fZmFjdG9yeSxcbiAgRVJDMjBfX2ZhY3RvcnksXG4gIEVSQzcyMV9fZmFjdG9yeSxcbn0gZnJvbSBcIi4vdHlwZWNoYWluL2NvbnRyYWN0c1wiO1xuaW1wb3J0IHtcbiAgRXZlbnREYXRhLFxuICBFdmVudFR5cGUsXG4gIENoYWluLFxuICBPcGVuU2VhQVBJQ29uZmlnLFxuICBPcGVuU2VhQ29sbGVjdGlvbixcbiAgT3JkZXJTaWRlLFxuICBUb2tlblN0YW5kYXJkLFxuICBBc3NldFdpdGhUb2tlblN0YW5kYXJkLFxuICBBc3NldFdpdGhUb2tlbklkLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHtcbiAgZ2V0TWF4T3JkZXJFeHBpcmF0aW9uVGltZXN0YW1wLFxuICBoYXNFcnJvckNvZGUsXG4gIGdldEFzc2V0SXRlbVR5cGUsXG4gIGdldEFkZHJlc3NBZnRlclJlbWFwcGluZ1NoYXJlZFN0b3JlZnJvbnRBZGRyZXNzVG9MYXp5TWludEFkYXB0ZXJBZGRyZXNzLFxuICByZXF1aXJlVmFsaWRQcm90b2NvbCxcbiAgZ2V0V0VUSEFkZHJlc3MsXG4gIGlzVGVzdENoYWluLFxuICBiYXNpc1BvaW50c0ZvckZlZSxcbiAgdG90YWxCYXNpc1BvaW50c0ZvckZlZXMsXG59IGZyb20gXCIuL3V0aWxzL3V0aWxzXCI7XG5cbi8qKlxuICogVGhlIE9wZW5TZWEgU0RLIG1haW4gY2xhc3MuXG4gKiBAY2F0ZWdvcnkgTWFpbiBDbGFzc2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBPcGVuU2VhU0RLIHtcbiAgLyoqIFByb3ZpZGVyIHRvIHVzZSBmb3IgdHJhbnNhY3Rpb25zLiAqL1xuICBwdWJsaWMgcHJvdmlkZXI6IEpzb25ScGNQcm92aWRlcjtcbiAgLyoqIFNlYXBvcnQgdjEuNiBjbGllbnQgQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL1Byb2plY3RPcGVuU2VhL3NlYXBvcnQtanN9ICovXG4gIHB1YmxpYyBzZWFwb3J0X3YxXzY6IFNlYXBvcnQ7XG4gIC8qKiBTZWFwb3J0IHYxLjUgY2xpZW50IEBzZWUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9Qcm9qZWN0T3BlblNlYS9zZWFwb3J0LWpzfSAqL1xuICBwdWJsaWMgc2VhcG9ydF92MV81OiBTZWFwb3J0O1xuICAvKiogTG9nZ2VyIGZ1bmN0aW9uIHRvIHVzZSB3aGVuIGRlYnVnZ2luZyAqL1xuICBwdWJsaWMgbG9nZ2VyOiAoYXJnOiBzdHJpbmcpID0+IHZvaWQ7XG4gIC8qKiBBUEkgaW5zdGFuY2UgKi9cbiAgcHVibGljIHJlYWRvbmx5IGFwaTogT3BlblNlYUFQSTtcbiAgLyoqIFRoZSBjb25maWd1cmVkIGNoYWluICovXG4gIHB1YmxpYyByZWFkb25seSBjaGFpbjogQ2hhaW47XG4gIC8qKiBJbnRlcm5hbCBjYWNoZSBvZiBkZWNpbWFscyBmb3IgcGF5bWVudCB0b2tlbnMgdG8gc2F2ZSBuZXR3b3JrIHJlcXVlc3RzICovXG4gIHByaXZhdGUgX2NhY2hlZFBheW1lbnRUb2tlbkRlY2ltYWxzOiB7IFthZGRyZXNzOiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xuXG4gIHByaXZhdGUgX2VtaXR0ZXI6IEV2ZW50RW1pdHRlcjtcbiAgcHJpdmF0ZSBfc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgSnNvblJwY1Byb3ZpZGVyO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgT3BlblNlYVNESy5cbiAgICogQHBhcmFtIHNpZ25lck9yUHJvdmlkZXIgU2lnbmVyIG9yIHByb3ZpZGVyIHRvIHVzZSBmb3IgdHJhbnNhY3Rpb25zLiBGb3IgZXhhbXBsZTpcbiAgICogYG5ldyBldGhlcnMucHJvdmlkZXJzLkpzb25ScGNQcm92aWRlcignaHR0cHM6Ly9tYWlubmV0LmluZnVyYS5pbycpYCBvclxuICAgKiBgbmV3IGV0aGVycy5XYWxsZXQocHJpdktleSwgcHJvdmlkZXIpYFxuICAgKiBAcGFyYW0gYXBpQ29uZmlnIGNvbmZpZ3VyYXRpb24gb3B0aW9ucywgaW5jbHVkaW5nIGBjaGFpbmBcbiAgICogQHBhcmFtIGxvZ2dlciBvcHRpb25hbCBmdW5jdGlvbiBmb3IgbG9nZ2luZyBkZWJ1ZyBzdHJpbmdzLiBkZWZhdWx0cyB0byBubyBsb2dnaW5nXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBzaWduZXJPclByb3ZpZGVyOiBTaWduZXIgfCBKc29uUnBjUHJvdmlkZXIsXG4gICAgYXBpQ29uZmlnOiBPcGVuU2VhQVBJQ29uZmlnID0ge30sXG4gICAgbG9nZ2VyPzogKGFyZzogc3RyaW5nKSA9PiB2b2lkLFxuICApIHtcbiAgICAvLyBBUEkgY29uZmlnXG4gICAgYXBpQ29uZmlnLmNoYWluID8/PSBDaGFpbi5NYWlubmV0O1xuICAgIHRoaXMuY2hhaW4gPSBhcGlDb25maWcuY2hhaW47XG4gICAgdGhpcy5hcGkgPSBuZXcgT3BlblNlYUFQSShhcGlDb25maWcpO1xuXG4gICAgdGhpcy5wcm92aWRlciA9ICgoc2lnbmVyT3JQcm92aWRlciBhcyBTaWduZXIpLnByb3ZpZGVyID8/XG4gICAgICBzaWduZXJPclByb3ZpZGVyKSBhcyBKc29uUnBjUHJvdmlkZXI7XG4gICAgdGhpcy5fc2lnbmVyT3JQcm92aWRlciA9IHNpZ25lck9yUHJvdmlkZXIgPz8gdGhpcy5wcm92aWRlcjtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdGhpcy5zZWFwb3J0X3YxXzUgPSBuZXcgU2VhcG9ydCh0aGlzLl9zaWduZXJPclByb3ZpZGVyIGFzIGFueSwge1xuICAgICAgb3ZlcnJpZGVzOiB7XG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogQ1JPU1NfQ0hBSU5fU0VBUE9SVF9WMV81X0FERFJFU1MsXG4gICAgICAgIHNlYXBvcnRWZXJzaW9uOiBcIjEuNVwiLFxuICAgICAgICBkZWZhdWx0Q29uZHVpdEtleTogT1BFTlNFQV9DT05EVUlUX0tFWSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHRoaXMuc2VhcG9ydF92MV82ID0gbmV3IFNlYXBvcnQodGhpcy5fc2lnbmVyT3JQcm92aWRlciBhcyBhbnksIHtcbiAgICAgIG92ZXJyaWRlczogeyBkZWZhdWx0Q29uZHVpdEtleTogT1BFTlNFQV9DT05EVUlUX0tFWSB9LFxuICAgIH0pO1xuXG4gICAgLy8gRW1pdCBldmVudHNcbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgLy8gTG9nZ2VyOiBkZWZhdWx0IHRvIG5vIGxvZ2dpbmcgaWYgZm4gbm90IHByb3ZpZGVkXG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXIgPz8gKChhcmc6IHN0cmluZykgPT4gYXJnKTtcblxuICAgIC8vIENhY2hlIGRlY2ltYWxzIGZvciBXRVRIIHBheW1lbnQgdG9rZW4gdG8gc2tpcCBuZXR3b3JrIHJlcXVlc3RcbiAgICB0cnkge1xuICAgICAgY29uc3Qgd2V0aEFkZHJlc3MgPSBnZXRXRVRIQWRkcmVzcyh0aGlzLmNoYWluKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdGhpcy5fY2FjaGVkUGF5bWVudFRva2VuRGVjaW1hbHNbd2V0aEFkZHJlc3NdID0gMTg7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKFwiVW5rbm93biBXRVRIIGFkZHJlc3NcIikpIHtcbiAgICAgICAgLy8gSWdub3JlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbGlzdGVuZXIgZm9yIGV2ZW50cyBlbWl0dGVkIGJ5IHRoZSBTREsuXG4gICAqIEBwYXJhbSBldmVudCBUaGUge0BsaW5rIEV2ZW50VHlwZX0gdG8gbGlzdGVuIHRvLlxuICAgKiBAcGFyYW0gbGlzdGVuZXIgQSBjYWxsYmFjayB0aGF0IHdpbGwgYWNjZXB0IGFuIG9iamVjdCB3aXRoIHtAbGluayBFdmVudERhdGF9XFxcbiAgICogQHBhcmFtIG9uY2UgV2hldGhlciB0aGUgbGlzdGVuZXIgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uY2UsIG9yIGNvbnRpbnVlIGxpc3RlbmluZyB1bnRpbCByZW1vdmVkLlxuICAgKi9cbiAgcHVibGljIGFkZExpc3RlbmVyKFxuICAgIGV2ZW50OiBFdmVudFR5cGUsXG4gICAgbGlzdGVuZXI6IChkYXRhOiBFdmVudERhdGEpID0+IHZvaWQsXG4gICAgb25jZSA9IGZhbHNlLFxuICApIHtcbiAgICBpZiAob25jZSkge1xuICAgICAgdGhpcy5fZW1pdHRlci5vbmNlKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VtaXR0ZXIuYWRkTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGV2ZW50IGxpc3RlbmVyIGJ5IGNhbGxpbmcgYC5yZW1vdmVMaXN0ZW5lcigpYCBvbiBhbiBldmVudCBhbmQgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSBldmVudCBUaGUge0BsaW5rIEV2ZW50VHlwZX0gdG8gcmVtb3ZlIGEgbGlzdGVuZXIgZm9yXFxcbiAgICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byByZW1vdmVcbiAgICovXG4gIHB1YmxpYyByZW1vdmVMaXN0ZW5lcihldmVudDogRXZlbnRUeXBlLCBsaXN0ZW5lcjogKGRhdGE6IEV2ZW50RGF0YSkgPT4gdm9pZCkge1xuICAgIHRoaXMuX2VtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIGV2ZW50IGxpc3RlbmVycy4gVGhpcyBzaG91bGQgYmUgY2FsbGVkIHdoZW4geW91J3JlIHVubW91bnRpbmdcbiAgICogYSBjb21wb25lbnQgdGhhdCBsaXN0ZW5zIHRvIGV2ZW50cyB0byBtYWtlIFVJIHVwZGF0ZXMuXG4gICAqIEBwYXJhbSBldmVudCBPcHRpb25hbCBFdmVudFR5cGUgdG8gcmVtb3ZlIGxpc3RlbmVycyBmb3JcbiAgICovXG4gIHB1YmxpYyByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQ/OiBFdmVudFR5cGUpIHtcbiAgICB0aGlzLl9lbWl0dGVyLnJlbW92ZUFsbExpc3RlbmVycyhldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogV3JhcCBFVEggaW50byBXRVRILlxuICAgKiBXLUVUSCBpcyBuZWVkZWQgZm9yIG1ha2luZyBvZmZlcnMuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLmFtb3VudEluRXRoIEFtb3VudCBvZiBldGhlciB0byB3cmFwXG4gICAqIEBwYXJhbSBvcHRpb25zLmFjY291bnRBZGRyZXNzIEFkZHJlc3Mgb2YgdGhlIHVzZXIncyB3YWxsZXQgY29udGFpbmluZyB0aGUgZXRoZXJcbiAgICovXG4gIHB1YmxpYyBhc3luYyB3cmFwRXRoKHtcbiAgICBhbW91bnRJbkV0aCxcbiAgICBhY2NvdW50QWRkcmVzcyxcbiAgfToge1xuICAgIGFtb3VudEluRXRoOiBCaWdOdW1iZXJpc2g7XG4gICAgYWNjb3VudEFkZHJlc3M6IHN0cmluZztcbiAgfSkge1xuICAgIGF3YWl0IHRoaXMuX3JlcXVpcmVBY2NvdW50SXNBdmFpbGFibGUoYWNjb3VudEFkZHJlc3MpO1xuXG4gICAgY29uc3QgdmFsdWUgPSBwYXJzZUV0aGVyKEZpeGVkTnVtYmVyLmZyb21WYWx1ZShhbW91bnRJbkV0aCkudG9TdHJpbmcoKSk7XG5cbiAgICB0aGlzLl9kaXNwYXRjaChFdmVudFR5cGUuV3JhcEV0aCwgeyBhY2NvdW50QWRkcmVzcywgYW1vdW50OiB2YWx1ZSB9KTtcblxuICAgIGNvbnN0IHdldGhDb250cmFjdCA9IG5ldyBDb250cmFjdChcbiAgICAgIGdldFdFVEhBZGRyZXNzKHRoaXMuY2hhaW4pLFxuICAgICAgW1wiZnVuY3Rpb24gZGVwb3NpdCgpIHBheWFibGVcIl0sXG4gICAgICB0aGlzLl9zaWduZXJPclByb3ZpZGVyLFxuICAgICk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBhd2FpdCB3ZXRoQ29udHJhY3QuZGVwb3NpdCh7IHZhbHVlIH0pO1xuICAgICAgYXdhaXQgdGhpcy5fY29uZmlybVRyYW5zYWN0aW9uKFxuICAgICAgICB0cmFuc2FjdGlvbi5oYXNoLFxuICAgICAgICBFdmVudFR5cGUuV3JhcEV0aCxcbiAgICAgICAgXCJXcmFwcGluZyBFVEhcIixcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgdGhpcy5fZGlzcGF0Y2goRXZlbnRUeXBlLlRyYW5zYWN0aW9uRGVuaWVkLCB7IGVycm9yLCBhY2NvdW50QWRkcmVzcyB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW53cmFwIFdFVEggaW50byBFVEguXG4gICAqIEVtaXRzIHRoZSBgVW53cmFwV2V0aGAgZXZlbnQgd2hlbiB0aGUgdHJhbnNhY3Rpb24gaXMgcHJvbXB0ZWQuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLmFtb3VudEluRXRoIEhvdyBtdWNoIFdFVEggdG8gdW53cmFwXG4gICAqIEBwYXJhbSBvcHRpb25zLmFjY291bnRBZGRyZXNzIEFkZHJlc3Mgb2YgdGhlIHVzZXIncyB3YWxsZXQgY29udGFpbmluZyB0aGUgV0VUSFxuICAgKi9cbiAgcHVibGljIGFzeW5jIHVud3JhcFdldGgoe1xuICAgIGFtb3VudEluRXRoLFxuICAgIGFjY291bnRBZGRyZXNzLFxuICB9OiB7XG4gICAgYW1vdW50SW5FdGg6IEJpZ051bWJlcmlzaDtcbiAgICBhY2NvdW50QWRkcmVzczogc3RyaW5nO1xuICB9KSB7XG4gICAgYXdhaXQgdGhpcy5fcmVxdWlyZUFjY291bnRJc0F2YWlsYWJsZShhY2NvdW50QWRkcmVzcyk7XG5cbiAgICBjb25zdCBhbW91bnQgPSBwYXJzZUV0aGVyKEZpeGVkTnVtYmVyLmZyb21WYWx1ZShhbW91bnRJbkV0aCkudG9TdHJpbmcoKSk7XG5cbiAgICB0aGlzLl9kaXNwYXRjaChFdmVudFR5cGUuVW53cmFwV2V0aCwgeyBhY2NvdW50QWRkcmVzcywgYW1vdW50IH0pO1xuXG4gICAgY29uc3Qgd2V0aENvbnRyYWN0ID0gbmV3IENvbnRyYWN0KFxuICAgICAgZ2V0V0VUSEFkZHJlc3ModGhpcy5jaGFpbiksXG4gICAgICBbXCJmdW5jdGlvbiB3aXRoZHJhdyh1aW50IHdhZCkgcHVibGljXCJdLFxuICAgICAgdGhpcy5fc2lnbmVyT3JQcm92aWRlcixcbiAgICApO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgd2V0aENvbnRyYWN0LndpdGhkcmF3KGFtb3VudCk7XG4gICAgICBhd2FpdCB0aGlzLl9jb25maXJtVHJhbnNhY3Rpb24oXG4gICAgICAgIHRyYW5zYWN0aW9uLmhhc2gsXG4gICAgICAgIEV2ZW50VHlwZS5VbndyYXBXZXRoLFxuICAgICAgICBcIlVud3JhcHBpbmcgVy1FVEhcIixcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgdGhpcy5fZGlzcGF0Y2goRXZlbnRUeXBlLlRyYW5zYWN0aW9uRGVuaWVkLCB7IGVycm9yLCBhY2NvdW50QWRkcmVzcyB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEFtb3VudFdpdGhCYXNpc1BvaW50c0FwcGxpZWQgPSAoXG4gICAgYW1vdW50OiBiaWdpbnQsXG4gICAgYmFzaXNQb2ludHM6IGJpZ2ludCxcbiAgKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gKChhbW91bnQgKiBiYXNpc1BvaW50cykgLyBJTlZFUlNFX0JBU0lTX1BPSU5UKS50b1N0cmluZygpO1xuICB9O1xuXG4gIHByaXZhdGUgYXN5bmMgZ2V0RmVlcyh7XG4gICAgY29sbGVjdGlvbixcbiAgICBzZWxsZXIsXG4gICAgcGF5bWVudFRva2VuQWRkcmVzcyxcbiAgICBzdGFydEFtb3VudCxcbiAgICBlbmRBbW91bnQsXG4gICAgZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMsXG4gIH06IHtcbiAgICBjb2xsZWN0aW9uOiBPcGVuU2VhQ29sbGVjdGlvbjtcbiAgICBzZWxsZXI/OiBzdHJpbmc7XG4gICAgcGF5bWVudFRva2VuQWRkcmVzczogc3RyaW5nO1xuICAgIHN0YXJ0QW1vdW50OiBiaWdpbnQ7XG4gICAgZW5kQW1vdW50PzogYmlnaW50O1xuICAgIGV4Y2x1ZGVPcHRpb25hbENyZWF0b3JGZWVzPzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8Q29uc2lkZXJhdGlvbklucHV0SXRlbVtdPiB7XG4gICAgbGV0IGNvbGxlY3Rpb25GZWVzID0gY29sbGVjdGlvbi5mZWVzO1xuICAgIGlmIChleGNsdWRlT3B0aW9uYWxDcmVhdG9yRmVlcykge1xuICAgICAgY29sbGVjdGlvbkZlZXMgPSBjb2xsZWN0aW9uRmVlcy5maWx0ZXIoKGZlZSkgPT4gZmVlLnJlcXVpcmVkKTtcbiAgICB9XG4gICAgY29uc3QgY29sbGVjdGlvbkZlZXNCYXNpc1BvaW50cyA9IHRvdGFsQmFzaXNQb2ludHNGb3JGZWVzKGNvbGxlY3Rpb25GZWVzKTtcbiAgICBjb25zdCBzZWxsZXJCYXNpc1BvaW50cyA9IElOVkVSU0VfQkFTSVNfUE9JTlQgLSBjb2xsZWN0aW9uRmVlc0Jhc2lzUG9pbnRzO1xuXG4gICAgY29uc3QgZ2V0Q29uc2lkZXJhdGlvbkl0ZW0gPSAoYmFzaXNQb2ludHM6IGJpZ2ludCwgcmVjaXBpZW50Pzogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b2tlbjogcGF5bWVudFRva2VuQWRkcmVzcyxcbiAgICAgICAgYW1vdW50OiB0aGlzLmdldEFtb3VudFdpdGhCYXNpc1BvaW50c0FwcGxpZWQoc3RhcnRBbW91bnQsIGJhc2lzUG9pbnRzKSxcbiAgICAgICAgZW5kQW1vdW50OiB0aGlzLmdldEFtb3VudFdpdGhCYXNpc1BvaW50c0FwcGxpZWQoXG4gICAgICAgICAgZW5kQW1vdW50ID8/IHN0YXJ0QW1vdW50LFxuICAgICAgICAgIGJhc2lzUG9pbnRzLFxuICAgICAgICApLFxuICAgICAgICByZWNpcGllbnQsXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBjb25zdCBjb25zaWRlcmF0aW9uSXRlbXM6IENvbnNpZGVyYXRpb25JbnB1dEl0ZW1bXSA9IFtdO1xuXG4gICAgaWYgKHNlbGxlcikge1xuICAgICAgY29uc2lkZXJhdGlvbkl0ZW1zLnB1c2goZ2V0Q29uc2lkZXJhdGlvbkl0ZW0oc2VsbGVyQmFzaXNQb2ludHMsIHNlbGxlcikpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGZlZSBvZiBjb2xsZWN0aW9uRmVlcykge1xuICAgICAgY29uc2lkZXJhdGlvbkl0ZW1zLnB1c2goXG4gICAgICAgIGdldENvbnNpZGVyYXRpb25JdGVtKGJhc2lzUG9pbnRzRm9yRmVlKGZlZSksIGZlZS5yZWNpcGllbnQpLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnNpZGVyYXRpb25JdGVtcztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TkZUSXRlbXMoXG4gICAgbmZ0czogTkZUW10sXG4gICAgcXVhbnRpdGllczogYmlnaW50W10gPSBbXSxcbiAgKTogQ3JlYXRlSW5wdXRJdGVtW10ge1xuICAgIHJldHVybiBuZnRzLm1hcCgobmZ0LCBpbmRleCkgPT4gKHtcbiAgICAgIGl0ZW1UeXBlOiBnZXRBc3NldEl0ZW1UeXBlKFxuICAgICAgICBuZnQudG9rZW5fc3RhbmRhcmQudG9VcHBlckNhc2UoKSBhcyBUb2tlblN0YW5kYXJkLFxuICAgICAgKSxcbiAgICAgIHRva2VuOlxuICAgICAgICBnZXRBZGRyZXNzQWZ0ZXJSZW1hcHBpbmdTaGFyZWRTdG9yZWZyb250QWRkcmVzc1RvTGF6eU1pbnRBZGFwdGVyQWRkcmVzcyhcbiAgICAgICAgICBuZnQuY29udHJhY3QsXG4gICAgICAgICksXG4gICAgICBpZGVudGlmaWVyOiBuZnQuaWRlbnRpZmllciA/PyB1bmRlZmluZWQsXG4gICAgICBhbW91bnQ6IHF1YW50aXRpZXNbaW5kZXhdLnRvU3RyaW5nKCkgPz8gXCIxXCIsXG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgc3VibWl0IGFuIG9mZmVyIG9uIGFuIGFzc2V0LlxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcGFyYW0gb3B0aW9ucy5hc3NldCBUaGUgYXNzZXQgdG8gdHJhZGUuIHRva2VuQWRkcmVzcyBhbmQgdG9rZW5JZCBtdXN0IGJlIGRlZmluZWQuXG4gICAqIEBwYXJhbSBvcHRpb25zLmFjY291bnRBZGRyZXNzIEFkZHJlc3Mgb2YgdGhlIHdhbGxldCBtYWtpbmcgdGhlIG9mZmVyLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5zdGFydEFtb3VudCBWYWx1ZSBvZiB0aGUgb2ZmZXIgaW4gdW5pdHMsIG5vdCBiYXNlIHVuaXRzIGUuZy4gbm90IHdlaSwgb2YgdGhlIHBheW1lbnQgdG9rZW4gKG9yIFdFVEggaWYgbm8gcGF5bWVudCB0b2tlbiBhZGRyZXNzIHNwZWNpZmllZClcbiAgICogQHBhcmFtIG9wdGlvbnMucXVhbnRpdHkgVGhlIG51bWJlciBvZiBhc3NldHMgdG8gYmlkIGZvciAoaWYgZnVuZ2libGUgb3Igc2VtaS1mdW5naWJsZSkuIERlZmF1bHRzIHRvIDEuXG4gICAqIEBwYXJhbSBvcHRpb25zLmRvbWFpbiBBbiBvcHRpb25hbCBkb21haW4gdG8gYmUgaGFzaGVkIGFuZCBpbmNsdWRlZCBpbiB0aGUgZmlyc3QgZm91ciBieXRlcyBvZiB0aGUgcmFuZG9tIHNhbHQuXG4gICAqIEBwYXJhbSBvcHRpb25zLnNhbHQgQXJiaXRyYXJ5IHNhbHQuIElmIG5vdCBwYXNzZWQgaW4sIGEgcmFuZG9tIHNhbHQgd2lsbCBiZSBnZW5lcmF0ZWQgd2l0aCB0aGUgZmlyc3QgZm91ciBieXRlcyBiZWluZyB0aGUgZG9tYWluIGhhc2ggb3IgZW1wdHkuXG4gICAqIEBwYXJhbSBvcHRpb25zLmV4cGlyYXRpb25UaW1lIEV4cGlyYXRpb24gdGltZSBmb3IgdGhlIG9yZGVyLCBpbiBVVEMgc2Vjb25kc1xuICAgKiBAcGFyYW0gb3B0aW9ucy5wYXltZW50VG9rZW5BZGRyZXNzIEVSQzIwIGFkZHJlc3MgZm9yIHRoZSBwYXltZW50IHRva2VuIGluIHRoZSBvcmRlci4gSWYgdW5zcGVjaWZpZWQsIGRlZmF1bHRzIHRvIFdFVEhcbiAgICogQHBhcmFtIG9wdGlvbnMuZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMgSWYgdHJ1ZSwgb3B0aW9uYWwgY3JlYXRvciBmZWVzIHdpbGwgYmUgZXhjbHVkZWQgZnJvbSB0aGUgb2ZmZXIuIERlZmF1bHQ6IGZhbHNlLlxuICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIE9yZGVyVjJ9IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqXG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIGFzc2V0IGRvZXMgbm90IGNvbnRhaW4gYSB0b2tlbiBpZC5cbiAgICogQHRocm93cyBFcnJvciBpZiB0aGUgYWNjb3VudEFkZHJlc3MgaXMgbm90IGF2YWlsYWJsZSB0aHJvdWdoIHdhbGxldCBvciBwcm92aWRlci5cbiAgICogQHRocm93cyBFcnJvciBpZiB0aGUgc3RhcnRBbW91bnQgaXMgbm90IGdyZWF0ZXIgdGhhbiAwLlxuICAgKiBAdGhyb3dzIEVycm9yIGlmIHBheW1lbnRUb2tlbkFkZHJlc3MgaXMgbm90IFdFVEggb24gYW55dGhpbmcgb3RoZXIgdGhhbiBFdGhlcmV1bSBtYWlubmV0LlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGNyZWF0ZU9mZmVyKHtcbiAgICBhc3NldCxcbiAgICBhY2NvdW50QWRkcmVzcyxcbiAgICBzdGFydEFtb3VudCxcbiAgICBxdWFudGl0eSA9IDEsXG4gICAgZG9tYWluLFxuICAgIHNhbHQsXG4gICAgZXhwaXJhdGlvblRpbWUsXG4gICAgcGF5bWVudFRva2VuQWRkcmVzcyA9IGdldFdFVEhBZGRyZXNzKHRoaXMuY2hhaW4pLFxuICAgIGV4Y2x1ZGVPcHRpb25hbENyZWF0b3JGZWVzID0gZmFsc2UsXG4gIH06IHtcbiAgICBhc3NldDogQXNzZXRXaXRoVG9rZW5JZDtcbiAgICBhY2NvdW50QWRkcmVzczogc3RyaW5nO1xuICAgIHN0YXJ0QW1vdW50OiBCaWdOdW1iZXJpc2g7XG4gICAgcXVhbnRpdHk/OiBCaWdOdW1iZXJpc2g7XG4gICAgZG9tYWluPzogc3RyaW5nO1xuICAgIHNhbHQ/OiBCaWdOdW1iZXJpc2g7XG4gICAgZXhwaXJhdGlvblRpbWU/OiBCaWdOdW1iZXJpc2g7XG4gICAgcGF5bWVudFRva2VuQWRkcmVzcz86IHN0cmluZztcbiAgICBleGNsdWRlT3B0aW9uYWxDcmVhdG9yRmVlcz86IGJvb2xlYW47XG4gIH0pOiBQcm9taXNlPE9yZGVyVjI+IHtcbiAgICBhd2FpdCB0aGlzLl9yZXF1aXJlQWNjb3VudElzQXZhaWxhYmxlKGFjY291bnRBZGRyZXNzKTtcblxuICAgIGNvbnN0IHsgbmZ0IH0gPSBhd2FpdCB0aGlzLmFwaS5nZXRORlQoYXNzZXQudG9rZW5BZGRyZXNzLCBhc3NldC50b2tlbklkKTtcbiAgICBjb25zdCBjb25zaWRlcmF0aW9uQXNzZXRJdGVtcyA9IHRoaXMuZ2V0TkZUSXRlbXMoXG4gICAgICBbbmZ0XSxcbiAgICAgIFtCaWdJbnQocXVhbnRpdHkgPz8gMSldLFxuICAgICk7XG5cbiAgICBjb25zdCB7IGJhc2VQcmljZSB9ID0gYXdhaXQgdGhpcy5fZ2V0UHJpY2VQYXJhbWV0ZXJzKFxuICAgICAgT3JkZXJTaWRlLkJJRCxcbiAgICAgIHBheW1lbnRUb2tlbkFkZHJlc3MsXG4gICAgICBleHBpcmF0aW9uVGltZSA/PyBnZXRNYXhPcmRlckV4cGlyYXRpb25UaW1lc3RhbXAoKSxcbiAgICAgIHN0YXJ0QW1vdW50LFxuICAgICk7XG5cbiAgICBjb25zdCBjb2xsZWN0aW9uID0gYXdhaXQgdGhpcy5hcGkuZ2V0Q29sbGVjdGlvbihuZnQuY29sbGVjdGlvbik7XG5cbiAgICBjb25zdCBjb25zaWRlcmF0aW9uRmVlSXRlbXMgPSBhd2FpdCB0aGlzLmdldEZlZXMoe1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIHBheW1lbnRUb2tlbkFkZHJlc3MsXG4gICAgICBzdGFydEFtb3VudDogYmFzZVByaWNlLFxuICAgICAgZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMsXG4gICAgfSk7XG5cbiAgICBsZXQgem9uZSA9IERFRkFVTFRfWk9ORTtcbiAgICBpZiAoY29sbGVjdGlvbi5yZXF1aXJlZFpvbmUpIHtcbiAgICAgIHpvbmUgPSBjb2xsZWN0aW9uLnJlcXVpcmVkWm9uZTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGV4ZWN1dGVBbGxBY3Rpb25zIH0gPSBhd2FpdCB0aGlzLnNlYXBvcnRfdjFfNi5jcmVhdGVPcmRlcihcbiAgICAgIHtcbiAgICAgICAgb2ZmZXI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogcGF5bWVudFRva2VuQWRkcmVzcyxcbiAgICAgICAgICAgIGFtb3VudDogYmFzZVByaWNlLnRvU3RyaW5nKCksXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY29uc2lkZXJhdGlvbjogWy4uLmNvbnNpZGVyYXRpb25Bc3NldEl0ZW1zLCAuLi5jb25zaWRlcmF0aW9uRmVlSXRlbXNdLFxuICAgICAgICBlbmRUaW1lOlxuICAgICAgICAgIGV4cGlyYXRpb25UaW1lICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gQmlnSW50KGV4cGlyYXRpb25UaW1lKS50b1N0cmluZygpXG4gICAgICAgICAgICA6IGdldE1heE9yZGVyRXhwaXJhdGlvblRpbWVzdGFtcCgpLnRvU3RyaW5nKCksXG4gICAgICAgIHpvbmUsXG4gICAgICAgIGRvbWFpbixcbiAgICAgICAgc2FsdDogQmlnSW50KHNhbHQgPz8gMCkudG9TdHJpbmcoKSxcbiAgICAgICAgcmVzdHJpY3RlZEJ5Wm9uZTogem9uZSAhPT0gREVGQVVMVF9aT05FLFxuICAgICAgICBhbGxvd1BhcnRpYWxGaWxsczogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBhY2NvdW50QWRkcmVzcyxcbiAgICApO1xuICAgIGNvbnN0IG9yZGVyID0gYXdhaXQgZXhlY3V0ZUFsbEFjdGlvbnMoKTtcblxuICAgIHJldHVybiB0aGlzLmFwaS5wb3N0T3JkZXIob3JkZXIsIHtcbiAgICAgIHByb3RvY29sOiBcInNlYXBvcnRcIixcbiAgICAgIHByb3RvY29sQWRkcmVzczogREVGQVVMVF9TRUFQT1JUX0NPTlRSQUNUX0FERFJFU1MsXG4gICAgICBzaWRlOiBPcmRlclNpZGUuQklELFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgc3VibWl0IGEgbGlzdGluZyBmb3IgYW4gYXNzZXQuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLmFzc2V0IFRoZSBhc3NldCB0byB0cmFkZS4gdG9rZW5BZGRyZXNzIGFuZCB0b2tlbklkIG11c3QgYmUgZGVmaW5lZC5cbiAgICogQHBhcmFtIG9wdGlvbnMuYWNjb3VudEFkZHJlc3MgIEFkZHJlc3Mgb2YgdGhlIHdhbGxldCBtYWtpbmcgdGhlIGxpc3RpbmdcbiAgICogQHBhcmFtIG9wdGlvbnMuc3RhcnRBbW91bnQgVmFsdWUgb2YgdGhlIGxpc3RpbmcgYXQgdGhlIHN0YXJ0IG9mIHRoZSBhdWN0aW9uIGluIHVuaXRzLCBub3QgYmFzZSB1bml0cyBlLmcuIG5vdCB3ZWksIG9mIHRoZSBwYXltZW50IHRva2VuIChvciBXRVRIIGlmIG5vIHBheW1lbnQgdG9rZW4gYWRkcmVzcyBzcGVjaWZpZWQpXG4gICAqIEBwYXJhbSBvcHRpb25zLmVuZEFtb3VudCBWYWx1ZSBvZiB0aGUgbGlzdGluZyBhdCB0aGUgZW5kIG9mIHRoZSBhdWN0aW9uLiBJZiBzcGVjaWZpZWQsIHByaWNlIHdpbGwgY2hhbmdlIGxpbmVhcmx5IGJldHdlZW4gc3RhcnRBbW91bnQgYW5kIGVuZEFtb3VudCBhcyB0aW1lIHByb2dyZXNzZXMuXG4gICAqIEBwYXJhbSBvcHRpb25zLnF1YW50aXR5IFRoZSBudW1iZXIgb2YgYXNzZXRzIHRvIGxpc3QgKGlmIGZ1bmdpYmxlIG9yIHNlbWktZnVuZ2libGUpLiBEZWZhdWx0cyB0byAxLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kb21haW4gQW4gb3B0aW9uYWwgZG9tYWluIHRvIGJlIGhhc2hlZCBhbmQgaW5jbHVkZWQgaW4gdGhlIGZpcnN0IGZvdXIgYnl0ZXMgb2YgdGhlIHJhbmRvbSBzYWx0LiBUaGlzIGNhbiBiZSB1c2VkIGZvciBvbi1jaGFpbiBvcmRlciBhdHRyaWJ1dGlvbiB0byBhc3Npc3Qgd2l0aCBhbmFseXRpY3MuXG4gICAqIEBwYXJhbSBvcHRpb25zLnNhbHQgQXJiaXRyYXJ5IHNhbHQuIElmIG5vdCBwYXNzZWQgaW4sIGEgcmFuZG9tIHNhbHQgd2lsbCBiZSBnZW5lcmF0ZWQgd2l0aCB0aGUgZmlyc3QgZm91ciBieXRlcyBiZWluZyB0aGUgZG9tYWluIGhhc2ggb3IgZW1wdHkuXG4gICAqIEBwYXJhbSBvcHRpb25zLmxpc3RpbmdUaW1lIE9wdGlvbmFsIHRpbWUgd2hlbiB0aGUgb3JkZXIgd2lsbCBiZWNvbWUgZnVsZmlsbGFibGUsIGluIFVUQyBzZWNvbmRzLiBVbmRlZmluZWQgbWVhbnMgaXQgd2lsbCBzdGFydCBub3cuXG4gICAqIEBwYXJhbSBvcHRpb25zLmV4cGlyYXRpb25UaW1lIEV4cGlyYXRpb24gdGltZSBmb3IgdGhlIG9yZGVyLCBpbiBVVEMgc2Vjb25kcy5cbiAgICogQHBhcmFtIG9wdGlvbnMucGF5bWVudFRva2VuQWRkcmVzcyBFUkMyMCBhZGRyZXNzIGZvciB0aGUgcGF5bWVudCB0b2tlbiBpbiB0aGUgb3JkZXIuIElmIHVuc3BlY2lmaWVkLCBkZWZhdWx0cyB0byBFVEhcbiAgICogQHBhcmFtIG9wdGlvbnMuYnV5ZXJBZGRyZXNzIE9wdGlvbmFsIGFkZHJlc3MgdGhhdCdzIGFsbG93ZWQgdG8gcHVyY2hhc2UgdGhpcyBpdGVtLiBJZiBzcGVjaWZpZWQsIG5vIG90aGVyIGFkZHJlc3Mgd2lsbCBiZSBhYmxlIHRvIHRha2UgdGhlIG9yZGVyLCB1bmxlc3MgaXRzIHZhbHVlIGlzIHRoZSBudWxsIGFkZHJlc3MuXG4gICAqIEBwYXJhbSBvcHRpb25zLmVuZ2xpc2hBdWN0aW9uIElmIHRydWUsIHRoZSBvcmRlciB3aWxsIGJlIGxpc3RlZCBhcyBhbiBFbmdsaXNoIGF1Y3Rpb24uXG4gICAqIEBwYXJhbSBvcHRpb25zLmV4Y2x1ZGVPcHRpb25hbENyZWF0b3JGZWVzIElmIHRydWUsIG9wdGlvbmFsIGNyZWF0b3IgZmVlcyB3aWxsIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIGxpc3RpbmcuIERlZmF1bHQ6IGZhbHNlLlxuICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIE9yZGVyVjJ9IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqXG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIGFzc2V0IGRvZXMgbm90IGNvbnRhaW4gYSB0b2tlbiBpZC5cbiAgICogQHRocm93cyBFcnJvciBpZiB0aGUgYWNjb3VudEFkZHJlc3MgaXMgbm90IGF2YWlsYWJsZSB0aHJvdWdoIHdhbGxldCBvciBwcm92aWRlci5cbiAgICogQHRocm93cyBFcnJvciBpZiB0aGUgc3RhcnRBbW91bnQgaXMgbm90IGdyZWF0ZXIgdGhhbiAwLlxuICAgKiBAdGhyb3dzIEVycm9yIGlmIHBheW1lbnRUb2tlbkFkZHJlc3MgaXMgbm90IFdFVEggb24gYW55dGhpbmcgb3RoZXIgdGhhbiBFdGhlcmV1bSBtYWlubmV0LlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGNyZWF0ZUxpc3Rpbmcoe1xuICAgIGFzc2V0LFxuICAgIGFjY291bnRBZGRyZXNzLFxuICAgIHN0YXJ0QW1vdW50LFxuICAgIGVuZEFtb3VudCxcbiAgICBxdWFudGl0eSA9IDEsXG4gICAgZG9tYWluLFxuICAgIHNhbHQsXG4gICAgbGlzdGluZ1RpbWUsXG4gICAgZXhwaXJhdGlvblRpbWUsXG4gICAgcGF5bWVudFRva2VuQWRkcmVzcyA9IGV0aGVycy5aZXJvQWRkcmVzcyxcbiAgICBidXllckFkZHJlc3MsXG4gICAgZW5nbGlzaEF1Y3Rpb24sXG4gICAgZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMgPSBmYWxzZSxcbiAgfToge1xuICAgIGFzc2V0OiBBc3NldFdpdGhUb2tlbklkO1xuICAgIGFjY291bnRBZGRyZXNzOiBzdHJpbmc7XG4gICAgc3RhcnRBbW91bnQ6IEJpZ051bWJlcmlzaDtcbiAgICBlbmRBbW91bnQ/OiBCaWdOdW1iZXJpc2g7XG4gICAgcXVhbnRpdHk/OiBCaWdOdW1iZXJpc2g7XG4gICAgZG9tYWluPzogc3RyaW5nO1xuICAgIHNhbHQ/OiBCaWdOdW1iZXJpc2g7XG4gICAgbGlzdGluZ1RpbWU/OiBudW1iZXI7XG4gICAgZXhwaXJhdGlvblRpbWU/OiBudW1iZXI7XG4gICAgcGF5bWVudFRva2VuQWRkcmVzcz86IHN0cmluZztcbiAgICBidXllckFkZHJlc3M/OiBzdHJpbmc7XG4gICAgZW5nbGlzaEF1Y3Rpb24/OiBib29sZWFuO1xuICAgIGV4Y2x1ZGVPcHRpb25hbENyZWF0b3JGZWVzPzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8T3JkZXJWMj4ge1xuICAgIGF3YWl0IHRoaXMuX3JlcXVpcmVBY2NvdW50SXNBdmFpbGFibGUoYWNjb3VudEFkZHJlc3MpO1xuXG4gICAgY29uc3QgeyBuZnQgfSA9IGF3YWl0IHRoaXMuYXBpLmdldE5GVChhc3NldC50b2tlbkFkZHJlc3MsIGFzc2V0LnRva2VuSWQpO1xuICAgIGNvbnN0IG9mZmVyQXNzZXRJdGVtcyA9IHRoaXMuZ2V0TkZUSXRlbXMoW25mdF0sIFtCaWdJbnQocXVhbnRpdHkgPz8gMSldKTtcblxuICAgIGlmIChlbmdsaXNoQXVjdGlvbiAmJiBwYXltZW50VG9rZW5BZGRyZXNzID09IGV0aGVycy5aZXJvQWRkcmVzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRW5nbGlzaCBhdWN0aW9ucyBtdXN0IHVzZSB3cmFwcGVkIEVUSCBvciBhbiBFUkMtMjAgdG9rZW4uYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBiYXNlUHJpY2UsIGVuZFByaWNlIH0gPSBhd2FpdCB0aGlzLl9nZXRQcmljZVBhcmFtZXRlcnMoXG4gICAgICBPcmRlclNpZGUuQVNLLFxuICAgICAgcGF5bWVudFRva2VuQWRkcmVzcyxcbiAgICAgIGV4cGlyYXRpb25UaW1lID8/IGdldE1heE9yZGVyRXhwaXJhdGlvblRpbWVzdGFtcCgpLFxuICAgICAgc3RhcnRBbW91bnQsXG4gICAgICBlbmRBbW91bnQgPz8gdW5kZWZpbmVkLFxuICAgICk7XG5cbiAgICBjb25zdCBjb2xsZWN0aW9uID0gYXdhaXQgdGhpcy5hcGkuZ2V0Q29sbGVjdGlvbihuZnQuY29sbGVjdGlvbik7XG5cbiAgICBjb25zdCBjb25zaWRlcmF0aW9uRmVlSXRlbXMgPSBhd2FpdCB0aGlzLmdldEZlZXMoe1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIHNlbGxlcjogYWNjb3VudEFkZHJlc3MsXG4gICAgICBwYXltZW50VG9rZW5BZGRyZXNzLFxuICAgICAgc3RhcnRBbW91bnQ6IGJhc2VQcmljZSxcbiAgICAgIGVuZEFtb3VudDogZW5kUHJpY2UsXG4gICAgICBleGNsdWRlT3B0aW9uYWxDcmVhdG9yRmVlcyxcbiAgICB9KTtcblxuICAgIGlmIChidXllckFkZHJlc3MpIHtcbiAgICAgIGNvbnNpZGVyYXRpb25GZWVJdGVtcy5wdXNoKFxuICAgICAgICAuLi5nZXRQcml2YXRlTGlzdGluZ0NvbnNpZGVyYXRpb25zKG9mZmVyQXNzZXRJdGVtcywgYnV5ZXJBZGRyZXNzKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHpvbmUgPSBERUZBVUxUX1pPTkU7XG4gICAgaWYgKGVuZ2xpc2hBdWN0aW9uKSB7XG4gICAgICBpZiAoaXNUZXN0Q2hhaW4odGhpcy5jaGFpbikpIHtcbiAgICAgICAgem9uZSA9IEVOR0xJU0hfQVVDVElPTl9aT05FX1RFU1RORVRTO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgem9uZSA9IEVOR0xJU0hfQVVDVElPTl9aT05FX01BSU5ORVRTO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29sbGVjdGlvbi5yZXF1aXJlZFpvbmUpIHtcbiAgICAgIHpvbmUgPSBjb2xsZWN0aW9uLnJlcXVpcmVkWm9uZTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGV4ZWN1dGVBbGxBY3Rpb25zIH0gPSBhd2FpdCB0aGlzLnNlYXBvcnRfdjFfNi5jcmVhdGVPcmRlcihcbiAgICAgIHtcbiAgICAgICAgb2ZmZXI6IG9mZmVyQXNzZXRJdGVtcyxcbiAgICAgICAgY29uc2lkZXJhdGlvbjogY29uc2lkZXJhdGlvbkZlZUl0ZW1zLFxuICAgICAgICBzdGFydFRpbWU6IGxpc3RpbmdUaW1lPy50b1N0cmluZygpLFxuICAgICAgICBlbmRUaW1lOlxuICAgICAgICAgIGV4cGlyYXRpb25UaW1lPy50b1N0cmluZygpID8/XG4gICAgICAgICAgZ2V0TWF4T3JkZXJFeHBpcmF0aW9uVGltZXN0YW1wKCkudG9TdHJpbmcoKSxcbiAgICAgICAgem9uZSxcbiAgICAgICAgZG9tYWluLFxuICAgICAgICBzYWx0OiBCaWdJbnQoc2FsdCA/PyAwKS50b1N0cmluZygpLFxuICAgICAgICByZXN0cmljdGVkQnlab25lOiB6b25lICE9PSBERUZBVUxUX1pPTkUsXG4gICAgICAgIGFsbG93UGFydGlhbEZpbGxzOiBlbmdsaXNoQXVjdGlvbiA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBhY2NvdW50QWRkcmVzcyxcbiAgICApO1xuICAgIGNvbnN0IG9yZGVyID0gYXdhaXQgZXhlY3V0ZUFsbEFjdGlvbnMoKTtcblxuICAgIHJldHVybiB0aGlzLmFwaS5wb3N0T3JkZXIob3JkZXIsIHtcbiAgICAgIHByb3RvY29sOiBcInNlYXBvcnRcIixcbiAgICAgIHByb3RvY29sQWRkcmVzczogREVGQVVMVF9TRUFQT1JUX0NPTlRSQUNUX0FERFJFU1MsXG4gICAgICBzaWRlOiBPcmRlclNpZGUuQVNLLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgc3VibWl0IGEgY29sbGVjdGlvbiBvZmZlci5cbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHBhcmFtIG9wdGlvbnMuY29sbGVjdGlvblNsdWcgSWRlbnRpZmllciBmb3IgdGhlIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSBvcHRpb25zLmFjY291bnRBZGRyZXNzIEFkZHJlc3Mgb2YgdGhlIHdhbGxldCBtYWtpbmcgdGhlIG9mZmVyLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5hbW91bnQgVmFsdWUgb2YgdGhlIG9mZmVyIGluIHVuaXRzLCBub3QgYmFzZSB1bml0cyBlLmcuIG5vdCB3ZWksIG9mIHRoZSBwYXltZW50IHRva2VuIChvciBXRVRIIGlmIG5vIHBheW1lbnQgdG9rZW4gYWRkcmVzcyBzcGVjaWZpZWQpLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5xdWFudGl0eSBUaGUgbnVtYmVyIG9mIGFzc2V0cyB0byBiaWQgZm9yIChpZiBmdW5naWJsZSBvciBzZW1pLWZ1bmdpYmxlKS5cbiAgICogQHBhcmFtIG9wdGlvbnMuZG9tYWluIEFuIG9wdGlvbmFsIGRvbWFpbiB0byBiZSBoYXNoZWQgYW5kIGluY2x1ZGVkIGluIHRoZSBmaXJzdCBmb3VyIGJ5dGVzIG9mIHRoZSByYW5kb20gc2FsdC4gVGhpcyBjYW4gYmUgdXNlZCBmb3Igb24tY2hhaW4gb3JkZXIgYXR0cmlidXRpb24gdG8gYXNzaXN0IHdpdGggYW5hbHl0aWNzLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5zYWx0IEFyYml0cmFyeSBzYWx0LiBJZiBub3QgcGFzc2VkIGluLCBhIHJhbmRvbSBzYWx0IHdpbGwgYmUgZ2VuZXJhdGVkIHdpdGggdGhlIGZpcnN0IGZvdXIgYnl0ZXMgYmVpbmcgdGhlIGRvbWFpbiBoYXNoIG9yIGVtcHR5LlxuICAgKiBAcGFyYW0gb3B0aW9ucy5leHBpcmF0aW9uVGltZSBFeHBpcmF0aW9uIHRpbWUgZm9yIHRoZSBvcmRlciwgaW4gVVRDIHNlY29uZHMuXG4gICAqIEBwYXJhbSBvcHRpb25zLnBheW1lbnRUb2tlbkFkZHJlc3MgRVJDMjAgYWRkcmVzcyBmb3IgdGhlIHBheW1lbnQgdG9rZW4gaW4gdGhlIG9yZGVyLiBJZiB1bnNwZWNpZmllZCwgZGVmYXVsdHMgdG8gV0VUSC5cbiAgICogQHBhcmFtIG9wdGlvbnMuZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMgSWYgdHJ1ZSwgb3B0aW9uYWwgY3JlYXRvciBmZWVzIHdpbGwgYmUgZXhjbHVkZWQgZnJvbSB0aGUgb2ZmZXIuIERlZmF1bHQ6IGZhbHNlLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5vZmZlclByb3RlY3Rpb25FbmFibGVkIEJ1aWxkIHRoZSBvZmZlciBvbiBPcGVuU2VhJ3Mgc2lnbmVkIHpvbmUgdG8gcHJvdmlkZSBvZmZlciBwcm90ZWN0aW9ucyBmcm9tIHJlY2VpdmluZyBhbiBpdGVtIHdoaWNoIGlzIGRpc2FibGVkIGZyb20gdHJhZGluZy5cbiAgICogQHBhcmFtIG9wdGlvbnMudHJhaXRUeXBlIElmIGRlZmluZWQsIHRoZSB0cmFpdCBuYW1lIHRvIGNyZWF0ZSB0aGUgY29sbGVjdGlvbiBvZmZlciBmb3IuXG4gICAqIEBwYXJhbSBvcHRpb25zLnRyYWl0VmFsdWUgSWYgZGVmaW5lZCwgdGhlIHRyYWl0IHZhbHVlIHRvIGNyZWF0ZSB0aGUgY29sbGVjdGlvbiBvZmZlciBmb3IuXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgQ29sbGVjdGlvbk9mZmVyfSB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGNyZWF0ZUNvbGxlY3Rpb25PZmZlcih7XG4gICAgY29sbGVjdGlvblNsdWcsXG4gICAgYWNjb3VudEFkZHJlc3MsXG4gICAgYW1vdW50LFxuICAgIHF1YW50aXR5LFxuICAgIGRvbWFpbixcbiAgICBzYWx0LFxuICAgIGV4cGlyYXRpb25UaW1lLFxuICAgIHBheW1lbnRUb2tlbkFkZHJlc3MgPSBnZXRXRVRIQWRkcmVzcyh0aGlzLmNoYWluKSxcbiAgICBleGNsdWRlT3B0aW9uYWxDcmVhdG9yRmVlcyA9IGZhbHNlLFxuICAgIG9mZmVyUHJvdGVjdGlvbkVuYWJsZWQgPSB0cnVlLFxuICAgIHRyYWl0VHlwZSxcbiAgICB0cmFpdFZhbHVlLFxuICB9OiB7XG4gICAgY29sbGVjdGlvblNsdWc6IHN0cmluZztcbiAgICBhY2NvdW50QWRkcmVzczogc3RyaW5nO1xuICAgIGFtb3VudDogQmlnTnVtYmVyaXNoO1xuICAgIHF1YW50aXR5OiBudW1iZXI7XG4gICAgZG9tYWluPzogc3RyaW5nO1xuICAgIHNhbHQ/OiBCaWdOdW1iZXJpc2g7XG4gICAgZXhwaXJhdGlvblRpbWU/OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgcGF5bWVudFRva2VuQWRkcmVzczogc3RyaW5nO1xuICAgIGV4Y2x1ZGVPcHRpb25hbENyZWF0b3JGZWVzPzogYm9vbGVhbjtcbiAgICBvZmZlclByb3RlY3Rpb25FbmFibGVkPzogYm9vbGVhbjtcbiAgICB0cmFpdFR5cGU/OiBzdHJpbmc7XG4gICAgdHJhaXRWYWx1ZT86IHN0cmluZztcbiAgfSk6IFByb21pc2U8Q29sbGVjdGlvbk9mZmVyIHwgbnVsbD4ge1xuICAgIGF3YWl0IHRoaXMuX3JlcXVpcmVBY2NvdW50SXNBdmFpbGFibGUoYWNjb3VudEFkZHJlc3MpO1xuXG4gICAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IHRoaXMuYXBpLmdldENvbGxlY3Rpb24oY29sbGVjdGlvblNsdWcpO1xuICAgIGNvbnN0IGJ1aWxkT2ZmZXJSZXN1bHQgPSBhd2FpdCB0aGlzLmFwaS5idWlsZE9mZmVyKFxuICAgICAgYWNjb3VudEFkZHJlc3MsXG4gICAgICBxdWFudGl0eSxcbiAgICAgIGNvbGxlY3Rpb25TbHVnLFxuICAgICAgb2ZmZXJQcm90ZWN0aW9uRW5hYmxlZCxcbiAgICAgIHRyYWl0VHlwZSxcbiAgICAgIHRyYWl0VmFsdWUsXG4gICAgKTtcbiAgICBjb25zdCBpdGVtID0gYnVpbGRPZmZlclJlc3VsdC5wYXJ0aWFsUGFyYW1ldGVycy5jb25zaWRlcmF0aW9uWzBdO1xuICAgIGNvbnN0IGNvbnZlcnRlZENvbnNpZGVyYXRpb25JdGVtID0ge1xuICAgICAgaXRlbVR5cGU6IGl0ZW0uaXRlbVR5cGUsXG4gICAgICB0b2tlbjogaXRlbS50b2tlbixcbiAgICAgIGlkZW50aWZpZXI6IGl0ZW0uaWRlbnRpZmllck9yQ3JpdGVyaWEsXG4gICAgICBhbW91bnQ6IGl0ZW0uc3RhcnRBbW91bnQsXG4gICAgfTtcblxuICAgIGNvbnN0IHsgYmFzZVByaWNlIH0gPSBhd2FpdCB0aGlzLl9nZXRQcmljZVBhcmFtZXRlcnMoXG4gICAgICBPcmRlclNpZGUuQVNLLFxuICAgICAgcGF5bWVudFRva2VuQWRkcmVzcyxcbiAgICAgIGV4cGlyYXRpb25UaW1lID8/IGdldE1heE9yZGVyRXhwaXJhdGlvblRpbWVzdGFtcCgpLFxuICAgICAgYW1vdW50LFxuICAgICk7XG4gICAgY29uc3QgY29uc2lkZXJhdGlvbkZlZUl0ZW1zID0gYXdhaXQgdGhpcy5nZXRGZWVzKHtcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBwYXltZW50VG9rZW5BZGRyZXNzLFxuICAgICAgc3RhcnRBbW91bnQ6IGJhc2VQcmljZSxcbiAgICAgIGVuZEFtb3VudDogYmFzZVByaWNlLFxuICAgICAgZXhjbHVkZU9wdGlvbmFsQ3JlYXRvckZlZXMsXG4gICAgfSk7XG5cbiAgICBjb25zdCBjb25zaWRlcmF0aW9uSXRlbXMgPSBbXG4gICAgICBjb252ZXJ0ZWRDb25zaWRlcmF0aW9uSXRlbSxcbiAgICAgIC4uLmNvbnNpZGVyYXRpb25GZWVJdGVtcyxcbiAgICBdO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIG9mZmVyZXI6IGFjY291bnRBZGRyZXNzLFxuICAgICAgb2ZmZXI6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRva2VuOiBwYXltZW50VG9rZW5BZGRyZXNzLFxuICAgICAgICAgIGFtb3VudDogYmFzZVByaWNlLnRvU3RyaW5nKCksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgY29uc2lkZXJhdGlvbjogY29uc2lkZXJhdGlvbkl0ZW1zLFxuICAgICAgZW5kVGltZTpcbiAgICAgICAgZXhwaXJhdGlvblRpbWU/LnRvU3RyaW5nKCkgPz9cbiAgICAgICAgZ2V0TWF4T3JkZXJFeHBpcmF0aW9uVGltZXN0YW1wKCkudG9TdHJpbmcoKSxcbiAgICAgIHpvbmU6IGJ1aWxkT2ZmZXJSZXN1bHQucGFydGlhbFBhcmFtZXRlcnMuem9uZSxcbiAgICAgIGRvbWFpbixcbiAgICAgIHNhbHQ6IEJpZ0ludChzYWx0ID8/IDApLnRvU3RyaW5nKCksXG4gICAgICByZXN0cmljdGVkQnlab25lOiB0cnVlLFxuICAgICAgYWxsb3dQYXJ0aWFsRmlsbHM6IHRydWUsXG4gICAgfTtcblxuICAgIGNvbnN0IHsgZXhlY3V0ZUFsbEFjdGlvbnMgfSA9IGF3YWl0IHRoaXMuc2VhcG9ydF92MV82LmNyZWF0ZU9yZGVyKFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGFjY291bnRBZGRyZXNzLFxuICAgICk7XG4gICAgY29uc3Qgb3JkZXIgPSBhd2FpdCBleGVjdXRlQWxsQWN0aW9ucygpO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBpLnBvc3RDb2xsZWN0aW9uT2ZmZXIoXG4gICAgICBvcmRlcixcbiAgICAgIGNvbGxlY3Rpb25TbHVnLFxuICAgICAgdHJhaXRUeXBlLFxuICAgICAgdHJhaXRWYWx1ZSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bGZpbGwgYSBwcml2YXRlIG9yZGVyIGZvciBhIGRlc2lnbmF0ZWQgYWRkcmVzcy5cbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHBhcmFtIG9wdGlvbnMub3JkZXIgVGhlIG9yZGVyIHRvIGZ1bGZpbGxcbiAgICogQHBhcmFtIG9wdGlvbnMuYWNjb3VudEFkZHJlc3MgQWRkcmVzcyBvZiB0aGUgd2FsbGV0IHRha2luZyB0aGUgb3JkZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zLmRvbWFpbiBBbiBvcHRpb25hbCBkb21haW4gdG8gYmUgaGFzaGVkIGFuZCBpbmNsdWRlZCBhdCB0aGUgZW5kIG9mIGZ1bGZpbGxtZW50IGNhbGxkYXRhLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBjYW4gYmUgdXNlZCBmb3Igb24tY2hhaW4gb3JkZXIgYXR0cmlidXRpb24gdG8gYXNzaXN0IHdpdGggYW5hbHl0aWNzLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5vdmVycmlkZXMgVHJhbnNhY3Rpb24gb3ZlcnJpZGVzLCBpZ25vcmVkIGlmIG5vdCBzZXQuXG4gICAqIEByZXR1cm5zIFRyYW5zYWN0aW9uIGhhc2ggb2YgdGhlIG9yZGVyLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBmdWxmaWxsUHJpdmF0ZU9yZGVyKHtcbiAgICBvcmRlcixcbiAgICBhY2NvdW50QWRkcmVzcyxcbiAgICBkb21haW4sXG4gICAgb3ZlcnJpZGVzLFxuICB9OiB7XG4gICAgb3JkZXI6IE9yZGVyVjI7XG4gICAgYWNjb3VudEFkZHJlc3M6IHN0cmluZztcbiAgICBkb21haW4/OiBzdHJpbmc7XG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzO1xuICB9KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBpZiAoIW9yZGVyLnRha2VyPy5hZGRyZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiT3JkZXIgaXMgbm90IGEgcHJpdmF0ZSBsaXN0aW5nIC0gbXVzdCBoYXZlIGEgdGFrZXIgYWRkcmVzc1wiLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgY291bnRlck9yZGVyID0gY29uc3RydWN0UHJpdmF0ZUxpc3RpbmdDb3VudGVyT3JkZXIoXG4gICAgICBvcmRlci5wcm90b2NvbERhdGEsXG4gICAgICBvcmRlci50YWtlci5hZGRyZXNzLFxuICAgICk7XG4gICAgY29uc3QgZnVsZmlsbG1lbnRzID0gZ2V0UHJpdmF0ZUxpc3RpbmdGdWxmaWxsbWVudHMob3JkZXIucHJvdG9jb2xEYXRhKTtcbiAgICBjb25zdCBzZWFwb3J0ID0gdGhpcy5nZXRTZWFwb3J0KG9yZGVyLnByb3RvY29sQWRkcmVzcyk7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSBhd2FpdCBzZWFwb3J0XG4gICAgICAubWF0Y2hPcmRlcnMoe1xuICAgICAgICBvcmRlcnM6IFtvcmRlci5wcm90b2NvbERhdGEsIGNvdW50ZXJPcmRlcl0sXG4gICAgICAgIGZ1bGZpbGxtZW50cyxcbiAgICAgICAgb3ZlcnJpZGVzOiB7XG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICAgIHZhbHVlOiBjb3VudGVyT3JkZXIucGFyYW1ldGVycy5vZmZlclswXS5zdGFydEFtb3VudCxcbiAgICAgICAgfSxcbiAgICAgICAgYWNjb3VudEFkZHJlc3MsXG4gICAgICAgIGRvbWFpbixcbiAgICAgIH0pXG4gICAgICAudHJhbnNhY3QoKTtcbiAgICBjb25zdCB0cmFuc2FjdGlvblJlY2VpcHQgPSBhd2FpdCB0cmFuc2FjdGlvbi53YWl0KCk7XG4gICAgaWYgKCF0cmFuc2FjdGlvblJlY2VpcHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdHJhbnNhY3Rpb24gcmVjZWlwdFwiKTtcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLl9jb25maXJtVHJhbnNhY3Rpb24oXG4gICAgICB0cmFuc2FjdGlvblJlY2VpcHQuaGFzaCxcbiAgICAgIEV2ZW50VHlwZS5NYXRjaE9yZGVycyxcbiAgICAgIFwiRnVsZmlsbGluZyBvcmRlclwiLFxuICAgICk7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uUmVjZWlwdC5oYXNoO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bGZpbGwgYW4gb3JkZXIgZm9yIGFuIGFzc2V0LiBUaGUgb3JkZXIgY2FuIGJlIGVpdGhlciBhIGxpc3Rpbmcgb3IgYW4gb2ZmZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLm9yZGVyIFRoZSBvcmRlciB0byBmdWxmaWxsLCBhLmsuYS4gXCJ0YWtlXCJcbiAgICogQHBhcmFtIG9wdGlvbnMuYWNjb3VudEFkZHJlc3MgQWRkcmVzcyBvZiB0aGUgd2FsbGV0IHRha2luZyB0aGUgb2ZmZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zLnJlY2lwaWVudEFkZHJlc3MgVGhlIG9wdGlvbmFsIGFkZHJlc3MgdG8gcmVjZWl2ZSB0aGUgb3JkZXIncyBpdGVtKHMpIG9yIGN1cnJlbmNpZXMuIElmIG5vdCBzcGVjaWZpZWQsIGRlZmF1bHRzIHRvIGFjY291bnRBZGRyZXNzLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kb21haW4gQW4gb3B0aW9uYWwgZG9tYWluIHRvIGJlIGhhc2hlZCBhbmQgaW5jbHVkZWQgYXQgdGhlIGVuZCBvZiBmdWxmaWxsbWVudCBjYWxsZGF0YS4gIFRoaXMgY2FuIGJlIHVzZWQgZm9yIG9uLWNoYWluIG9yZGVyIGF0dHJpYnV0aW9uIHRvIGFzc2lzdCB3aXRoIGFuYWx5dGljcy5cbiAgICogQHBhcmFtIG9wdGlvbnMub3ZlcnJpZGVzIFRyYW5zYWN0aW9uIG92ZXJyaWRlcywgaWdub3JlZCBpZiBub3Qgc2V0LlxuICAgKiBAcmV0dXJucyBUcmFuc2FjdGlvbiBoYXNoIG9mIHRoZSBvcmRlci5cbiAgICpcbiAgICogQHRocm93cyBFcnJvciBpZiB0aGUgYWNjb3VudEFkZHJlc3MgaXMgbm90IGF2YWlsYWJsZSB0aHJvdWdoIHdhbGxldCBvciBwcm92aWRlci5cbiAgICogQHRocm93cyBFcnJvciBpZiB0aGUgb3JkZXIncyBwcm90b2NvbCBhZGRyZXNzIGlzIG5vdCBzdXBwb3J0ZWQgYnkgT3BlblNlYS4gU2VlIHtAbGluayBpc1ZhbGlkUHJvdG9jb2x9LlxuICAgKiBAdGhyb3dzIEVycm9yIGlmIGF0dGVtcHRpbmcgdG8gZnVsZmlsbCB0aGUgb3JkZXIgd2l0aCBhIHJlY2lwaWVudCBhZGRyZXNzIHdoaWNoIGRvZXMgbm90IG1hdGNoIGEgcHJpdmF0ZSBsaXN0aW5nLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGZ1bGZpbGxPcmRlcih7XG4gICAgb3JkZXIsXG4gICAgYWNjb3VudEFkZHJlc3MsXG4gICAgcmVjaXBpZW50QWRkcmVzcyxcbiAgICBkb21haW4sXG4gICAgb3ZlcnJpZGVzLFxuICB9OiB7XG4gICAgb3JkZXI6IE9yZGVyVjIgfCBPcmRlcjtcbiAgICBhY2NvdW50QWRkcmVzczogc3RyaW5nO1xuICAgIHJlY2lwaWVudEFkZHJlc3M/OiBzdHJpbmc7XG4gICAgZG9tYWluPzogc3RyaW5nO1xuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcztcbiAgfSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgYXdhaXQgdGhpcy5fcmVxdWlyZUFjY291bnRJc0F2YWlsYWJsZShhY2NvdW50QWRkcmVzcyk7XG5cbiAgICBjb25zdCBwcm90b2NvbEFkZHJlc3MgPVxuICAgICAgKG9yZGVyIGFzIE9yZGVyVjIpLnByb3RvY29sQWRkcmVzcyA/PyAob3JkZXIgYXMgT3JkZXIpLnByb3RvY29sX2FkZHJlc3M7XG4gICAgcmVxdWlyZVZhbGlkUHJvdG9jb2wocHJvdG9jb2xBZGRyZXNzKTtcblxuICAgIGNvbnN0IG9yZGVySGFzaCA9XG4gICAgICAob3JkZXIgYXMgT3JkZXJWMikub3JkZXJIYXNoID8/IChvcmRlciBhcyBPcmRlcikub3JkZXJfaGFzaDtcblxuICAgIGNvbnN0IHNpZGUgPVxuICAgICAgKG9yZGVyIGFzIE9yZGVyVjIpLnNpZGUgPz9cbiAgICAgIChbT3JkZXJUeXBlLkJBU0lDLCBPcmRlclR5cGUuRU5HTElTSF0uaW5jbHVkZXMoKG9yZGVyIGFzIExpc3RpbmcpLnR5cGUpXG4gICAgICAgID8gT3JkZXJTaWRlLkFTS1xuICAgICAgICA6IE9yZGVyU2lkZS5CSUQpO1xuXG4gICAgbGV0IGV4dHJhRGF0YTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgY29uc3QgcHJvdG9jb2xEYXRhID1cbiAgICAgIChvcmRlciBhcyBPcmRlclYyKS5wcm90b2NvbERhdGEgPz8gKG9yZGVyIGFzIE9yZGVyKS5wcm90b2NvbF9kYXRhO1xuXG4gICAgaWYgKG9yZGVySGFzaCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hcGkuZ2VuZXJhdGVGdWxmaWxsbWVudERhdGEoXG4gICAgICAgIGFjY291bnRBZGRyZXNzLFxuICAgICAgICBvcmRlckhhc2gsXG4gICAgICAgIHByb3RvY29sQWRkcmVzcyxcbiAgICAgICAgc2lkZSxcbiAgICAgICk7XG5cbiAgICAgIC8vIElmIHRoZSBvcmRlciBpcyB1c2luZyBvZmZlciBwcm90ZWN0aW9uLCB0aGUgZXh0cmFEYXRhXG4gICAgICAvLyBtdXN0IGJlIGluY2x1ZGVkIHdpdGggdGhlIG9yZGVyIHRvIHN1Y2Nlc3NmdWxseSBmdWxmaWxsLlxuICAgICAgY29uc3QgaW5wdXREYXRhID0gcmVzdWx0LmZ1bGZpbGxtZW50X2RhdGEudHJhbnNhY3Rpb24uaW5wdXRfZGF0YTtcbiAgICAgIGlmIChcIm9yZGVyc1wiIGluIGlucHV0RGF0YSAmJiBcImV4dHJhRGF0YVwiIGluIGlucHV0RGF0YS5vcmRlcnNbMF0pIHtcbiAgICAgICAgZXh0cmFEYXRhID0gKGlucHV0RGF0YS5vcmRlcnNbMF0gYXMgQWR2YW5jZWRPcmRlcikuZXh0cmFEYXRhO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2lnbmF0dXJlID0gcmVzdWx0LmZ1bGZpbGxtZW50X2RhdGEub3JkZXJzWzBdLnNpZ25hdHVyZTtcbiAgICAgIHByb3RvY29sRGF0YS5zaWduYXR1cmUgPSBzaWduYXR1cmU7XG4gICAgfVxuXG4gICAgY29uc3QgaXNQcml2YXRlTGlzdGluZyA9IFwidGFrZXJcIiBpbiBvcmRlciA/ICEhb3JkZXIudGFrZXIgOiBmYWxzZTtcbiAgICBpZiAoaXNQcml2YXRlTGlzdGluZykge1xuICAgICAgaWYgKHJlY2lwaWVudEFkZHJlc3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiUHJpdmF0ZSBsaXN0aW5ncyBjYW5ub3QgYmUgZnVsZmlsbGVkIHdpdGggYSByZWNpcGllbnQgYWRkcmVzc1wiLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZnVsZmlsbFByaXZhdGVPcmRlcih7XG4gICAgICAgIG9yZGVyOiBvcmRlciBhcyBPcmRlclYyLFxuICAgICAgICBhY2NvdW50QWRkcmVzcyxcbiAgICAgICAgZG9tYWluLFxuICAgICAgICBvdmVycmlkZXMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWFwb3J0ID0gdGhpcy5nZXRTZWFwb3J0KHByb3RvY29sQWRkcmVzcyk7XG4gICAgY29uc3QgeyBleGVjdXRlQWxsQWN0aW9ucyB9ID0gYXdhaXQgc2VhcG9ydC5mdWxmaWxsT3JkZXIoe1xuICAgICAgb3JkZXI6IHByb3RvY29sRGF0YSxcbiAgICAgIGFjY291bnRBZGRyZXNzLFxuICAgICAgcmVjaXBpZW50QWRkcmVzcyxcbiAgICAgIGV4dHJhRGF0YSxcbiAgICAgIGRvbWFpbixcbiAgICAgIG92ZXJyaWRlcyxcbiAgICB9KTtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IGV4ZWN1dGVBbGxBY3Rpb25zKCk7XG5cbiAgICBjb25zdCB0cmFuc2FjdGlvbkhhc2ggPSBldGhlcnMuVHJhbnNhY3Rpb24uZnJvbSh0cmFuc2FjdGlvbikuaGFzaDtcbiAgICBpZiAoIXRyYW5zYWN0aW9uSGFzaCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0cmFuc2FjdGlvbiBoYXNoXCIpO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuX2NvbmZpcm1UcmFuc2FjdGlvbihcbiAgICAgIHRyYW5zYWN0aW9uSGFzaCxcbiAgICAgIEV2ZW50VHlwZS5NYXRjaE9yZGVycyxcbiAgICAgIFwiRnVsZmlsbGluZyBvcmRlclwiLFxuICAgICk7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uSGFzaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGdldCB0aGUgU2VhcG9ydCBjbGllbnQgYmFzZWQgb24gdGhlIGFkZHJlc3MuXG4gICAqIEBwYXJhbSBwcm90b2NvbEFkZHJlc3MgVGhlIFNlYXBvcnQgYWRkcmVzcy5cbiAgICovXG4gIHByaXZhdGUgZ2V0U2VhcG9ydChwcm90b2NvbEFkZHJlc3M6IHN0cmluZyk6IFNlYXBvcnQge1xuICAgIGNvbnN0IGNoZWNrc3VtbWVkUHJvdG9jb2xBZGRyZXNzID0gZXRoZXJzLmdldEFkZHJlc3MocHJvdG9jb2xBZGRyZXNzKTtcbiAgICBzd2l0Y2ggKGNoZWNrc3VtbWVkUHJvdG9jb2xBZGRyZXNzKSB7XG4gICAgICBjYXNlIENST1NTX0NIQUlOX1NFQVBPUlRfVjFfNV9BRERSRVNTOlxuICAgICAgICByZXR1cm4gdGhpcy5zZWFwb3J0X3YxXzU7XG4gICAgICBjYXNlIENST1NTX0NIQUlOX1NFQVBPUlRfVjFfNl9BRERSRVNTOlxuICAgICAgICByZXR1cm4gdGhpcy5zZWFwb3J0X3YxXzY7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHByb3RvY29sIGFkZHJlc3M6ICR7cHJvdG9jb2xBZGRyZXNzfWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWwgb3JkZXJzIG9uY2hhaW4sIHByZXZlbnRpbmcgdGhlbSBmcm9tIGJlaW5nIGZ1bGZpbGxlZC5cbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHBhcmFtIG9wdGlvbnMub3JkZXJzIFRoZSBvcmRlcnMgdG8gY2FuY2VsXG4gICAqIEBwYXJhbSBvcHRpb25zLmFjY291bnRBZGRyZXNzIFRoZSBhY2NvdW50IGFkZHJlc3MgY2FuY2VsbGluZyB0aGUgb3JkZXJzLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kb21haW4gQW4gb3B0aW9uYWwgZG9tYWluIHRvIGJlIGhhc2hlZCBhbmQgaW5jbHVkZWQgYXQgdGhlIGVuZCBvZiBmdWxmaWxsbWVudCBjYWxsZGF0YS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgIFRoaXMgY2FuIGJlIHVzZWQgZm9yIG9uLWNoYWluIG9yZGVyIGF0dHJpYnV0aW9uIHRvIGFzc2lzdCB3aXRoIGFuYWx5dGljcy5cbiAgICogQHBhcmFtIG9wdGlvbnMub3ZlcnJpZGVzIFRyYW5zYWN0aW9uIG92ZXJyaWRlcywgaWdub3JlZCBpZiBub3Qgc2V0LlxuICAgKiBAcmV0dXJucyBUcmFuc2FjdGlvbiBoYXNoIG9mIHRoZSBvcmRlci5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgY2FuY2VsU2VhcG9ydE9yZGVycyh7XG4gICAgb3JkZXJzLFxuICAgIGFjY291bnRBZGRyZXNzLFxuICAgIGRvbWFpbixcbiAgICBwcm90b2NvbEFkZHJlc3MgPSBERUZBVUxUX1NFQVBPUlRfQ09OVFJBQ1RfQUREUkVTUyxcbiAgICBvdmVycmlkZXMsXG4gIH06IHtcbiAgICBvcmRlcnM6IE9yZGVyQ29tcG9uZW50c1tdO1xuICAgIGFjY291bnRBZGRyZXNzOiBzdHJpbmc7XG4gICAgZG9tYWluPzogc3RyaW5nO1xuICAgIHByb3RvY29sQWRkcmVzcz86IHN0cmluZztcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXM7XG4gIH0pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHNlYXBvcnQgPSB0aGlzLmdldFNlYXBvcnQocHJvdG9jb2xBZGRyZXNzKTtcblxuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgc2VhcG9ydFxuICAgICAgLmNhbmNlbE9yZGVycyhvcmRlcnMsIGFjY291bnRBZGRyZXNzLCBkb21haW4sIG92ZXJyaWRlcylcbiAgICAgIC50cmFuc2FjdCgpO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLmhhc2g7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIGFuIG9yZGVyIG9uY2hhaW4sIHByZXZlbnRpbmcgaXQgZnJvbSBldmVyIGJlaW5nIGZ1bGZpbGxlZC5cbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHBhcmFtIG9wdGlvbnMub3JkZXIgVGhlIG9yZGVyIHRvIGNhbmNlbFxuICAgKiBAcGFyYW0gb3B0aW9ucy5hY2NvdW50QWRkcmVzcyBUaGUgYWNjb3VudCBhZGRyZXNzIHRoYXQgd2lsbCBiZSBjYW5jZWxsaW5nIHRoZSBvcmRlci5cbiAgICogQHBhcmFtIG9wdGlvbnMuZG9tYWluIEFuIG9wdGlvbmFsIGRvbWFpbiB0byBiZSBoYXNoZWQgYW5kIGluY2x1ZGVkIGF0IHRoZSBlbmQgb2YgZnVsZmlsbG1lbnQgY2FsbGRhdGEuICBUaGlzIGNhbiBiZSB1c2VkIGZvciBvbi1jaGFpbiBvcmRlciBhdHRyaWJ1dGlvbiB0byBhc3Npc3Qgd2l0aCBhbmFseXRpY3MuXG4gICAqXG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIGFjY291bnRBZGRyZXNzIGlzIG5vdCBhdmFpbGFibGUgdGhyb3VnaCB3YWxsZXQgb3IgcHJvdmlkZXIuXG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIG9yZGVyJ3MgcHJvdG9jb2wgYWRkcmVzcyBpcyBub3Qgc3VwcG9ydGVkIGJ5IE9wZW5TZWEuIFNlZSB7QGxpbmsgaXNWYWxpZFByb3RvY29sfS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBjYW5jZWxPcmRlcih7XG4gICAgb3JkZXIsXG4gICAgYWNjb3VudEFkZHJlc3MsXG4gICAgZG9tYWluLFxuICB9OiB7XG4gICAgb3JkZXI6IE9yZGVyVjI7XG4gICAgYWNjb3VudEFkZHJlc3M6IHN0cmluZztcbiAgICBkb21haW4/OiBzdHJpbmc7XG4gIH0pIHtcbiAgICBhd2FpdCB0aGlzLl9yZXF1aXJlQWNjb3VudElzQXZhaWxhYmxlKGFjY291bnRBZGRyZXNzKTtcbiAgICByZXF1aXJlVmFsaWRQcm90b2NvbChvcmRlci5wcm90b2NvbEFkZHJlc3MpO1xuXG4gICAgdGhpcy5fZGlzcGF0Y2goRXZlbnRUeXBlLkNhbmNlbE9yZGVyLCB7IG9yZGVyVjI6IG9yZGVyLCBhY2NvdW50QWRkcmVzcyB9KTtcblxuICAgIC8vIFRyYW5zYWN0IGFuZCBnZXQgdGhlIHRyYW5zYWN0aW9uIGhhc2hcbiAgICBjb25zdCB0cmFuc2FjdGlvbkhhc2ggPSBhd2FpdCB0aGlzLmNhbmNlbFNlYXBvcnRPcmRlcnMoe1xuICAgICAgb3JkZXJzOiBbb3JkZXIucHJvdG9jb2xEYXRhLnBhcmFtZXRlcnNdLFxuICAgICAgYWNjb3VudEFkZHJlc3MsXG4gICAgICBkb21haW4sXG4gICAgICBwcm90b2NvbEFkZHJlc3M6IG9yZGVyLnByb3RvY29sQWRkcmVzcyxcbiAgICB9KTtcblxuICAgIC8vIEF3YWl0IHRyYW5zYWN0aW9uIGNvbmZpcm1hdGlvblxuICAgIGF3YWl0IHRoaXMuX2NvbmZpcm1UcmFuc2FjdGlvbihcbiAgICAgIHRyYW5zYWN0aW9uSGFzaCxcbiAgICAgIEV2ZW50VHlwZS5DYW5jZWxPcmRlcixcbiAgICAgIFwiQ2FuY2VsbGluZyBvcmRlclwiLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogT2ZmY2hhaW4gY2FuY2VsIGFuIG9yZGVyLCBvZmZlciBvciBsaXN0aW5nLCBieSBpdHMgb3JkZXIgaGFzaCB3aGVuIHByb3RlY3RlZCBieSB0aGUgU2lnbmVkWm9uZS5cbiAgICogUHJvdG9jb2wgYW5kIENoYWluIGFyZSByZXF1aXJlZCB0byBwcmV2ZW50IGhhc2ggY29sbGlzaW9ucy5cbiAgICogUGxlYXNlIG5vdGUgY2FuY2VsbGF0aW9uIGlzIG9ubHkgYXNzdXJlZCBpZiBhIGZ1bGZpbGxtZW50IHNpZ25hdHVyZSB3YXMgbm90IHZlbmRlZCBwcmlvciB0byBjYW5jZWxsYXRpb24uXG4gICAqIEBwYXJhbSBwcm90b2NvbEFkZHJlc3MgVGhlIFNlYXBvcnQgYWRkcmVzcyBmb3IgdGhlIG9yZGVyLlxuICAgKiBAcGFyYW0gb3JkZXJKYXNoIFRoZSBvcmRlciBoYXNoLCBvciBleHRlcm5hbCBpZGVudGlmaWVyLCBvZiB0aGUgb3JkZXIuXG4gICAqIEBwYXJhbSBjaGFpbiBUaGUgY2hhaW4gd2hlcmUgdGhlIG9yZGVyIGlzIGxvY2F0ZWQuXG4gICAqIEByZXR1cm5zIFRoZSByZXNwb25zZSBmcm9tIHRoZSBBUEkuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgb2ZmY2hhaW5DYW5jZWxPcmRlcihcbiAgICBwcm90b2NvbEFkZHJlc3M6IHN0cmluZyxcbiAgICBvcmRlckhhc2g6IHN0cmluZyxcbiAgICBjaGFpbjogQ2hhaW4gPSB0aGlzLmNoYWluLFxuICApIHtcbiAgICByZXR1cm4gdGhpcy5hcGkub2ZmY2hhaW5DYW5jZWxPcmRlcihwcm90b2NvbEFkZHJlc3MsIG9yZGVySGFzaCwgY2hhaW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBhbiBvcmRlciBpcyBmdWxmaWxsYWJsZS5cbiAgICogQW4gb3JkZXIgbWF5IG5vdCBiZSBmdWxmaWxsYWJsZSBpZiBhIHRhcmdldCBpdGVtJ3MgdHJhbnNmZXIgZnVuY3Rpb25cbiAgICogaXMgbG9ja2VkIGZvciBzb21lIHJlYXNvbiwgZS5nLiBhbiBpdGVtIGlzIGJlaW5nIHJlbnRlZCB3aXRoaW4gYSBnYW1lXG4gICAqIG9yIHRyYWRpbmcgaGFzIGJlZW4gbG9ja2VkIGZvciBhbiBpdGVtIHR5cGUuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLm9yZGVyIE9yZGVyIHRvIGNoZWNrXG4gICAqIEBwYXJhbSBvcHRpb25zLmFjY291bnRBZGRyZXNzIFRoZSBhY2NvdW50IGFkZHJlc3MgdGhhdCB3aWxsIGJlIGZ1bGZpbGxpbmcgdGhlIG9yZGVyXG4gICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIG9yZGVyIGlzIGZ1bGZpbGxhYmxlLCBlbHNlIEZhbHNlLlxuICAgKlxuICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBvcmRlcidzIHByb3RvY29sIGFkZHJlc3MgaXMgbm90IHN1cHBvcnRlZCBieSBPcGVuU2VhLiBTZWUge0BsaW5rIGlzVmFsaWRQcm90b2NvbH0uXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgaXNPcmRlckZ1bGZpbGxhYmxlKHtcbiAgICBvcmRlcixcbiAgICBhY2NvdW50QWRkcmVzcyxcbiAgfToge1xuICAgIG9yZGVyOiBPcmRlclYyO1xuICAgIGFjY291bnRBZGRyZXNzOiBzdHJpbmc7XG4gIH0pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXF1aXJlVmFsaWRQcm90b2NvbChvcmRlci5wcm90b2NvbEFkZHJlc3MpO1xuXG4gICAgY29uc3Qgc2VhcG9ydCA9IHRoaXMuZ2V0U2VhcG9ydChvcmRlci5wcm90b2NvbEFkZHJlc3MpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGlzVmFsaWQgPSBhd2FpdCBzZWFwb3J0XG4gICAgICAgIC52YWxpZGF0ZShbb3JkZXIucHJvdG9jb2xEYXRhXSwgYWNjb3VudEFkZHJlc3MpXG4gICAgICAgIC5zdGF0aWNDYWxsKCk7XG4gICAgICByZXR1cm4gISFpc1ZhbGlkO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoaGFzRXJyb3JDb2RlKGVycm9yKSAmJiBlcnJvci5jb2RlID09PSBcIkNBTExfRVhDRVBUSU9OXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBhY2NvdW50J3MgYmFsYW5jZSBvZiBhbnkgQXNzZXQuIFRoaXMgYXNzZXQgY2FuIGJlIGFuIEVSQzIwLCBFUkMxMTU1LCBvciBFUkM3MjEuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLmFjY291bnRBZGRyZXNzIEFjY291bnQgYWRkcmVzcyB0byBjaGVja1xuICAgKiBAcGFyYW0gb3B0aW9ucy5hc3NldCBUaGUgQXNzZXQgdG8gY2hlY2sgYmFsYW5jZSBmb3IuIHRva2VuU3RhbmRhcmQgbXVzdCBiZSBzZXQuXG4gICAqIEByZXR1cm5zIFRoZSBiYWxhbmNlIG9mIHRoZSBhc3NldCBmb3IgdGhlIGFjY291bnQuXG4gICAqXG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIHRva2VuIHN0YW5kYXJkIGRvZXMgbm90IHN1cHBvcnQgYmFsYW5jZU9mLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldEJhbGFuY2Uoe1xuICAgIGFjY291bnRBZGRyZXNzLFxuICAgIGFzc2V0LFxuICB9OiB7XG4gICAgYWNjb3VudEFkZHJlc3M6IHN0cmluZztcbiAgICBhc3NldDogQXNzZXRXaXRoVG9rZW5TdGFuZGFyZDtcbiAgfSk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgc3dpdGNoIChhc3NldC50b2tlblN0YW5kYXJkKSB7XG4gICAgICBjYXNlIFRva2VuU3RhbmRhcmQuRVJDMjA6IHtcbiAgICAgICAgY29uc3QgY29udHJhY3QgPSBFUkMyMF9fZmFjdG9yeS5jb25uZWN0KFxuICAgICAgICAgIGFzc2V0LnRva2VuQWRkcmVzcyxcbiAgICAgICAgICB0aGlzLnByb3ZpZGVyLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gYXdhaXQgY29udHJhY3QuYmFsYW5jZU9mLnN0YXRpY0NhbGwoYWNjb3VudEFkZHJlc3MpO1xuICAgICAgfVxuICAgICAgY2FzZSBUb2tlblN0YW5kYXJkLkVSQzExNTU6IHtcbiAgICAgICAgaWYgKGFzc2V0LnRva2VuSWQgPT09IHVuZGVmaW5lZCB8fCBhc3NldC50b2tlbklkID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBFUkMxMTU1IHRva2VuSWQgZm9yIGdldEJhbGFuY2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udHJhY3QgPSBFUkMxMTU1X19mYWN0b3J5LmNvbm5lY3QoXG4gICAgICAgICAgYXNzZXQudG9rZW5BZGRyZXNzLFxuICAgICAgICAgIHRoaXMucHJvdmlkZXIsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBhd2FpdCBjb250cmFjdC5iYWxhbmNlT2Yuc3RhdGljQ2FsbChcbiAgICAgICAgICBhY2NvdW50QWRkcmVzcyxcbiAgICAgICAgICBhc3NldC50b2tlbklkLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2FzZSBUb2tlblN0YW5kYXJkLkVSQzcyMToge1xuICAgICAgICBpZiAoYXNzZXQudG9rZW5JZCA9PT0gdW5kZWZpbmVkIHx8IGFzc2V0LnRva2VuSWQgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIEVSQzcyMSB0b2tlbklkIGZvciBnZXRCYWxhbmNlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gRVJDNzIxX19mYWN0b3J5LmNvbm5lY3QoXG4gICAgICAgICAgYXNzZXQudG9rZW5BZGRyZXNzLFxuICAgICAgICAgIHRoaXMucHJvdmlkZXIsXG4gICAgICAgICk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3Qgb3duZXIgPSBhd2FpdCBjb250cmFjdC5vd25lck9mLnN0YXRpY0NhbGwoYXNzZXQudG9rZW5JZCk7XG4gICAgICAgICAgcmV0dXJuIEJpZ0ludChvd25lci50b0xvd2VyQ2FzZSgpID09IGFjY291bnRBZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlcihcbiAgICAgICAgICAgIGBGYWlsZWQgdG8gZ2V0IG93bmVyT2YgRVJDNzIxOiAke2Vycm9yLm1lc3NhZ2UgPz8gZXJyb3J9YCxcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiAwbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgdG9rZW4gc3RhbmRhcmQgZm9yIGdldEJhbGFuY2VcIik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZmVyIGFuIGFzc2V0LiBUaGlzIGFzc2V0IGNhbiBiZSBhbiBFUkMyMCwgRVJDMTE1NSwgb3IgRVJDNzIxLlxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcGFyYW0gb3B0aW9ucy5hc3NldCBUaGUgQXNzZXQgdG8gdHJhbnNmZXIuIHRva2VuU3RhbmRhcmQgbXVzdCBiZSBzZXQuXG4gICAqIEBwYXJhbSBvcHRpb25zLmFtb3VudCBBbW91bnQgb2YgYXNzZXQgdG8gdHJhbnNmZXIuIE5vdCB1c2VkIGZvciBFUkM3MjEuXG4gICAqIEBwYXJhbSBvcHRpb25zLmZyb21BZGRyZXNzIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIGZyb21cbiAgICogQHBhcmFtIG9wdGlvbnMudG9BZGRyZXNzIFRoZSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRvXG4gICAqIEBwYXJhbSBvcHRpb25zLm92ZXJyaWRlcyBUcmFuc2FjdGlvbiBvdmVycmlkZXMsIGlnbm9yZWQgaWYgbm90IHNldC5cbiAgICovXG4gIHB1YmxpYyBhc3luYyB0cmFuc2Zlcih7XG4gICAgYXNzZXQsXG4gICAgYW1vdW50LFxuICAgIGZyb21BZGRyZXNzLFxuICAgIHRvQWRkcmVzcyxcbiAgICBvdmVycmlkZXMsXG4gIH06IHtcbiAgICBhc3NldDogQXNzZXRXaXRoVG9rZW5TdGFuZGFyZDtcbiAgICBhbW91bnQ/OiBCaWdOdW1iZXJpc2g7XG4gICAgZnJvbUFkZHJlc3M6IHN0cmluZztcbiAgICB0b0FkZHJlc3M6IHN0cmluZztcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXM7XG4gIH0pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLl9yZXF1aXJlQWNjb3VudElzQXZhaWxhYmxlKGZyb21BZGRyZXNzKTtcbiAgICBvdmVycmlkZXMgPSB7IC4uLm92ZXJyaWRlcywgZnJvbTogZnJvbUFkZHJlc3MgfTtcbiAgICBsZXQgdHJhbnNhY3Rpb246IFByb21pc2U8Q29udHJhY3RUcmFuc2FjdGlvblJlc3BvbnNlPjtcblxuICAgIHN3aXRjaCAoYXNzZXQudG9rZW5TdGFuZGFyZCkge1xuICAgICAgY2FzZSBUb2tlblN0YW5kYXJkLkVSQzIwOiB7XG4gICAgICAgIGlmICghYW1vdW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBFUkMyMCBhbW91bnQgZm9yIHRyYW5zZmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gRVJDMjBfX2ZhY3RvcnkuY29ubmVjdChcbiAgICAgICAgICBhc3NldC50b2tlbkFkZHJlc3MsXG4gICAgICAgICAgdGhpcy5fc2lnbmVyT3JQcm92aWRlcixcbiAgICAgICAgKTtcbiAgICAgICAgdHJhbnNhY3Rpb24gPSBjb250cmFjdC50cmFuc2Zlcih0b0FkZHJlc3MsIGFtb3VudCwgb3ZlcnJpZGVzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFRva2VuU3RhbmRhcmQuRVJDMTE1NToge1xuICAgICAgICBpZiAoYXNzZXQudG9rZW5JZCA9PT0gdW5kZWZpbmVkIHx8IGFzc2V0LnRva2VuSWQgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIEVSQzExNTUgdG9rZW5JZCBmb3IgdHJhbnNmZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhbW91bnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIEVSQzExNTUgYW1vdW50IGZvciB0cmFuc2ZlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250cmFjdCA9IEVSQzExNTVfX2ZhY3RvcnkuY29ubmVjdChcbiAgICAgICAgICBhc3NldC50b2tlbkFkZHJlc3MsXG4gICAgICAgICAgdGhpcy5fc2lnbmVyT3JQcm92aWRlcixcbiAgICAgICAgKTtcbiAgICAgICAgdHJhbnNhY3Rpb24gPSBjb250cmFjdC5zYWZlVHJhbnNmZXJGcm9tKFxuICAgICAgICAgIGZyb21BZGRyZXNzLFxuICAgICAgICAgIHRvQWRkcmVzcyxcbiAgICAgICAgICBhc3NldC50b2tlbklkLFxuICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICBcIlwiLFxuICAgICAgICAgIG92ZXJyaWRlcyxcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFRva2VuU3RhbmRhcmQuRVJDNzIxOiB7XG4gICAgICAgIGlmIChhc3NldC50b2tlbklkID09PSB1bmRlZmluZWQgfHwgYXNzZXQudG9rZW5JZCA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRVJDNzIxIHRva2VuSWQgZm9yIHRyYW5zZmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gRVJDNzIxX19mYWN0b3J5LmNvbm5lY3QoXG4gICAgICAgICAgYXNzZXQudG9rZW5BZGRyZXNzLFxuICAgICAgICAgIHRoaXMuX3NpZ25lck9yUHJvdmlkZXIsXG4gICAgICAgICk7XG4gICAgICAgIHRyYW5zYWN0aW9uID0gY29udHJhY3QudHJhbnNmZXJGcm9tKFxuICAgICAgICAgIGZyb21BZGRyZXNzLFxuICAgICAgICAgIHRvQWRkcmVzcyxcbiAgICAgICAgICBhc3NldC50b2tlbklkLFxuICAgICAgICAgIG92ZXJyaWRlcyxcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCB0b2tlbiBzdGFuZGFyZCBmb3IgdHJhbnNmZXJcIik7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uUmVzcG9uc2UgPSBhd2FpdCB0cmFuc2FjdGlvbjtcbiAgICAgIGF3YWl0IHRoaXMuX2NvbmZpcm1UcmFuc2FjdGlvbihcbiAgICAgICAgdHJhbnNhY3Rpb25SZXNwb25zZS5oYXNoLFxuICAgICAgICBFdmVudFR5cGUuVHJhbnNmZXIsXG4gICAgICAgIFwiVHJhbnNmZXJyaW5nIGFzc2V0XCIsXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoKEV2ZW50VHlwZS5UcmFuc2FjdGlvbkRlbmllZCwge1xuICAgICAgICBlcnJvcixcbiAgICAgICAgYWNjb3VudEFkZHJlc3M6IGZyb21BZGRyZXNzLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluc3RlYWQgb2Ygc2lnbmluZyBhbiBvZmYtY2hhaW4gb3JkZXIsIHRoaXMgbWV0aG9kcyBhbGxvd3MgeW91IHRvIGFwcHJvdmUgYW4gb3JkZXJcbiAgICogd2l0aCBvbiBvbi1jaGFpbiB0cmFuc2FjdGlvbi5cbiAgICogQHBhcmFtIG9yZGVyIE9yZGVyIHRvIGFwcHJvdmVcbiAgICogQHBhcmFtIGRvbWFpbiBBbiBvcHRpb25hbCBkb21haW4gdG8gYmUgaGFzaGVkIGFuZCBpbmNsdWRlZCBhdCB0aGUgZW5kIG9mIGZ1bGZpbGxtZW50IGNhbGxkYXRhLiAgVGhpcyBjYW4gYmUgdXNlZCBmb3Igb24tY2hhaW4gb3JkZXIgYXR0cmlidXRpb24gdG8gYXNzaXN0IHdpdGggYW5hbHl0aWNzLlxuICAgKiBAcmV0dXJucyBUcmFuc2FjdGlvbiBoYXNoIG9mIHRoZSBhcHByb3ZhbCB0cmFuc2FjdGlvblxuICAgKlxuICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBhY2NvdW50QWRkcmVzcyBpcyBub3QgYXZhaWxhYmxlIHRocm91Z2ggd2FsbGV0IG9yIHByb3ZpZGVyLlxuICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBvcmRlcidzIHByb3RvY29sIGFkZHJlc3MgaXMgbm90IHN1cHBvcnRlZCBieSBPcGVuU2VhLiBTZWUge0BsaW5rIGlzVmFsaWRQcm90b2NvbH0uXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgYXBwcm92ZU9yZGVyKG9yZGVyOiBPcmRlclYyLCBkb21haW4/OiBzdHJpbmcpIHtcbiAgICBhd2FpdCB0aGlzLl9yZXF1aXJlQWNjb3VudElzQXZhaWxhYmxlKG9yZGVyLm1ha2VyLmFkZHJlc3MpO1xuICAgIHJlcXVpcmVWYWxpZFByb3RvY29sKG9yZGVyLnByb3RvY29sQWRkcmVzcyk7XG5cbiAgICB0aGlzLl9kaXNwYXRjaChFdmVudFR5cGUuQXBwcm92ZU9yZGVyLCB7XG4gICAgICBvcmRlclYyOiBvcmRlcixcbiAgICAgIGFjY291bnRBZGRyZXNzOiBvcmRlci5tYWtlci5hZGRyZXNzLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc2VhcG9ydCA9IHRoaXMuZ2V0U2VhcG9ydChvcmRlci5wcm90b2NvbEFkZHJlc3MpO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgc2VhcG9ydFxuICAgICAgLnZhbGlkYXRlKFtvcmRlci5wcm90b2NvbERhdGFdLCBvcmRlci5tYWtlci5hZGRyZXNzLCBkb21haW4pXG4gICAgICAudHJhbnNhY3QoKTtcblxuICAgIGF3YWl0IHRoaXMuX2NvbmZpcm1UcmFuc2FjdGlvbihcbiAgICAgIHRyYW5zYWN0aW9uLmhhc2gsXG4gICAgICBFdmVudFR5cGUuQXBwcm92ZU9yZGVyLFxuICAgICAgXCJBcHByb3Zpbmcgb3JkZXJcIixcbiAgICApO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLmhhc2g7XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgYGJhc2VQcmljZWAgYW5kIGBlbmRQcmljZWAgcGFyYW1ldGVycyB0byBiZSB1c2VkIHRvIHByaWNlIGFuIG9yZGVyLlxuICAgKiBBbHNvIHZhbGlkYXRlcyB0aGUgZXhwaXJhdGlvbiB0aW1lIGFuZCBhdWN0aW9uIHR5cGUuXG4gICAqIEBwYXJhbSB0b2tlbkFkZHJlc3MgQWRkcmVzcyBvZiB0aGUgRVJDLTIwIHRva2VuIHRvIHVzZSBmb3IgdHJhZGluZy4gVXNlIHRoZSBudWxsIGFkZHJlc3MgZm9yIEVUSC5cbiAgICogQHBhcmFtIGV4cGlyYXRpb25UaW1lIFdoZW4gdGhlIGF1Y3Rpb24gZXhwaXJlcywgb3IgMCBpZiBuZXZlci5cbiAgICogQHBhcmFtIHN0YXJ0QW1vdW50IFRoZSBiYXNlIHZhbHVlIGZvciB0aGUgb3JkZXIsIGluIHRoZSB0b2tlbidzIG1haW4gdW5pdHMgKGUuZy4gRVRIIGluc3RlYWQgb2Ygd2VpKVxuICAgKiBAcGFyYW0gZW5kQW1vdW50IFRoZSBlbmQgdmFsdWUgZm9yIHRoZSBvcmRlciwgaW4gdGhlIHRva2VuJ3MgbWFpbiB1bml0cyAoZS5nLiBFVEggaW5zdGVhZCBvZiB3ZWkpXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIF9nZXRQcmljZVBhcmFtZXRlcnMoXG4gICAgb3JkZXJTaWRlOiBPcmRlclNpZGUsXG4gICAgdG9rZW5BZGRyZXNzOiBzdHJpbmcsXG4gICAgZXhwaXJhdGlvblRpbWU6IEJpZ051bWJlcmlzaCxcbiAgICBzdGFydEFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgIGVuZEFtb3VudD86IEJpZ051bWJlcmlzaCxcbiAgKSB7XG4gICAgdG9rZW5BZGRyZXNzID0gdG9rZW5BZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgaXNFdGhlciA9IHRva2VuQWRkcmVzcyA9PT0gZXRoZXJzLlplcm9BZGRyZXNzO1xuICAgIGxldCBkZWNpbWFscyA9IDE4O1xuICAgIGlmICghaXNFdGhlcikge1xuICAgICAgaWYgKHRva2VuQWRkcmVzcyBpbiB0aGlzLl9jYWNoZWRQYXltZW50VG9rZW5EZWNpbWFscykge1xuICAgICAgICBkZWNpbWFscyA9IHRoaXMuX2NhY2hlZFBheW1lbnRUb2tlbkRlY2ltYWxzW3Rva2VuQWRkcmVzc107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwYXltZW50VG9rZW4gPSBhd2FpdCB0aGlzLmFwaS5nZXRQYXltZW50VG9rZW4odG9rZW5BZGRyZXNzKTtcbiAgICAgICAgdGhpcy5fY2FjaGVkUGF5bWVudFRva2VuRGVjaW1hbHNbdG9rZW5BZGRyZXNzXSA9IHBheW1lbnRUb2tlbi5kZWNpbWFscztcbiAgICAgICAgZGVjaW1hbHMgPSBwYXltZW50VG9rZW4uZGVjaW1hbHM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnRBbW91bnRXZWkgPSBldGhlcnMucGFyc2VVbml0cyhzdGFydEFtb3VudC50b1N0cmluZygpLCBkZWNpbWFscyk7XG4gICAgY29uc3QgZW5kQW1vdW50V2VpID0gZW5kQW1vdW50XG4gICAgICA/IGV0aGVycy5wYXJzZVVuaXRzKGVuZEFtb3VudC50b1N0cmluZygpLCBkZWNpbWFscylcbiAgICAgIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByaWNlRGlmZldlaSA9XG4gICAgICBlbmRBbW91bnRXZWkgIT09IHVuZGVmaW5lZCA/IHN0YXJ0QW1vdW50V2VpIC0gZW5kQW1vdW50V2VpIDogMG47XG5cbiAgICBjb25zdCBiYXNlUHJpY2UgPSBzdGFydEFtb3VudFdlaTtcbiAgICBjb25zdCBlbmRQcmljZSA9IGVuZEFtb3VudFdlaTtcblxuICAgIC8vIFZhbGlkYXRpb25cbiAgICBpZiAoc3RhcnRBbW91bnQgPT0gbnVsbCB8fCBzdGFydEFtb3VudFdlaSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0YXJ0aW5nIHByaWNlIG11c3QgYmUgYSBudW1iZXIgPj0gMFwiKTtcbiAgICB9XG4gICAgaWYgKGlzRXRoZXIgJiYgb3JkZXJTaWRlID09PSBPcmRlclNpZGUuQklEKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPZmZlcnMgbXVzdCB1c2Ugd3JhcHBlZCBFVEggb3IgYW4gRVJDLTIwIHRva2VuLlwiKTtcbiAgICB9XG4gICAgaWYgKHByaWNlRGlmZldlaSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJFbmQgcHJpY2UgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHN0YXJ0IHByaWNlLlwiLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHByaWNlRGlmZldlaSA+IDAgJiYgQmlnSW50KGV4cGlyYXRpb25UaW1lKSA9PT0gMG4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJFeHBpcmF0aW9uIHRpbWUgbXVzdCBiZSBzZXQgaWYgb3JkZXIgd2lsbCBjaGFuZ2UgaW4gcHJpY2UuXCIsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4geyBiYXNlUHJpY2UsIGVuZFByaWNlIH07XG4gIH1cblxuICBwcml2YXRlIF9kaXNwYXRjaChldmVudDogRXZlbnRUeXBlLCBkYXRhOiBFdmVudERhdGEpIHtcbiAgICB0aGlzLl9lbWl0dGVyLmVtaXQoZXZlbnQsIGRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhbiBlcnJvciBpZiBhbiBhY2NvdW50IGlzIG5vdCBhdmFpbGFibGUgdGhyb3VnaCB0aGUgcHJvdmlkZXIuXG4gICAqIEBwYXJhbSBhY2NvdW50QWRkcmVzcyBUaGUgYWNjb3VudCBhZGRyZXNzIHRvIGNoZWNrIGlzIGF2YWlsYWJsZS5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgX3JlcXVpcmVBY2NvdW50SXNBdmFpbGFibGUoYWNjb3VudEFkZHJlc3M6IHN0cmluZykge1xuICAgIGNvbnN0IGFjY291bnRBZGRyZXNzQ2hlY2tzdW1tZWQgPSBldGhlcnMuZ2V0QWRkcmVzcyhhY2NvdW50QWRkcmVzcyk7XG4gICAgY29uc3QgYXZhaWxhYmxlQWNjb3VudHM6IHN0cmluZ1tdID0gW107XG5cbiAgICBpZiAoXCJhZGRyZXNzXCIgaW4gdGhpcy5fc2lnbmVyT3JQcm92aWRlcikge1xuICAgICAgYXZhaWxhYmxlQWNjb3VudHMucHVzaCh0aGlzLl9zaWduZXJPclByb3ZpZGVyLmFkZHJlc3MgYXMgc3RyaW5nKTtcbiAgICB9IGVsc2UgaWYgKFwibGlzdEFjY291bnRzXCIgaW4gdGhpcy5fc2lnbmVyT3JQcm92aWRlcikge1xuICAgICAgY29uc3QgYWRkcmVzc2VzID0gKGF3YWl0IHRoaXMuX3NpZ25lck9yUHJvdmlkZXIubGlzdEFjY291bnRzKCkpLm1hcChcbiAgICAgICAgKGFjY3QpID0+IGFjY3QuYWRkcmVzcyxcbiAgICAgICk7XG4gICAgICBhdmFpbGFibGVBY2NvdW50cy5wdXNoKC4uLmFkZHJlc3Nlcyk7XG4gICAgfVxuXG4gICAgaWYgKGF2YWlsYWJsZUFjY291bnRzLmluY2x1ZGVzKGFjY291bnRBZGRyZXNzQ2hlY2tzdW1tZWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFNwZWNpZmllZCBhY2NvdW50QWRkcmVzcyBpcyBub3QgYXZhaWxhYmxlIHRocm91Z2ggd2FsbGV0IG9yIHByb3ZpZGVyOiAke2FjY291bnRBZGRyZXNzQ2hlY2tzdW1tZWR9LiBBY2NvdW50cyBhdmFpbGFibGU6ICR7XG4gICAgICAgIGF2YWlsYWJsZUFjY291bnRzLmxlbmd0aCA+IDAgPyBhdmFpbGFibGVBY2NvdW50cy5qb2luKFwiLCBcIikgOiBcIm5vbmVcIlxuICAgICAgfWAsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYWl0IGZvciBhIHRyYW5zYWN0aW9uIHRvIGNvbmZpcm0gYW5kIGxvZyB0aGUgc3VjY2VzcyBvciBmYWlsdXJlLlxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25IYXNoIFRoZSB0cmFuc2FjdGlvbiBoYXNoIHRvIHdhaXQgZm9yLlxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHR5cGUgdG8gbG9nLlxuICAgKiBAcGFyYW0gZGVzY3JpcHRpb24gVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgX2NvbmZpcm1UcmFuc2FjdGlvbihcbiAgICB0cmFuc2FjdGlvbkhhc2g6IHN0cmluZyxcbiAgICBldmVudDogRXZlbnRUeXBlLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uRXZlbnREYXRhID0geyB0cmFuc2FjdGlvbkhhc2gsIGV2ZW50IH07XG4gICAgdGhpcy5sb2dnZXIoYFRyYW5zYWN0aW9uIHN0YXJ0ZWQ6ICR7ZGVzY3JpcHRpb259YCk7XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5fZGlzcGF0Y2goRXZlbnRUeXBlLlRyYW5zYWN0aW9uQ3JlYXRlZCwgdHJhbnNhY3Rpb25FdmVudERhdGEpO1xuICAgICAgYXdhaXQgdGhpcy5wcm92aWRlci53YWl0Rm9yVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25IYXNoKTtcbiAgICAgIHRoaXMubG9nZ2VyKGBUcmFuc2FjdGlvbiBzdWNjZWVkZWQ6ICR7ZGVzY3JpcHRpb259YCk7XG4gICAgICB0aGlzLl9kaXNwYXRjaChFdmVudFR5cGUuVHJhbnNhY3Rpb25Db25maXJtZWQsIHRyYW5zYWN0aW9uRXZlbnREYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIoYFRyYW5zYWN0aW9uIGZhaWxlZDogJHtkZXNjcmlwdGlvbn1gKTtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoKEV2ZW50VHlwZS5UcmFuc2FjdGlvbkZhaWxlZCwge1xuICAgICAgICAuLi50cmFuc2FjdGlvbkV2ZW50RGF0YSxcbiAgICAgICAgZXJyb3IsXG4gICAgICB9KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,