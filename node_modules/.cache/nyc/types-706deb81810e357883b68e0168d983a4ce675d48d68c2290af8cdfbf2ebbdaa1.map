{"version":3,"file":"/Users/rg/dev/opensea-js/src/api/types.ts","sources":["/Users/rg/dev/opensea-js/src/api/types.ts"],"names":[],"mappings":";;;AAuFA,IAAY,uBAOX;AAPD,WAAY,uBAAuB;IACjC,wDAA6B,CAAA;IAC7B,4DAAiC,CAAA;IACjC,gEAAqC,CAAA;IACrC,gEAAqC,CAAA;IACrC,oDAAyB,CAAA;IACzB,oDAAyB,CAAA;AAC3B,CAAC,EAPW,uBAAuB,uCAAvB,uBAAuB,QAOlC;AA2MD;;;GAGG;AACH,IAAY,gBAQX;AARD,WAAY,gBAAgB;IAC1B,qCAAiB,CAAA;IACjB,yDAAqC,CAAA;IACrC,iDAA6B,CAAA;IAC7B,qCAAiB,CAAA;IACjB,iCAAa,CAAA;IACb,uCAAuC;IACvC,iCAAa,CAAA;AACf,CAAC,EARW,gBAAgB,gCAAhB,gBAAgB,QAQ3B","sourcesContent":["import { ConsiderationItem } from \"@opensea/seaport-js/lib/types\";\nimport {\n  OrderType,\n  OrderV2,\n  ProtocolData,\n  QueryCursors,\n} from \"../orders/types\";\nimport { OpenSeaCollection } from \"../types\";\n\n/**\n * Response from OpenSea API for building an offer.\n * @category API Response Types\n */\nexport type BuildOfferResponse = {\n  /** A portion of the parameters needed to submit a criteria offer, i.e. collection offer. */\n  partialParameters: PartialParameters;\n};\n\ntype PartialParameters = {\n  consideration: ConsiderationItem[];\n  zone: string;\n  zoneHash: string;\n};\n\n/**\n * Criteria for collection or trait offers.\n * @category API Response Types\n */\ntype Criteria = {\n  /** The collection for the criteria */\n  collection: CollectionCriteria;\n  /** The contract for the criteria */\n  contract: ContractCriteria;\n  /** Represents a list of token ids which can be used to fulfill the criteria offer. */\n  encoded_token_ids?: string;\n  /** The trait for the criteria */\n  trait?: TraitCriteria;\n};\n\n/**\n * Criteria for trait offers.\n * @category API Response Types\n */\ntype TraitCriteria = {\n  type: string;\n  value: string;\n};\n\ntype CollectionCriteria = {\n  slug: string;\n};\n\ntype ContractCriteria = {\n  address: string;\n};\n\n/**\n * Query args for Get Collections\n * @category API Query Args\n */\nexport interface GetCollectionsArgs {\n  order_by?: string;\n  limit?: number;\n  next?: string;\n  chain?: string;\n  creator_username?: string;\n  include_hidden?: boolean;\n}\n\n/**\n * Response from OpenSea API for fetching a single collection.\n * @category API Response Types\n */\nexport type GetCollectionResponse = {\n  /** Collection object. See {@link OpenSeaCollection} */\n  collection: OpenSeaCollection;\n};\n\n/**\n * Response from OpenSea API for fetching a list of collections.\n * @category API Response Types\n */\nexport type GetCollectionsResponse = QueryCursorsV2 & {\n  /** List of collections. See {@link OpenSeaCollection} */\n  collections: OpenSeaCollection[];\n};\n\nexport enum CollectionOrderByOption {\n  CREATED_DATE = \"created_date\",\n  ONE_DAY_CHANGE = \"one_day_change\",\n  SEVEN_DAY_VOLUME = \"seven_day_volume\",\n  SEVEN_DAY_CHANGE = \"seven_day_change\",\n  NUM_OWNERS = \"num_owners\",\n  MARKET_CAP = \"market_cap\",\n}\n\n/**\n * Base Order type shared between Listings and Offers.\n * @category API Models\n */\nexport type Order = {\n  /** Offer Identifier */\n  order_hash: string;\n  /** Chain the offer exists on */\n  chain: string;\n  /** The protocol data for the order. Only 'seaport' is currently supported. */\n  protocol_data: ProtocolData;\n  /** The contract address of the protocol. */\n  protocol_address: string;\n  /** The price of the order. */\n  price: Price;\n};\n\n/**\n * Offer type.\n * @category API Models\n */\nexport type Offer = Order & {\n  /** The criteria for the offer if it is a collection or trait offer. */\n  criteria?: Criteria;\n};\n\n/**\n * Collection Offer type.\n * @category API Models\n */\nexport type CollectionOffer = Required<Pick<Offer, \"criteria\">> & Offer;\n\n/**\n * Price response.\n * @category API Models\n */\nexport type Price = {\n  currency: string;\n  decimals: number;\n  value: string;\n};\n\n/**\n * Listing order type.\n * @category API Models\n */\nexport type Listing = Order & {\n  /** The order type of the listing. */\n  type: OrderType;\n};\n\n/**\n * Response from OpenSea API for fetching a list of collection offers.\n * @category API Response Types\n */\nexport type ListCollectionOffersResponse = {\n  /** List of {@link Offer} */\n  offers: CollectionOffer[];\n};\n\n/**\n * Response from OpenSea API for fetching a list of NFTs.\n * @category API Response Types\n */\nexport type ListNFTsResponse = {\n  /** List of {@link NFT} */\n  nfts: NFT[];\n  /** Cursor for next page of results. */\n  next: string;\n};\n\n/**\n * Response from OpenSea API for fetching a single NFT.\n * @category API Response Types\n */\nexport type GetNFTResponse = {\n  /** See {@link NFT} */\n  nft: NFT;\n};\n\n/**\n * Response from OpenSea API for fetching Orders.\n * @category API Response Types\n */\nexport type GetOrdersResponse = QueryCursors & {\n  /** List of {@link OrderV2} */\n  orders: OrderV2[];\n};\n\n/**\n * Base query cursors response from OpenSea API.\n * @category API Response Types\n */\nexport type QueryCursorsV2 = {\n  next?: string;\n};\n\n/**\n * Response from OpenSea API for fetching offers.\n * @category API Response Types\n */\nexport type GetOffersResponse = QueryCursorsV2 & {\n  offers: Offer[];\n};\n\n/**\n * Response from OpenSea API for fetching listings.\n * @category API Response Types\n */\nexport type GetListingsResponse = QueryCursorsV2 & {\n  listings: Listing[];\n};\n\n/**\n * Response from OpenSea API for fetching a best offer.\n * @category API Response Types\n */\nexport type GetBestOfferResponse = Offer | CollectionOffer;\n\n/**\n * Response from OpenSea API for fetching a best listing.\n * @category API Response Types\n */\nexport type GetBestListingResponse = Listing;\n\n/**\n * Response from OpenSea API for offchain canceling an order.\n * @category API Response Types\n */\nexport type CancelOrderResponse = {\n  last_signature_issued_valid_until: string | null;\n};\n\n/**\n * NFT type returned by OpenSea API.\n * @category API Models\n */\nexport type NFT = {\n  /** NFT Identifier (also commonly referred to as tokenId) */\n  identifier: string;\n  /** Slug identifier of collection */\n  collection: string;\n  /** Address of contract */\n  contract: string;\n  /** Token standard, i.e. ERC721, ERC1155, etc. */\n  token_standard: string;\n  /** Name of NFT */\n  name: string;\n  /** Description of NFT */\n  description: string;\n  /** URL of image */\n  image_url: string;\n  /** URL of metadata */\n  metadata_url: string;\n  /** URL on OpenSea */\n  opensea_url: string;\n  /** Date of latest NFT update */\n  updated_at: string;\n  /** Whether NFT is disabled for trading on OpenSea */\n  is_disabled: boolean;\n  /** Whether NFT is NSFW (Not Safe For Work) */\n  is_nsfw: boolean;\n  /** Traits for the NFT, returns null if the NFT has than 50 traits */\n  traits: Trait[] | null;\n  /** Creator of the NFT */\n  creator: string;\n  /** Owners of the NFT */\n  owners: {\n    address: string;\n    quantity: number;\n  }[];\n  /** Rarity of the NFT */\n  rarity: null | {\n    strategy_id: string | null;\n    strategy_version: string | null;\n    rank: number | null;\n    score: number | null;\n    calculated_at: string;\n    max_rank: number | null;\n    tokens_scored: number | null;\n    ranking_features: null | {\n      unique_attribute_count: number;\n    };\n  };\n};\n\n/**\n * Trait type returned by OpenSea API.\n * @category API Models\n */\nexport type Trait = {\n  /** The name of the trait category (e.g. 'Background') */\n  trait_type: string;\n  /** A field indicating how to display. None is used for string traits. */\n  display_type: TraitDisplayType;\n  /** Ceiling for possible numeric trait values */\n  max_value: string;\n  /** The value of the trait (e.g. 'Red') */\n  value: string | number | Date;\n};\n\n/**\n * Trait display type returned by OpenSea API.\n * @category API Models\n */\nexport enum TraitDisplayType {\n  NUMBER = \"number\",\n  BOOST_PERCENTAGE = \"boost_percentage\",\n  BOOST_NUMBER = \"boost_number\",\n  AUTHOR = \"author\",\n  DATE = \"date\",\n  /** \"None\" is used for string traits */\n  NONE = \"None\",\n}\n"]}