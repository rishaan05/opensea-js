"use strict";function cov_1jp46qk8eh(){var path="/Users/rg/dev/opensea-js/src/utils/utils.ts";var hash="cabd89054db8b68cc3dcbf220089117b1d06f3b6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/src/utils/utils.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:526}},"2":{start:{line:4,column:20},end:{line:4,column:64}},"3":{start:{line:5,column:17},end:{line:5,column:34}},"4":{start:{line:6,column:20},end:{line:6,column:43}},"5":{start:{line:7,column:16},end:{line:7,column:35}},"6":{start:{line:9,column:27},end:{line:42,column:1}},"7":{start:{line:10,column:4},end:{line:41,column:6}},"8":{start:{line:30,column:67},end:{line:33,column:9}},"9":{start:{line:43,column:0},end:{line:43,column:48}},"10":{start:{line:44,column:23},end:{line:56,column:1}},"11":{start:{line:45,column:4},end:{line:47,column:5}},"12":{start:{line:46,column:8},end:{line:46,column:20}},"13":{start:{line:48,column:21},end:{line:54,column:5}},"14":{start:{line:55,column:4},end:{line:55,column:20}},"15":{start:{line:57,column:0},end:{line:57,column:40}},"16":{start:{line:58,column:29},end:{line:70,column:1}},"17":{start:{line:59,column:21},end:{line:68,column:5}},"18":{start:{line:69,column:4},end:{line:69,column:20}},"19":{start:{line:71,column:0},end:{line:71,column:52}},"20":{start:{line:72,column:24},end:{line:86,column:1}},"21":{start:{line:73,column:4},end:{line:85,column:6}},"22":{start:{line:79,column:82},end:{line:82,column:9}},"23":{start:{line:87,column:0},end:{line:87,column:42}},"24":{start:{line:88,column:20},end:{line:95,column:1}},"25":{start:{line:89,column:21},end:{line:93,column:5}},"26":{start:{line:94,column:4},end:{line:94,column:20}},"27":{start:{line:96,column:0},end:{line:96,column:34}},"28":{start:{line:106,column:4},end:{line:111,column:7}},"29":{start:{line:113,column:0},end:{line:113,column:34}},"30":{start:{line:118,column:39},end:{line:123,column:1}},"31":{start:{line:119,column:30},end:{line:119,column:40}},"32":{start:{line:120,column:4},end:{line:120,column:97}},"33":{start:{line:121,column:4},end:{line:121,column:63}},"34":{start:{line:122,column:4},end:{line:122,column:58}},"35":{start:{line:124,column:0},end:{line:124,column:72}},"36":{start:{line:125,column:21},end:{line:128,column:1}},"37":{start:{line:126,column:25},end:{line:126,column:30}},"38":{start:{line:127,column:4},end:{line:127,column:31}},"39":{start:{line:129,column:0},end:{line:129,column:36}},"40":{start:{line:130,column:25},end:{line:141,column:1}},"41":{start:{line:131,column:4},end:{line:140,column:5}},"42":{start:{line:133,column:12},end:{line:133,column:46}},"43":{start:{line:135,column:12},end:{line:135,column:47}},"44":{start:{line:137,column:12},end:{line:137,column:48}},"45":{start:{line:139,column:12},end:{line:139,column:69}},"46":{start:{line:142,column:0},end:{line:142,column:44}},"47":{start:{line:143,column:23},end:{line:186,column:1}},"48":{start:{line:144,column:4},end:{line:185,column:5}},"49":{start:{line:146,column:12},end:{line:146,column:64}},"50":{start:{line:148,column:12},end:{line:148,column:64}},"51":{start:{line:150,column:12},end:{line:150,column:64}},"52":{start:{line:152,column:12},end:{line:152,column:64}},"53":{start:{line:154,column:12},end:{line:154,column:64}},"54":{start:{line:156,column:12},end:{line:156,column:64}},"55":{start:{line:158,column:12},end:{line:158,column:64}},"56":{start:{line:160,column:12},end:{line:160,column:64}},"57":{start:{line:162,column:12},end:{line:162,column:64}},"58":{start:{line:164,column:12},end:{line:164,column:64}},"59":{start:{line:166,column:12},end:{line:166,column:64}},"60":{start:{line:168,column:12},end:{line:168,column:64}},"61":{start:{line:170,column:12},end:{line:170,column:64}},"62":{start:{line:172,column:12},end:{line:172,column:64}},"63":{start:{line:174,column:12},end:{line:174,column:64}},"64":{start:{line:182,column:12},end:{line:182,column:64}},"65":{start:{line:184,column:12},end:{line:184,column:65}},"66":{start:{line:187,column:0},end:{line:187,column:40}},"67":{start:{line:194,column:80},end:{line:198,column:1}},"68":{start:{line:195,column:4},end:{line:197,column:23}},"69":{start:{line:199,column:0},end:{line:199,column:154}},"70":{start:{line:205,column:32},end:{line:209,column:1}},"71":{start:{line:206,column:27},end:{line:206,column:81}},"72":{start:{line:206,column:45},end:{line:206,column:80}},"73":{start:{line:207,column:29},end:{line:207,column:95}},"74":{start:{line:207,column:73},end:{line:207,column:90}},"75":{start:{line:208,column:4},end:{line:208,column:28}},"76":{start:{line:210,column:0},end:{line:210,column:58}},"77":{start:{line:216,column:26},end:{line:221,column:1}},"78":{start:{line:217,column:4},end:{line:220,column:21}},"79":{start:{line:222,column:0},end:{line:222,column:46}},"80":{start:{line:228,column:20},end:{line:245,column:1}},"81":{start:{line:229,column:4},end:{line:244,column:5}},"82":{start:{line:241,column:12},end:{line:241,column:24}},"83":{start:{line:243,column:12},end:{line:243,column:25}},"84":{start:{line:246,column:0},end:{line:246,column:34}},"85":{start:{line:251,column:24},end:{line:258,column:1}},"86":{start:{line:252,column:28},end:{line:252,column:71}},"87":{start:{line:253,column:35},end:{line:256,column:59}},"88":{start:{line:256,column:23},end:{line:256,column:58}},"89":{start:{line:257,column:4},end:{line:257,column:60}},"90":{start:{line:259,column:0},end:{line:259,column:42}},"91":{start:{line:264,column:29},end:{line:268,column:1}},"92":{start:{line:265,column:4},end:{line:267,column:5}},"93":{start:{line:266,column:8},end:{line:266,column:76}},"94":{start:{line:269,column:0},end:{line:269,column:52}},"95":{start:{line:297,column:23},end:{line:326,column:1}},"96":{start:{line:298,column:4},end:{line:300,column:5}},"97":{start:{line:299,column:8},end:{line:299,column:21}},"98":{start:{line:301,column:29},end:{line:301,column:59}},"99":{start:{line:302,column:4},end:{line:304,column:5}},"100":{start:{line:303,column:8},end:{line:303,column:110}},"101":{start:{line:305,column:19},end:{line:305,column:45}},"102":{start:{line:306,column:21},end:{line:306,column:23}},"103":{start:{line:307,column:4},end:{line:324,column:5}},"104":{start:{line:308,column:8},end:{line:323,column:9}},"105":{start:{line:309,column:39},end:{line:309,column:55}},"106":{start:{line:310,column:26},end:{line:310,column:42}},"107":{start:{line:311,column:24},end:{line:311,column:38}},"108":{start:{line:312,column:25},end:{line:312,column:41}},"109":{start:{line:313,column:12},end:{line:315,column:13}},"110":{start:{line:314,column:16},end:{line:314,column:128}},"111":{start:{line:316,column:12},end:{line:318,column:13}},"112":{start:{line:316,column:25},end:{line:316,column:27}},"113":{start:{line:317,column:16},end:{line:317,column:54}},"114":{start:{line:321,column:28},end:{line:321,column:41}},"115":{start:{line:322,column:12},end:{line:322,column:46}},"116":{start:{line:325,column:4},end:{line:325,column:20}},"117":{start:{line:327,column:0},end:{line:327,column:40}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:27},end:{line:9,column:28}},loc:{start:{line:9,column:43},end:{line:42,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:30,column:52},end:{line:30,column:53}},loc:{start:{line:30,column:67},end:{line:33,column:9}},line:30},"2":{name:"(anonymous_2)",decl:{start:{line:44,column:23},end:{line:44,column:24}},loc:{start:{line:44,column:35},end:{line:56,column:1}},line:44},"3":{name:"(anonymous_3)",decl:{start:{line:58,column:29},end:{line:58,column:30}},loc:{start:{line:58,column:40},end:{line:70,column:1}},line:58},"4":{name:"(anonymous_4)",decl:{start:{line:72,column:24},end:{line:72,column:25}},loc:{start:{line:72,column:37},end:{line:86,column:1}},line:72},"5":{name:"(anonymous_5)",decl:{start:{line:79,column:71},end:{line:79,column:72}},loc:{start:{line:79,column:82},end:{line:82,column:9}},line:79},"6":{name:"(anonymous_6)",decl:{start:{line:88,column:20},end:{line:88,column:21}},loc:{start:{line:88,column:29},end:{line:95,column:1}},line:88},"7":{name:"estimateGas",decl:{start:{line:105,column:15},end:{line:105,column:26}},loc:{start:{line:105,column:69},end:{line:112,column:1}},line:105},"8":{name:"(anonymous_8)",decl:{start:{line:118,column:39},end:{line:118,column:40}},loc:{start:{line:118,column:45},end:{line:123,column:1}},line:118},"9":{name:"(anonymous_9)",decl:{start:{line:125,column:21},end:{line:125,column:22}},loc:{start:{line:125,column:32},end:{line:128,column:1}},line:125},"10":{name:"(anonymous_10)",decl:{start:{line:130,column:25},end:{line:130,column:26}},loc:{start:{line:130,column:44},end:{line:141,column:1}},line:130},"11":{name:"(anonymous_11)",decl:{start:{line:143,column:23},end:{line:143,column:24}},loc:{start:{line:143,column:34},end:{line:186,column:1}},line:143},"12":{name:"(anonymous_12)",decl:{start:{line:194,column:80},end:{line:194,column:81}},loc:{start:{line:194,column:98},end:{line:198,column:1}},line:194},"13":{name:"(anonymous_13)",decl:{start:{line:205,column:32},end:{line:205,column:33}},loc:{start:{line:205,column:42},end:{line:209,column:1}},line:205},"14":{name:"(anonymous_14)",decl:{start:{line:206,column:36},end:{line:206,column:37}},loc:{start:{line:206,column:45},end:{line:206,column:80}},line:206},"15":{name:"(anonymous_15)",decl:{start:{line:207,column:51},end:{line:207,column:52}},loc:{start:{line:207,column:73},end:{line:207,column:90}},line:207},"16":{name:"(anonymous_16)",decl:{start:{line:216,column:26},end:{line:216,column:27}},loc:{start:{line:216,column:35},end:{line:221,column:1}},line:216},"17":{name:"(anonymous_17)",decl:{start:{line:228,column:20},end:{line:228,column:21}},loc:{start:{line:228,column:31},end:{line:245,column:1}},line:228},"18":{name:"(anonymous_18)",decl:{start:{line:251,column:24},end:{line:251,column:25}},loc:{start:{line:251,column:45},end:{line:258,column:1}},line:251},"19":{name:"(anonymous_19)",decl:{start:{line:256,column:10},end:{line:256,column:11}},loc:{start:{line:256,column:23},end:{line:256,column:58}},line:256},"20":{name:"(anonymous_20)",decl:{start:{line:264,column:29},end:{line:264,column:30}},loc:{start:{line:264,column:50},end:{line:268,column:1}},line:264},"21":{name:"(anonymous_21)",decl:{start:{line:297,column:23},end:{line:297,column:24}},loc:{start:{line:297,column:44},end:{line:326,column:1}},line:297}},branchMap:{"0":{loc:{start:{line:30,column:20},end:{line:30,column:46}},type:"binary-expr",locations:[{start:{line:30,column:20},end:{line:30,column:40}},{start:{line:30,column:44},end:{line:30,column:46}}],line:30},"1":{loc:{start:{line:35,column:15},end:{line:35,column:36}},type:"binary-expr",locations:[{start:{line:35,column:15},end:{line:35,column:30}},{start:{line:35,column:34},end:{line:35,column:36}}],line:35},"2":{loc:{start:{line:37,column:24},end:{line:37,column:55}},type:"binary-expr",locations:[{start:{line:37,column:24},end:{line:37,column:49}},{start:{line:37,column:53},end:{line:37,column:55}}],line:37},"3":{loc:{start:{line:45,column:4},end:{line:47,column:5}},type:"if",locations:[{start:{line:45,column:4},end:{line:47,column:5}},{start:{line:45,column:4},end:{line:47,column:5}}],line:45},"4":{loc:{start:{line:79,column:30},end:{line:79,column:65}},type:"binary-expr",locations:[{start:{line:79,column:30},end:{line:79,column:59}},{start:{line:79,column:63},end:{line:79,column:65}}],line:79},"5":{loc:{start:{line:105,column:55},end:{line:105,column:65}},type:"default-arg",locations:[{start:{line:105,column:63},end:{line:105,column:65}}],line:105},"6":{loc:{start:{line:131,column:4},end:{line:140,column:5}},type:"switch",locations:[{start:{line:132,column:8},end:{line:133,column:46}},{start:{line:134,column:8},end:{line:135,column:47}},{start:{line:136,column:8},end:{line:137,column:48}},{start:{line:138,column:8},end:{line:139,column:69}}],line:131},"7":{loc:{start:{line:144,column:4},end:{line:185,column:5}},type:"switch",locations:[{start:{line:145,column:8},end:{line:146,column:64}},{start:{line:147,column:8},end:{line:148,column:64}},{start:{line:149,column:8},end:{line:150,column:64}},{start:{line:151,column:8},end:{line:152,column:64}},{start:{line:153,column:8},end:{line:154,column:64}},{start:{line:155,column:8},end:{line:156,column:64}},{start:{line:157,column:8},end:{line:158,column:64}},{start:{line:159,column:8},end:{line:160,column:64}},{start:{line:161,column:8},end:{line:162,column:64}},{start:{line:163,column:8},end:{line:164,column:64}},{start:{line:165,column:8},end:{line:166,column:64}},{start:{line:167,column:8},end:{line:168,column:64}},{start:{line:169,column:8},end:{line:170,column:64}},{start:{line:171,column:8},end:{line:172,column:64}},{start:{line:173,column:8},end:{line:174,column:64}},{start:{line:176,column:8},end:{line:176,column:32}},{start:{line:177,column:8},end:{line:177,column:39}},{start:{line:178,column:8},end:{line:178,column:36}},{start:{line:179,column:8},end:{line:179,column:43}},{start:{line:180,column:8},end:{line:180,column:32}},{start:{line:181,column:8},end:{line:182,column:64}},{start:{line:183,column:8},end:{line:184,column:65}}],line:144},"8":{loc:{start:{line:195,column:11},end:{line:197,column:22}},type:"cond-expr",locations:[{start:{line:196,column:10},end:{line:196,column:77}},{start:{line:197,column:10},end:{line:197,column:22}}],line:195},"9":{loc:{start:{line:229,column:4},end:{line:244,column:5}},type:"switch",locations:[{start:{line:230,column:8},end:{line:230,column:35}},{start:{line:231,column:8},end:{line:231,column:32}},{start:{line:232,column:8},end:{line:232,column:34}},{start:{line:233,column:8},end:{line:233,column:39}},{start:{line:234,column:8},end:{line:234,column:40}},{start:{line:235,column:8},end:{line:235,column:38}},{start:{line:236,column:8},end:{line:236,column:43}},{start:{line:237,column:8},end:{line:237,column:32}},{start:{line:238,column:8},end:{line:238,column:43}},{start:{line:239,column:8},end:{line:239,column:40}},{start:{line:240,column:8},end:{line:241,column:24}},{start:{line:242,column:8},end:{line:243,column:25}}],line:229},"10":{loc:{start:{line:265,column:4},end:{line:267,column:5}},type:"if",locations:[{start:{line:265,column:4},end:{line:267,column:5}},{start:{line:265,column:4},end:{line:267,column:5}}],line:265},"11":{loc:{start:{line:298,column:4},end:{line:300,column:5}},type:"if",locations:[{start:{line:298,column:4},end:{line:300,column:5}},{start:{line:298,column:4},end:{line:300,column:5}}],line:298},"12":{loc:{start:{line:302,column:4},end:{line:304,column:5}},type:"if",locations:[{start:{line:302,column:4},end:{line:304,column:5}},{start:{line:302,column:4},end:{line:304,column:5}}],line:302},"13":{loc:{start:{line:308,column:8},end:{line:323,column:9}},type:"if",locations:[{start:{line:308,column:8},end:{line:323,column:9}},{start:{line:308,column:8},end:{line:323,column:9}}],line:308},"14":{loc:{start:{line:313,column:12},end:{line:315,column:13}},type:"if",locations:[{start:{line:313,column:12},end:{line:315,column:13}},{start:{line:313,column:12},end:{line:315,column:13}}],line:313}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0],"6":[0,0,0,0],"7":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"8":[0,0],"9":[0,0,0,0,0,0,0,0,0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/src/utils/utils.ts",sources:["/Users/rg/dev/opensea-js/src/utils/utils.ts"],names:[],mappings:"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",sourcesContent:["import {\n  CROSS_CHAIN_SEAPORT_V1_5_ADDRESS,\n  CROSS_CHAIN_SEAPORT_V1_6_ADDRESS,\n  ItemType,\n} from \"@opensea/seaport-js/lib/constants\";\nimport { ethers, FixedNumber } from \"ethers\";\nimport {\n  MAX_EXPIRATION_MONTHS,\n  SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS,\n  SHARED_STOREFRONT_ADDRESSES,\n  FIXED_NUMBER_100,\n} from \"../constants\";\nimport {\n  Chain,\n  Fee,\n  OpenSeaAccount,\n  OpenSeaCollection,\n  OpenSeaPaymentToken,\n  RarityStrategy,\n  TokenStandard,\n} from \"../types\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const collectionFromJSON = (collection: any): OpenSeaCollection => {\n  return {\n    name: collection.name,\n    collection: collection.collection,\n    description: collection.description,\n    imageUrl: collection.image_url,\n    bannerImageUrl: collection.banner_image_url,\n    owner: collection.owner,\n    safelistStatus: collection.safelist_status,\n    category: collection.category,\n    isDisabled: collection.is_disabled,\n    isNSFW: collection.is_nsfw,\n    traitOffersEnabled: collection.trait_offers_enabled,\n    collectionOffersEnabled: collection.collection_offers_enabled,\n    openseaUrl: collection.opensea_url,\n    projectUrl: collection.project_url,\n    wikiUrl: collection.wiki_url,\n    discordUrl: collection.discord_url,\n    telegramUrl: collection.telegram_url,\n    twitterUsername: collection.twitter_username,\n    instagramUsername: collection.instagram_username,\n    contracts: (collection.contracts ?? []).map((contract: any) => ({\n      address: contract.address,\n      chain: contract.chain,\n    })),\n    editors: collection.editors,\n    fees: (collection.fees ?? []).map(feeFromJSON),\n    rarity: rarityFromJSON(collection.rarity),\n    paymentTokens: (collection.payment_tokens ?? []).map(paymentTokenFromJSON),\n    totalSupply: collection.total_supply,\n    createdDate: collection.created_date,\n    requiredZone: collection.required_zone,\n  };\n};\n\nexport const rarityFromJSON = (rarity: any): RarityStrategy | null => {\n  if (!rarity) {\n    return null;\n  }\n  const fromJSON: RarityStrategy = {\n    strategyId: rarity.strategy_id,\n    strategyVersion: rarity.strategy_version,\n    calculatedAt: rarity.calculated_at,\n    maxRank: rarity.max_rank,\n    tokensScored: rarity.tokens_scored,\n  };\n  return fromJSON;\n};\n\nexport const paymentTokenFromJSON = (token: any): OpenSeaPaymentToken => {\n  const fromJSON: OpenSeaPaymentToken = {\n    name: token.name,\n    symbol: token.symbol,\n    decimals: token.decimals,\n    address: token.address,\n    chain: token.chain,\n    imageUrl: token.image,\n    ethPrice: token.eth_price,\n    usdPrice: token.usd_price,\n  };\n  return fromJSON;\n};\n\nexport const accountFromJSON = (account: any): OpenSeaAccount => {\n  return {\n    address: account.address,\n    username: account.username,\n    profileImageUrl: account.profile_image_url,\n    bannerImageUrl: account.banner_image_url,\n    website: account.website,\n    socialMediaAccounts: (account.social_media_accounts ?? []).map(\n      (acct: any) => ({\n        platform: acct.platform,\n        username: acct.username,\n      }),\n    ),\n    bio: account.bio,\n    joinedDate: account.joined_date,\n  };\n};\n\nexport const feeFromJSON = (fee: any): Fee => {\n  const fromJSON: Fee = {\n    fee: fee.fee,\n    recipient: fee.recipient,\n    required: fee.required,\n  };\n  return fromJSON;\n};\n\n/**\n * Estimate gas usage for a transaction.\n * @param provider The Provider\n * @param from Address sending transaction\n * @param to Destination contract address\n * @param data Data to send to contract\n * @param value Value in ETH to send with data\n */\nexport async function estimateGas(\n  provider: ethers.Provider,\n  { from, to, data, value = 0n }: ethers.Transaction,\n) {\n  return await provider.estimateGas({\n    from,\n    to,\n    value: value.toString(),\n    data,\n  });\n}\n\n/**\n * The longest time that an order is valid for is one month from the current date\n * @returns unix timestamp\n */\nexport const getMaxOrderExpirationTimestamp = () => {\n  const maxExpirationDate = new Date();\n\n  maxExpirationDate.setMonth(\n    maxExpirationDate.getMonth() + MAX_EXPIRATION_MONTHS,\n  );\n  maxExpirationDate.setDate(maxExpirationDate.getDate() - 1);\n\n  return Math.round(maxExpirationDate.getTime() / 1000);\n};\n\ninterface ErrorWithCode extends Error {\n  code: string;\n}\n\nexport const hasErrorCode = (error: unknown): error is ErrorWithCode => {\n  const untypedError = error as Partial<ErrorWithCode>;\n  return !!untypedError.code;\n};\n\nexport const getAssetItemType = (tokenStandard: TokenStandard) => {\n  switch (tokenStandard) {\n    case \"ERC20\":\n      return ItemType.ERC20;\n    case \"ERC721\":\n      return ItemType.ERC721;\n    case \"ERC1155\":\n      return ItemType.ERC1155;\n    default:\n      throw new Error(`Unknown schema name: ${tokenStandard}`);\n  }\n};\n\nexport const getWETHAddress = (chain: Chain) => {\n  switch (chain) {\n    case Chain.Mainnet:\n      return \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\";\n    case Chain.Polygon:\n      return \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\";\n    case Chain.Amoy:\n      return \"0x52eF3d68BaB452a294342DC3e5f464d7f610f72E\";\n    case Chain.Sepolia:\n      return \"0x7b79995e5f793a07bc00c21412e50ecae098e7f9\";\n    case Chain.Klaytn:\n      return \"0xfd844c2fca5e595004b17615f891620d1cb9bbb2\";\n    case Chain.Baobab:\n      return \"0x9330dd6713c8328a8d82b14e3f60a0f0b4cc7bfb\";\n    case Chain.Avalanche:\n      return \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\";\n    case Chain.Fuji:\n      return \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\";\n    case Chain.BNB:\n      return \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n    case Chain.BNBTestnet:\n      return \"0xae13d989dac2f0debff460ac112a837c89baa7cd\";\n    case Chain.Arbitrum:\n      return \"0x82af49447d8a07e3bd95bd0d56f35241523fbab1\";\n    case Chain.ArbitrumNova:\n      return \"0x722e8bdd2ce80a4422e880164f2079488e115365\";\n    case Chain.ArbitrumSepolia:\n      return \"0x980b62da83eff3d4576c647993b0c1d7faf17c73\";\n    case Chain.Blast:\n      return \"0x4300000000000000000000000000000000000004\";\n    case Chain.BlastSepolia:\n      return \"0x4200000000000000000000000000000000000023\";\n    // OP Chains have WETH at the same address\n    case Chain.Base:\n    case Chain.BaseSepolia:\n    case Chain.Optimism:\n    case Chain.OptimismSepolia:\n    case Chain.Zora:\n    case Chain.ZoraSepolia:\n      return \"0x4200000000000000000000000000000000000006\";\n    default:\n      throw new Error(`Unknown WETH address for ${chain}`);\n  }\n};\n\n/**\n * Checks if the token address is the shared storefront address and if so replaces\n * that address with the lazy mint adapter address. Otherwise, returns the input token address\n * @param tokenAddress token address\n * @returns input token address or lazy mint adapter address\n */\nexport const getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress =\n  (tokenAddress: string): string => {\n    return SHARED_STOREFRONT_ADDRESSES.includes(tokenAddress.toLowerCase())\n      ? SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS\n      : tokenAddress;\n  };\n\n/**\n * Sums up the basis points for fees.\n * @param fees The fees to sum up\n * @returns sum of basis points\n */\nexport const totalBasisPointsForFees = (fees: Fee[]): bigint => {\n  const feeBasisPoints = fees.map((fee) => basisPointsForFee(fee));\n  const totalBasisPoints = feeBasisPoints.reduce(\n    (sum, basisPoints) => basisPoints + sum,\n    0n,\n  );\n  return totalBasisPoints;\n};\n\n/**\n * Converts a fee to its basis points representation.\n * @param fee The fee to convert\n * @returns the basis points\n */\nexport const basisPointsForFee = (fee: Fee): bigint => {\n  return BigInt(\n    FixedNumber.fromString(fee.fee.toString())\n      .mul(FIXED_NUMBER_100)\n      .toFormat(0) // format to 0 decimal places to convert to bigint\n      .toString(),\n  );\n};\n\n/**\n * Checks whether the current chain is a test chain.\n * @param chain Chain to check.\n * @returns True if the chain is a test chain.\n */\nexport const isTestChain = (chain: Chain): boolean => {\n  switch (chain) {\n    case Chain.Sepolia:\n    case Chain.Amoy:\n    case Chain.Baobab:\n    case Chain.BaseSepolia:\n    case Chain.BlastSepolia:\n    case Chain.BNBTestnet:\n    case Chain.ArbitrumSepolia:\n    case Chain.Fuji:\n    case Chain.OptimismSepolia:\n    case Chain.SolanaDevnet:\n    case Chain.ZoraSepolia:\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns if a protocol address is valid.\n * @param protocolAddress The protocol address\n */\nexport const isValidProtocol = (protocolAddress: string): boolean => {\n  const checkSumAddress = ethers.getAddress(protocolAddress);\n  const validProtocolAddresses = [\n    CROSS_CHAIN_SEAPORT_V1_6_ADDRESS,\n    CROSS_CHAIN_SEAPORT_V1_5_ADDRESS,\n  ].map((address) => ethers.getAddress(address));\n  return validProtocolAddresses.includes(checkSumAddress);\n};\n\n/**\n * Throws an error if the protocol address is not valid.\n * @param protocolAddress The protocol address\n */\nexport const requireValidProtocol = (protocolAddress: string) => {\n  if (!isValidProtocol(protocolAddress)) {\n    throw new Error(`Unsupported protocol address: ${protocolAddress}`);\n  }\n};\n\n/**\n * Decodes an encoded string of token IDs into an array of individual token IDs using bigint for precise calculations.\n *\n * The encoded token IDs can be in the following formats:\n * 1. Single numbers: '123' => ['123']\n * 2. Comma-separated numbers: '1,2,3,4' => ['1', '2', '3', '4']\n * 3. Ranges of numbers: '5:8' => ['5', '6', '7', '8']\n * 4. Combinations of single numbers and ranges: '1,3:5,8' => ['1', '3', '4', '5', '8']\n * 5. Wildcard '*' (matches all token IDs): '*' => ['*']\n *\n * @param encodedTokenIds - The encoded string of token IDs to be decoded.\n * @returns An array of individual token IDs after decoding the input.\n *\n * @throws {Error} If the input is not correctly formatted or if bigint operations fail.\n *\n * @example\n * const encoded = '1,3:5,8';\n * const decoded = decodeTokenIds(encoded); // Output: ['1', '3', '4', '5', '8']\n *\n * @example\n * const encodedWildcard = '*';\n * const decodedWildcard = decodeTokenIds(encodedWildcard); // Output: ['*']\n *\n * @example\n * const emptyEncoded = '';\n * const decodedEmpty = decodeTokenIds(emptyEncoded); // Output: []\n */\nexport const decodeTokenIds = (encodedTokenIds: string): string[] => {\n  if (encodedTokenIds === \"*\") {\n    return [\"*\"];\n  }\n\n  const validFormatRegex = /^(\\d+(:\\d+)?)(,\\d+(:\\d+)?)*$/;\n\n  if (!validFormatRegex.test(encodedTokenIds)) {\n    throw new Error(\n      \"Invalid input format. Expected a valid comma-separated list of numbers and ranges.\",\n    );\n  }\n\n  const ranges = encodedTokenIds.split(\",\");\n  const tokenIds: string[] = [];\n\n  for (const range of ranges) {\n    if (range.includes(\":\")) {\n      const [startStr, endStr] = range.split(\":\");\n      const start = BigInt(startStr);\n      const end = BigInt(endStr);\n      const diff = end - start + 1n;\n\n      if (diff <= 0) {\n        throw new Error(\n          `Invalid range. End value: ${end} must be greater than or equal to the start value: ${start}.`,\n        );\n      }\n\n      for (let i = 0n; i < diff; i += 1n) {\n        tokenIds.push((start + i).toString());\n      }\n    } else {\n      const tokenId = BigInt(range);\n      tokenIds.push(tokenId.toString());\n    }\n  }\n\n  return tokenIds;\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"cabd89054db8b68cc3dcbf220089117b1d06f3b6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1jp46qk8eh=function(){return actualCoverage;};}return actualCoverage;}cov_1jp46qk8eh();cov_1jp46qk8eh().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1jp46qk8eh().s[1]++;exports.decodeTokenIds=exports.requireValidProtocol=exports.isValidProtocol=exports.isTestChain=exports.basisPointsForFee=exports.totalBasisPointsForFees=exports.getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress=exports.getWETHAddress=exports.getAssetItemType=exports.hasErrorCode=exports.getMaxOrderExpirationTimestamp=exports.estimateGas=exports.feeFromJSON=exports.accountFromJSON=exports.paymentTokenFromJSON=exports.rarityFromJSON=exports.collectionFromJSON=void 0;const constants_1=(cov_1jp46qk8eh().s[2]++,require("@opensea/seaport-js/lib/constants"));const ethers_1=(cov_1jp46qk8eh().s[3]++,require("ethers"));const constants_2=(cov_1jp46qk8eh().s[4]++,require("../constants"));const types_1=(cov_1jp46qk8eh().s[5]++,require("../types"));/* eslint-disable @typescript-eslint/no-explicit-any */cov_1jp46qk8eh().s[6]++;const collectionFromJSON=collection=>{cov_1jp46qk8eh().f[0]++;cov_1jp46qk8eh().s[7]++;return{name:collection.name,collection:collection.collection,description:collection.description,imageUrl:collection.image_url,bannerImageUrl:collection.banner_image_url,owner:collection.owner,safelistStatus:collection.safelist_status,category:collection.category,isDisabled:collection.is_disabled,isNSFW:collection.is_nsfw,traitOffersEnabled:collection.trait_offers_enabled,collectionOffersEnabled:collection.collection_offers_enabled,openseaUrl:collection.opensea_url,projectUrl:collection.project_url,wikiUrl:collection.wiki_url,discordUrl:collection.discord_url,telegramUrl:collection.telegram_url,twitterUsername:collection.twitter_username,instagramUsername:collection.instagram_username,contracts:((cov_1jp46qk8eh().b[0][0]++,collection.contracts)??(cov_1jp46qk8eh().b[0][1]++,[])).map(contract=>{cov_1jp46qk8eh().f[1]++;cov_1jp46qk8eh().s[8]++;return{address:contract.address,chain:contract.chain};}),editors:collection.editors,fees:((cov_1jp46qk8eh().b[1][0]++,collection.fees)??(cov_1jp46qk8eh().b[1][1]++,[])).map(exports.feeFromJSON),rarity:(0,exports.rarityFromJSON)(collection.rarity),paymentTokens:((cov_1jp46qk8eh().b[2][0]++,collection.payment_tokens)??(cov_1jp46qk8eh().b[2][1]++,[])).map(exports.paymentTokenFromJSON),totalSupply:collection.total_supply,createdDate:collection.created_date,requiredZone:collection.required_zone};};cov_1jp46qk8eh().s[9]++;exports.collectionFromJSON=collectionFromJSON;cov_1jp46qk8eh().s[10]++;const rarityFromJSON=rarity=>{cov_1jp46qk8eh().f[2]++;cov_1jp46qk8eh().s[11]++;if(!rarity){cov_1jp46qk8eh().b[3][0]++;cov_1jp46qk8eh().s[12]++;return null;}else{cov_1jp46qk8eh().b[3][1]++;}const fromJSON=(cov_1jp46qk8eh().s[13]++,{strategyId:rarity.strategy_id,strategyVersion:rarity.strategy_version,calculatedAt:rarity.calculated_at,maxRank:rarity.max_rank,tokensScored:rarity.tokens_scored});cov_1jp46qk8eh().s[14]++;return fromJSON;};cov_1jp46qk8eh().s[15]++;exports.rarityFromJSON=rarityFromJSON;cov_1jp46qk8eh().s[16]++;const paymentTokenFromJSON=token=>{cov_1jp46qk8eh().f[3]++;const fromJSON=(cov_1jp46qk8eh().s[17]++,{name:token.name,symbol:token.symbol,decimals:token.decimals,address:token.address,chain:token.chain,imageUrl:token.image,ethPrice:token.eth_price,usdPrice:token.usd_price});cov_1jp46qk8eh().s[18]++;return fromJSON;};cov_1jp46qk8eh().s[19]++;exports.paymentTokenFromJSON=paymentTokenFromJSON;cov_1jp46qk8eh().s[20]++;const accountFromJSON=account=>{cov_1jp46qk8eh().f[4]++;cov_1jp46qk8eh().s[21]++;return{address:account.address,username:account.username,profileImageUrl:account.profile_image_url,bannerImageUrl:account.banner_image_url,website:account.website,socialMediaAccounts:((cov_1jp46qk8eh().b[4][0]++,account.social_media_accounts)??(cov_1jp46qk8eh().b[4][1]++,[])).map(acct=>{cov_1jp46qk8eh().f[5]++;cov_1jp46qk8eh().s[22]++;return{platform:acct.platform,username:acct.username};}),bio:account.bio,joinedDate:account.joined_date};};cov_1jp46qk8eh().s[23]++;exports.accountFromJSON=accountFromJSON;cov_1jp46qk8eh().s[24]++;const feeFromJSON=fee=>{cov_1jp46qk8eh().f[6]++;const fromJSON=(cov_1jp46qk8eh().s[25]++,{fee:fee.fee,recipient:fee.recipient,required:fee.required});cov_1jp46qk8eh().s[26]++;return fromJSON;};cov_1jp46qk8eh().s[27]++;exports.feeFromJSON=feeFromJSON;/**
 * Estimate gas usage for a transaction.
 * @param provider The Provider
 * @param from Address sending transaction
 * @param to Destination contract address
 * @param data Data to send to contract
 * @param value Value in ETH to send with data
 */async function estimateGas(provider,{from,to,data,value=(cov_1jp46qk8eh().b[5][0]++,0n)}){cov_1jp46qk8eh().f[7]++;cov_1jp46qk8eh().s[28]++;return await provider.estimateGas({from,to,value:value.toString(),data});}cov_1jp46qk8eh().s[29]++;exports.estimateGas=estimateGas;/**
 * The longest time that an order is valid for is one month from the current date
 * @returns unix timestamp
 */cov_1jp46qk8eh().s[30]++;const getMaxOrderExpirationTimestamp=()=>{cov_1jp46qk8eh().f[8]++;const maxExpirationDate=(cov_1jp46qk8eh().s[31]++,new Date());cov_1jp46qk8eh().s[32]++;maxExpirationDate.setMonth(maxExpirationDate.getMonth()+constants_2.MAX_EXPIRATION_MONTHS);cov_1jp46qk8eh().s[33]++;maxExpirationDate.setDate(maxExpirationDate.getDate()-1);cov_1jp46qk8eh().s[34]++;return Math.round(maxExpirationDate.getTime()/1000);};cov_1jp46qk8eh().s[35]++;exports.getMaxOrderExpirationTimestamp=getMaxOrderExpirationTimestamp;cov_1jp46qk8eh().s[36]++;const hasErrorCode=error=>{cov_1jp46qk8eh().f[9]++;const untypedError=(cov_1jp46qk8eh().s[37]++,error);cov_1jp46qk8eh().s[38]++;return!!untypedError.code;};cov_1jp46qk8eh().s[39]++;exports.hasErrorCode=hasErrorCode;cov_1jp46qk8eh().s[40]++;const getAssetItemType=tokenStandard=>{cov_1jp46qk8eh().f[10]++;cov_1jp46qk8eh().s[41]++;switch(tokenStandard){case"ERC20":cov_1jp46qk8eh().b[6][0]++;cov_1jp46qk8eh().s[42]++;return constants_1.ItemType.ERC20;case"ERC721":cov_1jp46qk8eh().b[6][1]++;cov_1jp46qk8eh().s[43]++;return constants_1.ItemType.ERC721;case"ERC1155":cov_1jp46qk8eh().b[6][2]++;cov_1jp46qk8eh().s[44]++;return constants_1.ItemType.ERC1155;default:cov_1jp46qk8eh().b[6][3]++;cov_1jp46qk8eh().s[45]++;throw new Error(`Unknown schema name: ${tokenStandard}`);}};cov_1jp46qk8eh().s[46]++;exports.getAssetItemType=getAssetItemType;cov_1jp46qk8eh().s[47]++;const getWETHAddress=chain=>{cov_1jp46qk8eh().f[11]++;cov_1jp46qk8eh().s[48]++;switch(chain){case types_1.Chain.Mainnet:cov_1jp46qk8eh().b[7][0]++;cov_1jp46qk8eh().s[49]++;return"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2";case types_1.Chain.Polygon:cov_1jp46qk8eh().b[7][1]++;cov_1jp46qk8eh().s[50]++;return"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619";case types_1.Chain.Amoy:cov_1jp46qk8eh().b[7][2]++;cov_1jp46qk8eh().s[51]++;return"0x52eF3d68BaB452a294342DC3e5f464d7f610f72E";case types_1.Chain.Sepolia:cov_1jp46qk8eh().b[7][3]++;cov_1jp46qk8eh().s[52]++;return"0x7b79995e5f793a07bc00c21412e50ecae098e7f9";case types_1.Chain.Klaytn:cov_1jp46qk8eh().b[7][4]++;cov_1jp46qk8eh().s[53]++;return"0xfd844c2fca5e595004b17615f891620d1cb9bbb2";case types_1.Chain.Baobab:cov_1jp46qk8eh().b[7][5]++;cov_1jp46qk8eh().s[54]++;return"0x9330dd6713c8328a8d82b14e3f60a0f0b4cc7bfb";case types_1.Chain.Avalanche:cov_1jp46qk8eh().b[7][6]++;cov_1jp46qk8eh().s[55]++;return"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7";case types_1.Chain.Fuji:cov_1jp46qk8eh().b[7][7]++;cov_1jp46qk8eh().s[56]++;return"0xd00ae08403B9bbb9124bB305C09058E32C39A48c";case types_1.Chain.BNB:cov_1jp46qk8eh().b[7][8]++;cov_1jp46qk8eh().s[57]++;return"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c";case types_1.Chain.BNBTestnet:cov_1jp46qk8eh().b[7][9]++;cov_1jp46qk8eh().s[58]++;return"0xae13d989dac2f0debff460ac112a837c89baa7cd";case types_1.Chain.Arbitrum:cov_1jp46qk8eh().b[7][10]++;cov_1jp46qk8eh().s[59]++;return"0x82af49447d8a07e3bd95bd0d56f35241523fbab1";case types_1.Chain.ArbitrumNova:cov_1jp46qk8eh().b[7][11]++;cov_1jp46qk8eh().s[60]++;return"0x722e8bdd2ce80a4422e880164f2079488e115365";case types_1.Chain.ArbitrumSepolia:cov_1jp46qk8eh().b[7][12]++;cov_1jp46qk8eh().s[61]++;return"0x980b62da83eff3d4576c647993b0c1d7faf17c73";case types_1.Chain.Blast:cov_1jp46qk8eh().b[7][13]++;cov_1jp46qk8eh().s[62]++;return"0x4300000000000000000000000000000000000004";case types_1.Chain.BlastSepolia:cov_1jp46qk8eh().b[7][14]++;cov_1jp46qk8eh().s[63]++;return"0x4200000000000000000000000000000000000023";// OP Chains have WETH at the same address
case types_1.Chain.Base:cov_1jp46qk8eh().b[7][15]++;case types_1.Chain.BaseSepolia:cov_1jp46qk8eh().b[7][16]++;case types_1.Chain.Optimism:cov_1jp46qk8eh().b[7][17]++;case types_1.Chain.OptimismSepolia:cov_1jp46qk8eh().b[7][18]++;case types_1.Chain.Zora:cov_1jp46qk8eh().b[7][19]++;case types_1.Chain.ZoraSepolia:cov_1jp46qk8eh().b[7][20]++;cov_1jp46qk8eh().s[64]++;return"0x4200000000000000000000000000000000000006";default:cov_1jp46qk8eh().b[7][21]++;cov_1jp46qk8eh().s[65]++;throw new Error(`Unknown WETH address for ${chain}`);}};cov_1jp46qk8eh().s[66]++;exports.getWETHAddress=getWETHAddress;/**
 * Checks if the token address is the shared storefront address and if so replaces
 * that address with the lazy mint adapter address. Otherwise, returns the input token address
 * @param tokenAddress token address
 * @returns input token address or lazy mint adapter address
 */cov_1jp46qk8eh().s[67]++;const getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress=tokenAddress=>{cov_1jp46qk8eh().f[12]++;cov_1jp46qk8eh().s[68]++;return constants_2.SHARED_STOREFRONT_ADDRESSES.includes(tokenAddress.toLowerCase())?(cov_1jp46qk8eh().b[8][0]++,constants_2.SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS):(cov_1jp46qk8eh().b[8][1]++,tokenAddress);};cov_1jp46qk8eh().s[69]++;exports.getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress=getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress;/**
 * Sums up the basis points for fees.
 * @param fees The fees to sum up
 * @returns sum of basis points
 */cov_1jp46qk8eh().s[70]++;const totalBasisPointsForFees=fees=>{cov_1jp46qk8eh().f[13]++;const feeBasisPoints=(cov_1jp46qk8eh().s[71]++,fees.map(fee=>{cov_1jp46qk8eh().f[14]++;cov_1jp46qk8eh().s[72]++;return(0,exports.basisPointsForFee)(fee);}));const totalBasisPoints=(cov_1jp46qk8eh().s[73]++,feeBasisPoints.reduce((sum,basisPoints)=>{cov_1jp46qk8eh().f[15]++;cov_1jp46qk8eh().s[74]++;return basisPoints+sum;},0n));cov_1jp46qk8eh().s[75]++;return totalBasisPoints;};cov_1jp46qk8eh().s[76]++;exports.totalBasisPointsForFees=totalBasisPointsForFees;/**
 * Converts a fee to its basis points representation.
 * @param fee The fee to convert
 * @returns the basis points
 */cov_1jp46qk8eh().s[77]++;const basisPointsForFee=fee=>{cov_1jp46qk8eh().f[16]++;cov_1jp46qk8eh().s[78]++;return BigInt(ethers_1.FixedNumber.fromString(fee.fee.toString()).mul(constants_2.FIXED_NUMBER_100).toFormat(0)// format to 0 decimal places to convert to bigint
.toString());};cov_1jp46qk8eh().s[79]++;exports.basisPointsForFee=basisPointsForFee;/**
 * Checks whether the current chain is a test chain.
 * @param chain Chain to check.
 * @returns True if the chain is a test chain.
 */cov_1jp46qk8eh().s[80]++;const isTestChain=chain=>{cov_1jp46qk8eh().f[17]++;cov_1jp46qk8eh().s[81]++;switch(chain){case types_1.Chain.Sepolia:cov_1jp46qk8eh().b[9][0]++;case types_1.Chain.Amoy:cov_1jp46qk8eh().b[9][1]++;case types_1.Chain.Baobab:cov_1jp46qk8eh().b[9][2]++;case types_1.Chain.BaseSepolia:cov_1jp46qk8eh().b[9][3]++;case types_1.Chain.BlastSepolia:cov_1jp46qk8eh().b[9][4]++;case types_1.Chain.BNBTestnet:cov_1jp46qk8eh().b[9][5]++;case types_1.Chain.ArbitrumSepolia:cov_1jp46qk8eh().b[9][6]++;case types_1.Chain.Fuji:cov_1jp46qk8eh().b[9][7]++;case types_1.Chain.OptimismSepolia:cov_1jp46qk8eh().b[9][8]++;case types_1.Chain.SolanaDevnet:cov_1jp46qk8eh().b[9][9]++;case types_1.Chain.ZoraSepolia:cov_1jp46qk8eh().b[9][10]++;cov_1jp46qk8eh().s[82]++;return true;default:cov_1jp46qk8eh().b[9][11]++;cov_1jp46qk8eh().s[83]++;return false;}};cov_1jp46qk8eh().s[84]++;exports.isTestChain=isTestChain;/**
 * Returns if a protocol address is valid.
 * @param protocolAddress The protocol address
 */cov_1jp46qk8eh().s[85]++;const isValidProtocol=protocolAddress=>{cov_1jp46qk8eh().f[18]++;const checkSumAddress=(cov_1jp46qk8eh().s[86]++,ethers_1.ethers.getAddress(protocolAddress));const validProtocolAddresses=(cov_1jp46qk8eh().s[87]++,[constants_1.CROSS_CHAIN_SEAPORT_V1_6_ADDRESS,constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS].map(address=>{cov_1jp46qk8eh().f[19]++;cov_1jp46qk8eh().s[88]++;return ethers_1.ethers.getAddress(address);}));cov_1jp46qk8eh().s[89]++;return validProtocolAddresses.includes(checkSumAddress);};cov_1jp46qk8eh().s[90]++;exports.isValidProtocol=isValidProtocol;/**
 * Throws an error if the protocol address is not valid.
 * @param protocolAddress The protocol address
 */cov_1jp46qk8eh().s[91]++;const requireValidProtocol=protocolAddress=>{cov_1jp46qk8eh().f[20]++;cov_1jp46qk8eh().s[92]++;if(!(0,exports.isValidProtocol)(protocolAddress)){cov_1jp46qk8eh().b[10][0]++;cov_1jp46qk8eh().s[93]++;throw new Error(`Unsupported protocol address: ${protocolAddress}`);}else{cov_1jp46qk8eh().b[10][1]++;}};cov_1jp46qk8eh().s[94]++;exports.requireValidProtocol=requireValidProtocol;/**
 * Decodes an encoded string of token IDs into an array of individual token IDs using bigint for precise calculations.
 *
 * The encoded token IDs can be in the following formats:
 * 1. Single numbers: '123' => ['123']
 * 2. Comma-separated numbers: '1,2,3,4' => ['1', '2', '3', '4']
 * 3. Ranges of numbers: '5:8' => ['5', '6', '7', '8']
 * 4. Combinations of single numbers and ranges: '1,3:5,8' => ['1', '3', '4', '5', '8']
 * 5. Wildcard '*' (matches all token IDs): '*' => ['*']
 *
 * @param encodedTokenIds - The encoded string of token IDs to be decoded.
 * @returns An array of individual token IDs after decoding the input.
 *
 * @throws {Error} If the input is not correctly formatted or if bigint operations fail.
 *
 * @example
 * const encoded = '1,3:5,8';
 * const decoded = decodeTokenIds(encoded); // Output: ['1', '3', '4', '5', '8']
 *
 * @example
 * const encodedWildcard = '*';
 * const decodedWildcard = decodeTokenIds(encodedWildcard); // Output: ['*']
 *
 * @example
 * const emptyEncoded = '';
 * const decodedEmpty = decodeTokenIds(emptyEncoded); // Output: []
 */cov_1jp46qk8eh().s[95]++;const decodeTokenIds=encodedTokenIds=>{cov_1jp46qk8eh().f[21]++;cov_1jp46qk8eh().s[96]++;if(encodedTokenIds==="*"){cov_1jp46qk8eh().b[11][0]++;cov_1jp46qk8eh().s[97]++;return["*"];}else{cov_1jp46qk8eh().b[11][1]++;}const validFormatRegex=(cov_1jp46qk8eh().s[98]++,/^(\d+(:\d+)?)(,\d+(:\d+)?)*$/);cov_1jp46qk8eh().s[99]++;if(!validFormatRegex.test(encodedTokenIds)){cov_1jp46qk8eh().b[12][0]++;cov_1jp46qk8eh().s[100]++;throw new Error("Invalid input format. Expected a valid comma-separated list of numbers and ranges.");}else{cov_1jp46qk8eh().b[12][1]++;}const ranges=(cov_1jp46qk8eh().s[101]++,encodedTokenIds.split(","));const tokenIds=(cov_1jp46qk8eh().s[102]++,[]);cov_1jp46qk8eh().s[103]++;for(const range of ranges){cov_1jp46qk8eh().s[104]++;if(range.includes(":")){cov_1jp46qk8eh().b[13][0]++;const[startStr,endStr]=(cov_1jp46qk8eh().s[105]++,range.split(":"));const start=(cov_1jp46qk8eh().s[106]++,BigInt(startStr));const end=(cov_1jp46qk8eh().s[107]++,BigInt(endStr));const diff=(cov_1jp46qk8eh().s[108]++,end-start+1n);cov_1jp46qk8eh().s[109]++;if(diff<=0){cov_1jp46qk8eh().b[14][0]++;cov_1jp46qk8eh().s[110]++;throw new Error(`Invalid range. End value: ${end} must be greater than or equal to the start value: ${start}.`);}else{cov_1jp46qk8eh().b[14][1]++;}cov_1jp46qk8eh().s[111]++;for(let i=(cov_1jp46qk8eh().s[112]++,0n);i<diff;i+=1n){cov_1jp46qk8eh().s[113]++;tokenIds.push((start+i).toString());}}else{cov_1jp46qk8eh().b[13][1]++;const tokenId=(cov_1jp46qk8eh().s[114]++,BigInt(range));cov_1jp46qk8eh().s[115]++;tokenIds.push(tokenId.toString());}}cov_1jp46qk8eh().s[116]++;return tokenIds;};cov_1jp46qk8eh().s[117]++;exports.decodeTokenIds=decodeTokenIds;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,