{"version":3,"file":"/Users/rg/dev/opensea-js/test/integration/getNFTs.spec.ts","sources":["/Users/rg/dev/opensea-js/test/integration/getNFTs.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert, expect } from \"chai\";\nimport { suite, test } from \"mocha\";\nimport { sdk } from \"./setup\";\nimport { Chain } from \"../../src/types\";\n\nsuite(\"SDK: NFTs\", () => {\n  test(\"Get NFTs By Collection\", async () => {\n    const response = await sdk.api.getNFTsByCollection(\"proof-moonbirds\");\n    assert(response, \"Response should exist.\");\n    assert.equal(response.nfts.length, 50, \"Response should include 50 NFTs\");\n    assert(response.next, \"Response should have a next cursor\");\n  });\n\n  test(\"Get NFTs By Contract\", async () => {\n    const tokenAddress = \"0x4768cbf202f365fbf704b9b9d397551a0443909b\"; // Roo Troop\n    const response = await sdk.api.getNFTsByContract(\n      tokenAddress,\n      undefined,\n      undefined,\n      Chain.Polygon,\n    );\n    assert(response, \"Response should exist.\");\n    assert.equal(response.nfts.length, 50, \"Response should include 50 NFTs\");\n    assert(response.next, \"Response should have a next cursor\");\n  });\n\n  test(\"Get NFTs By Account\", async () => {\n    const address = \"0xfBa662e1a8e91a350702cF3b87D0C2d2Fb4BA57F\";\n    const response = await sdk.api.getNFTsByAccount(address);\n    assert(response, \"Response should exist.\");\n    assert.equal(response.nfts.length, 50, \"Response should include 50 NFTs\");\n    assert(response.next, \"Response should have a next cursor\");\n  });\n\n  test(\"Get NFT\", async () => {\n    const tokenAddress = \"0x4768cbf202f365fbf704b9b9d397551a0443909b\"; // Roo Troop\n    const tokenId = \"2\";\n    const response = await sdk.api.getNFT(tokenAddress, tokenId, Chain.Polygon);\n    assert(response.nft, \"Response should contain nft.\");\n    assert.equal(response.nft.contract, tokenAddress, \"The address matches\");\n    assert.equal(response.nft.identifier, tokenId, \"The token id matches\");\n  });\n\n  test(\"Refresh NFT\", async () => {\n    const tokenAddress = \"0x4768cbf202f365fbf704b9b9d397551a0443909b\"; // Roo Troop\n    const identifier = \"3\";\n    const response = await sdk.api.refreshNFTMetadata(\n      tokenAddress,\n      identifier,\n      Chain.Polygon,\n    );\n    assert(response, \"Response should exist.\");\n    expect(response).to.contain(`contract ${tokenAddress}`);\n    expect(response).to.contain(`token_id ${identifier}`);\n  });\n});\n"]}