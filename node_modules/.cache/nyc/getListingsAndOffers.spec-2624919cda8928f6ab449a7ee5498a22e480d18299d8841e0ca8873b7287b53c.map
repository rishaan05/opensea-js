{"version":3,"file":"/Users/rg/dev/opensea-js/test/integration/getListingsAndOffers.spec.ts","sources":["/Users/rg/dev/opensea-js/test/integration/getListingsAndOffers.spec.ts"],"names":[],"mappings":";;AAAA,+BAA8B;AAC9B,iCAAoC;AACpC,mCAA8B;AAE9B,IAAA,aAAK,EAAC,mBAAmB,EAAE,GAAG,EAAE;IAC9B,IAAA,YAAI,EAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,IAAI,GAAG,eAAe,CAAC;QAC7B,MAAM,QAAQ,GAAG,MAAM,WAAG,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAElD,IAAA,aAAM,EAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;QAChD,IAAA,aAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,+BAA+B,CAAC,CAAC;QACvE,IAAA,aAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,0BAA0B,CAAC,CAAC;QAC7D,IAAA,aAAM,EACJ,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB,EACnC,qCAAqC,CACtC,CAAC;QACF,IAAA,aAAM,EACJ,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,EAChC,kCAAkC,CACnC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAA,aAAK,EAAC,qBAAqB,EAAE,GAAG,EAAE;IAChC,IAAA,YAAI,EAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAClC,MAAM,IAAI,GAAG,eAAe,CAAC;QAC7B,MAAM,QAAQ,GAAG,MAAM,WAAG,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAEpD,IAAA,aAAM,EAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;QAChD,IAAA,aAAM,EAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,+BAA+B,CAAC,CAAC;QACzE,IAAA,aAAM,EAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,0BAA0B,CAAC,CAAC;QAC/D,IAAA,aAAM,EACJ,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB,EACrC,qCAAqC,CACtC,CAAC;QACF,IAAA,aAAM,EACJ,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,aAAa,EAClC,kCAAkC,CACnC,CAAC;QACF,IAAA,aAAM,EAAC,QAAQ,CAAC,IAAI,EAAE,yCAAyC,CAAC,CAAC;QAEjE,uCAAuC;QACvC,MAAM,aAAa,GAAG,MAAM,WAAG,CAAC,GAAG,CAAC,cAAc,CAChD,IAAI,EACJ,SAAS,EACT,QAAQ,CAAC,IAAI,CACd,CAAC;QACF,IAAA,aAAM,EAAC,aAAa,EAAE,6BAA6B,CAAC,CAAC;QACrD,aAAM,CAAC,YAAY,CACjB,QAAQ,CAAC,QAAQ,EACjB,aAAa,CAAC,QAAQ,EACtB,qEAAqE,CACtE,CAAC;QACF,aAAM,CAAC,QAAQ,CACb,QAAQ,CAAC,IAAI,EACb,aAAa,CAAC,IAAI,EAClB,2BAA2B,CAC5B,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAA,aAAK,EAAC,mBAAmB,EAAE,GAAG,EAAE;IAC9B,IAAA,YAAI,EAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,IAAI,GAAG,eAAe,CAAC;QAC7B,MAAM,OAAO,GAAG,CAAC,CAAC;QAClB,MAAM,QAAQ,GAAG,MAAM,WAAG,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE3D,aAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;QACxE,aAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;QACxE,aAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,gCAAgC,CAAC,CAAC;QAExE,IAAA,aAAM,EAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;QAChD,IAAA,aAAM,EAAC,QAAQ,CAAC,UAAU,EAAE,+BAA+B,CAAC,CAAC;QAC7D,IAAA,aAAM,EAAC,QAAQ,CAAC,KAAK,EAAE,0BAA0B,CAAC,CAAC;QACnD,IAAA,aAAM,EAAC,QAAQ,CAAC,gBAAgB,EAAE,qCAAqC,CAAC,CAAC;QACzE,IAAA,aAAM,EAAC,QAAQ,CAAC,aAAa,EAAE,kCAAkC,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAA,aAAK,EAAC,qBAAqB,EAAE,GAAG,EAAE;IAChC,IAAA,YAAI,EAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAClC,MAAM,IAAI,GAAG,eAAe,CAAC;QAC7B,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,WAAG,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACxD,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,OAAO,GACX,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC;QACjE,MAAM,QAAQ,GAAG,MAAM,WAAG,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE7D,IAAA,aAAM,EAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;QAChD,IAAA,aAAM,EAAC,QAAQ,CAAC,UAAU,EAAE,+BAA+B,CAAC,CAAC;QAC7D,IAAA,aAAM,EAAC,QAAQ,CAAC,KAAK,EAAE,0BAA0B,CAAC,CAAC;QACnD,IAAA,aAAM,EAAC,QAAQ,CAAC,gBAAgB,EAAE,qCAAqC,CAAC,CAAC;QACzE,IAAA,aAAM,EAAC,QAAQ,CAAC,aAAa,EAAE,kCAAkC,CAAC,CAAC;QACnE,aAAM,CAAC,KAAK,CACV,OAAO,CAAC,UAAU,EAClB,QAAQ,CAAC,UAAU,EACnB,2BAA2B,CAC5B,CAAC;QACF,aAAM,CAAC,KAAK,CACV,OAAO,CAAC,gBAAgB,EACxB,QAAQ,CAAC,gBAAgB,EACzB,iCAAiC,CAClC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAA,aAAK,EAAC,sBAAsB,EAAE,GAAG,EAAE;IACjC,IAAA,YAAI,EAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAClC,MAAM,IAAI,GAAG,eAAe,CAAC;QAC7B,MAAM,QAAQ,GAAG,MAAM,WAAG,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAErD,IAAA,aAAM,EAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;QAChD,IAAA,aAAM,EAAC,QAAQ,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from \"chai\";\nimport { suite, test } from \"mocha\";\nimport { sdk } from \"./setup\";\n\nsuite(\"SDK: getAllOffers\", () => {\n  test(\"Get All Offers\", async () => {\n    const slug = \"cool-cats-nft\";\n    const response = await sdk.api.getAllOffers(slug);\n\n    assert(response, \"Response should not be null\");\n    assert(response.offers[0].order_hash, \"Order hash should not be null\");\n    assert(response.offers[0].chain, \"Chain should not be null\");\n    assert(\n      response.offers[0].protocol_address,\n      \"Protocol address should not be null\",\n    );\n    assert(\n      response.offers[0].protocol_data,\n      \"Protocol data should not be null\",\n    );\n  });\n});\n\nsuite(\"SDK: getAllListings\", () => {\n  test(\"Get All Listings\", async () => {\n    const slug = \"cool-cats-nft\";\n    const response = await sdk.api.getAllListings(slug);\n\n    assert(response, \"Response should not be null\");\n    assert(response.listings[0].order_hash, \"Order hash should not be null\");\n    assert(response.listings[0].chain, \"Chain should not be null\");\n    assert(\n      response.listings[0].protocol_address,\n      \"Protocol address should not be null\",\n    );\n    assert(\n      response.listings[0].protocol_data,\n      \"Protocol data should not be null\",\n    );\n    assert(response.next, \"Cursor for next page should not be null\");\n\n    // Should get the next page of listings\n    const responsePage2 = await sdk.api.getAllListings(\n      slug,\n      undefined,\n      response.next,\n    );\n    assert(responsePage2, \"Response should not be null\");\n    assert.notDeepEqual(\n      response.listings,\n      responsePage2.listings,\n      \"Response of second page should not equal the response of first page\",\n    );\n    assert.notEqual(\n      response.next,\n      responsePage2.next,\n      \"Next cursor should change\",\n    );\n  });\n});\n\nsuite(\"SDK: getBestOffer\", () => {\n  test(\"Get Best Offer\", async () => {\n    const slug = \"cool-cats-nft\";\n    const tokenId = 1;\n    const response = await sdk.api.getBestOffer(slug, tokenId);\n\n    assert.isString(response.price.currency, \"Currency should be a string\");\n    assert.isNumber(response.price.decimals, \"Decimals should be a number\");\n    assert.isString(response.price.value, \"Price value should be a string\");\n\n    assert(response, \"Response should not be null\");\n    assert(response.order_hash, \"Order hash should not be null\");\n    assert(response.chain, \"Chain should not be null\");\n    assert(response.protocol_address, \"Protocol address should not be null\");\n    assert(response.protocol_data, \"Protocol data should not be null\");\n  });\n});\n\nsuite(\"SDK: getBestListing\", () => {\n  test(\"Get Best Listing\", async () => {\n    const slug = \"cool-cats-nft\";\n    const { listings } = await sdk.api.getAllListings(slug);\n    const listing = listings[0];\n    const tokenId =\n      listing.protocol_data.parameters.offer[0].identifierOrCriteria;\n    const response = await sdk.api.getBestListing(slug, tokenId);\n\n    assert(response, \"Response should not be null\");\n    assert(response.order_hash, \"Order hash should not be null\");\n    assert(response.chain, \"Chain should not be null\");\n    assert(response.protocol_address, \"Protocol address should not be null\");\n    assert(response.protocol_data, \"Protocol data should not be null\");\n    assert.equal(\n      listing.order_hash,\n      response.order_hash,\n      \"Order hashes should match\",\n    );\n    assert.equal(\n      listing.protocol_address,\n      response.protocol_address,\n      \"Protocol addresses should match\",\n    );\n  });\n});\n\nsuite(\"SDK: getBestListings\", () => {\n  test(\"Get Best Listing\", async () => {\n    const slug = \"cool-cats-nft\";\n    const response = await sdk.api.getBestListings(slug);\n\n    assert(response, \"Response should not be null\");\n    assert(response.listings, \"Listings should not be null\");\n  });\n});\n"]}