"use strict";function cov_1r76ud9kcq(){var path="/Users/rg/dev/opensea-js/src/api/api.ts";var hash="59085952546a5d31e9d94ec97a009a193c7b4aae";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/src/api/api.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:28}},"2":{start:{line:4,column:17},end:{line:4,column:34}},"3":{start:{line:5,column:19},end:{line:5,column:40}},"4":{start:{line:6,column:20},end:{line:6,column:43}},"5":{start:{line:7,column:16},end:{line:7,column:42}},"6":{start:{line:8,column:16},end:{line:8,column:35}},"7":{start:{line:9,column:16},end:{line:9,column:41}},"8":{start:{line:24,column:8},end:{line:24,column:27}},"9":{start:{line:25,column:8},end:{line:25,column:36}},"10":{start:{line:26,column:8},end:{line:26,column:59}},"11":{start:{line:27,column:8},end:{line:29,column:43}},"12":{start:{line:31,column:8},end:{line:31,column:47}},"13":{start:{line:31,column:42},end:{line:31,column:45}},"14":{start:{line:52,column:27},end:{line:57,column:11}},"15":{start:{line:58,column:8},end:{line:60,column:9}},"16":{start:{line:59,column:12},end:{line:59,column:66}},"17":{start:{line:61,column:8},end:{line:61,column:56}},"18":{start:{line:80,column:25},end:{line:85,column:11}},"19":{start:{line:86,column:8},end:{line:89,column:10}},"20":{start:{line:99,column:25},end:{line:102,column:10}},"21":{start:{line:103,column:8},end:{line:103,column:24}},"22":{start:{line:113,column:25},end:{line:116,column:10}},"23":{start:{line:117,column:8},end:{line:117,column:24}},"24":{start:{line:126,column:25},end:{line:126,column:101}},"25":{start:{line:127,column:8},end:{line:127,column:24}},"26":{start:{line:136,column:25},end:{line:136,column:103}},"27":{start:{line:137,column:8},end:{line:137,column:24}},"28":{start:{line:147,column:25},end:{line:150,column:10}},"29":{start:{line:151,column:8},end:{line:151,column:24}},"30":{start:{line:162,column:22},end:{line:162,column:26}},"31":{start:{line:163,column:8},end:{line:168,column:9}},"32":{start:{line:164,column:12},end:{line:164,column:118}},"33":{start:{line:167,column:12},end:{line:167,column:116}},"34":{start:{line:169,column:25},end:{line:169,column:92}},"35":{start:{line:170,column:8},end:{line:170,column:24}},"36":{start:{line:184,column:64},end:{line:184,column:74}},"37":{start:{line:185,column:25},end:{line:185,column:151}},"38":{start:{line:186,column:8},end:{line:186,column:61}},"39":{start:{line:197,column:24},end:{line:197,column:133}},"40":{start:{line:198,column:25},end:{line:198,column:86}},"41":{start:{line:199,column:8},end:{line:199,column:24}},"42":{start:{line:207,column:8},end:{line:207,column:77}},"43":{start:{line:216,column:24},end:{line:216,column:79}},"44":{start:{line:217,column:8},end:{line:217,column:86}},"45":{start:{line:227,column:25},end:{line:230,column:10}},"46":{start:{line:231,column:8},end:{line:231,column:24}},"47":{start:{line:242,column:25},end:{line:245,column:10}},"48":{start:{line:246,column:8},end:{line:246,column:24}},"49":{start:{line:257,column:25},end:{line:260,column:10}},"50":{start:{line:261,column:8},end:{line:261,column:24}},"51":{start:{line:271,column:25},end:{line:271,column:95}},"52":{start:{line:272,column:8},end:{line:272,column:24}},"53":{start:{line:280,column:21},end:{line:280,column:60}},"54":{start:{line:281,column:25},end:{line:281,column:45}},"55":{start:{line:282,column:8},end:{line:282,column:57}},"56":{start:{line:290,column:21},end:{line:290,column:65}},"57":{start:{line:291,column:25},end:{line:291,column:45}},"58":{start:{line:292,column:8},end:{line:292,column:24}},"59":{start:{line:301,column:21},end:{line:301,column:88}},"60":{start:{line:302,column:8},end:{line:302,column:55}},"61":{start:{line:311,column:21},end:{line:311,column:76}},"62":{start:{line:312,column:8},end:{line:312,column:50}},"63":{start:{line:322,column:25},end:{line:322,column:112}},"64":{start:{line:323,column:8},end:{line:323,column:24}},"65":{start:{line:332,column:19},end:{line:332,column:51}},"66":{start:{line:333,column:20},end:{line:333,column:56}},"67":{start:{line:334,column:8},end:{line:334,column:38}},"68":{start:{line:344,column:20},end:{line:344,column:50}},"69":{start:{line:345,column:8},end:{line:345,column:50}},"70":{start:{line:348,column:32},end:{line:348,column:53}},"71":{start:{line:349,column:8},end:{line:356,column:11}},"72":{start:{line:350,column:12},end:{line:355,column:13}},"73":{start:{line:351,column:16},end:{line:351,column:83}},"74":{start:{line:351,column:40},end:{line:351,column:81}},"75":{start:{line:353,column:17},end:{line:355,column:13}},"76":{start:{line:354,column:16},end:{line:354,column:51}},"77":{start:{line:357,column:8},end:{line:357,column:42}},"78":{start:{line:365,column:8},end:{line:369,column:10}},"79":{start:{line:370,column:20},end:{line:370,column:57}},"80":{start:{line:371,column:8},end:{line:373,column:9}},"81":{start:{line:372,column:12},end:{line:372,column:38}},"82":{start:{line:374,column:8},end:{line:376,column:9}},"83":{start:{line:375,column:12},end:{line:375,column:28}},"84":{start:{line:377,column:8},end:{line:380,column:14}},"85":{start:{line:381,column:25},end:{line:381,column:41}},"86":{start:{line:382,column:8},end:{line:393,column:9}},"87":{start:{line:384,column:27},end:{line:384,column:52}},"88":{start:{line:385,column:12},end:{line:392,column:13}},"89":{start:{line:386,column:16},end:{line:386,column:70}},"90":{start:{line:391,column:16},end:{line:391,column:36}},"91":{start:{line:394,column:8},end:{line:394,column:33}},"92":{start:{line:397,column:0},end:{line:397,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:32},end:{line:32,column:5}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:31,column:33},end:{line:31,column:34}},loc:{start:{line:31,column:42},end:{line:31,column:45}},line:31},"2":{name:"(anonymous_2)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:118},end:{line:62,column:5}},line:51},"3":{name:"(anonymous_3)",decl:{start:{line:79,column:4},end:{line:79,column:5}},loc:{start:{line:79,column:119},end:{line:90,column:5}},line:79},"4":{name:"(anonymous_4)",decl:{start:{line:98,column:4},end:{line:98,column:5}},loc:{start:{line:98,column:52},end:{line:104,column:5}},line:98},"5":{name:"(anonymous_5)",decl:{start:{line:112,column:4},end:{line:112,column:5}},loc:{start:{line:112,column:54},end:{line:118,column:5}},line:112},"6":{name:"(anonymous_6)",decl:{start:{line:125,column:4},end:{line:125,column:5}},loc:{start:{line:125,column:48},end:{line:128,column:5}},line:125},"7":{name:"(anonymous_7)",decl:{start:{line:135,column:4},end:{line:135,column:5}},loc:{start:{line:135,column:50},end:{line:138,column:5}},line:135},"8":{name:"(anonymous_8)",decl:{start:{line:146,column:4},end:{line:146,column:5}},loc:{start:{line:146,column:55},end:{line:152,column:5}},line:146},"9":{name:"(anonymous_9)",decl:{start:{line:161,column:4},end:{line:161,column:5}},loc:{start:{line:161,column:86},end:{line:171,column:5}},line:161},"10":{name:"(anonymous_10)",decl:{start:{line:182,column:4},end:{line:182,column:5}},loc:{start:{line:182,column:39},end:{line:187,column:5}},line:182},"11":{name:"(anonymous_11)",decl:{start:{line:196,column:4},end:{line:196,column:5}},loc:{start:{line:196,column:94},end:{line:200,column:5}},line:196},"12":{name:"(anonymous_12)",decl:{start:{line:206,column:4},end:{line:206,column:5}},loc:{start:{line:206,column:36},end:{line:208,column:5}},line:206},"13":{name:"(anonymous_13)",decl:{start:{line:215,column:4},end:{line:215,column:5}},loc:{start:{line:215,column:43},end:{line:218,column:5}},line:215},"14":{name:"(anonymous_14)",decl:{start:{line:226,column:4},end:{line:226,column:5}},loc:{start:{line:226,column:73},end:{line:232,column:5}},line:226},"15":{name:"(anonymous_15)",decl:{start:{line:241,column:4},end:{line:241,column:5}},loc:{start:{line:241,column:94},end:{line:247,column:5}},line:241},"16":{name:"(anonymous_16)",decl:{start:{line:256,column:4},end:{line:256,column:5}},loc:{start:{line:256,column:93},end:{line:262,column:5}},line:256},"17":{name:"(anonymous_17)",decl:{start:{line:270,column:4},end:{line:270,column:5}},loc:{start:{line:270,column:58},end:{line:273,column:5}},line:270},"18":{name:"(anonymous_18)",decl:{start:{line:279,column:4},end:{line:279,column:5}},loc:{start:{line:279,column:30},end:{line:283,column:5}},line:279},"19":{name:"(anonymous_19)",decl:{start:{line:289,column:4},end:{line:289,column:5}},loc:{start:{line:289,column:35},end:{line:293,column:5}},line:289},"20":{name:"(anonymous_20)",decl:{start:{line:300,column:4},end:{line:300,column:5}},loc:{start:{line:300,column:55},end:{line:303,column:5}},line:300},"21":{name:"(anonymous_21)",decl:{start:{line:310,column:4},end:{line:310,column:5}},loc:{start:{line:310,column:30},end:{line:313,column:5}},line:310},"22":{name:"(anonymous_22)",decl:{start:{line:321,column:4},end:{line:321,column:5}},loc:{start:{line:321,column:70},end:{line:324,column:5}},line:321},"23":{name:"(anonymous_23)",decl:{start:{line:331,column:4},end:{line:331,column:5}},loc:{start:{line:331,column:35},end:{line:335,column:5}},line:331},"24":{name:"(anonymous_24)",decl:{start:{line:343,column:4},end:{line:343,column:5}},loc:{start:{line:343,column:36},end:{line:346,column:5}},line:343},"25":{name:"(anonymous_25)",decl:{start:{line:347,column:4},end:{line:347,column:5}},loc:{start:{line:347,column:38},end:{line:358,column:5}},line:347},"26":{name:"(anonymous_26)",decl:{start:{line:349,column:39},end:{line:349,column:40}},loc:{start:{line:349,column:57},end:{line:356,column:9}},line:349},"27":{name:"(anonymous_27)",decl:{start:{line:351,column:30},end:{line:351,column:31}},loc:{start:{line:351,column:40},end:{line:351,column:81}},line:351},"28":{name:"(anonymous_28)",decl:{start:{line:364,column:4},end:{line:364,column:5}},loc:{start:{line:364,column:37},end:{line:395,column:5}},line:364}},branchMap:{"0":{loc:{start:{line:26,column:21},end:{line:26,column:58}},type:"binary-expr",locations:[{start:{line:26,column:21},end:{line:26,column:33}},{start:{line:26,column:37},end:{line:26,column:58}}],line:26},"1":{loc:{start:{line:27,column:26},end:{line:29,column:42}},type:"cond-expr",locations:[{start:{line:28,column:14},end:{line:28,column:42}},{start:{line:29,column:14},end:{line:29,column:42}}],line:27},"2":{loc:{start:{line:31,column:22},end:{line:31,column:46}},type:"binary-expr",locations:[{start:{line:31,column:22},end:{line:31,column:28}},{start:{line:31,column:33},end:{line:31,column:45}}],line:31},"3":{loc:{start:{line:51,column:27},end:{line:51,column:47}},type:"default-arg",locations:[{start:{line:51,column:38},end:{line:51,column:47}}],line:51},"4":{loc:{start:{line:51,column:49},end:{line:51,column:72}},type:"default-arg",locations:[{start:{line:51,column:66},end:{line:51,column:72}}],line:51},"5":{loc:{start:{line:51,column:74},end:{line:51,column:98}},type:"default-arg",locations:[{start:{line:51,column:84},end:{line:51,column:98}}],line:51},"6":{loc:{start:{line:58,column:8},end:{line:60,column:9}},type:"if",locations:[{start:{line:58,column:8},end:{line:60,column:9}},{start:{line:58,column:8},end:{line:60,column:9}}],line:58},"7":{loc:{start:{line:79,column:28},end:{line:79,column:48}},type:"default-arg",locations:[{start:{line:79,column:39},end:{line:79,column:48}}],line:79},"8":{loc:{start:{line:79,column:50},end:{line:79,column:73}},type:"default-arg",locations:[{start:{line:79,column:67},end:{line:79,column:73}}],line:79},"9":{loc:{start:{line:79,column:75},end:{line:79,column:99}},type:"default-arg",locations:[{start:{line:79,column:85},end:{line:79,column:99}}],line:79},"10":{loc:{start:{line:163,column:8},end:{line:168,column:9}},type:"if",locations:[{start:{line:163,column:8},end:{line:168,column:9}},{start:{line:163,column:8},end:{line:168,column:9}}],line:163},"11":{loc:{start:{line:184,column:16},end:{line:184,column:36}},type:"default-arg",locations:[{start:{line:184,column:27},end:{line:184,column:36}}],line:184},"12":{loc:{start:{line:196,column:63},end:{line:196,column:92}},type:"default-arg",locations:[{start:{line:196,column:88},end:{line:196,column:92}}],line:196},"13":{loc:{start:{line:226,column:36},end:{line:226,column:53}},type:"default-arg",locations:[{start:{line:226,column:44},end:{line:226,column:53}}],line:226},"14":{loc:{start:{line:226,column:55},end:{line:226,column:71}},type:"default-arg",locations:[{start:{line:226,column:62},end:{line:226,column:71}}],line:226},"15":{loc:{start:{line:241,column:37},end:{line:241,column:54}},type:"default-arg",locations:[{start:{line:241,column:45},end:{line:241,column:54}}],line:241},"16":{loc:{start:{line:241,column:56},end:{line:241,column:72}},type:"default-arg",locations:[{start:{line:241,column:63},end:{line:241,column:72}}],line:241},"17":{loc:{start:{line:241,column:74},end:{line:241,column:92}},type:"default-arg",locations:[{start:{line:241,column:82},end:{line:241,column:92}}],line:241},"18":{loc:{start:{line:256,column:36},end:{line:256,column:53}},type:"default-arg",locations:[{start:{line:256,column:44},end:{line:256,column:53}}],line:256},"19":{loc:{start:{line:256,column:55},end:{line:256,column:71}},type:"default-arg",locations:[{start:{line:256,column:62},end:{line:256,column:71}}],line:256},"20":{loc:{start:{line:256,column:73},end:{line:256,column:91}},type:"default-arg",locations:[{start:{line:256,column:81},end:{line:256,column:91}}],line:256},"21":{loc:{start:{line:270,column:38},end:{line:270,column:56}},type:"default-arg",locations:[{start:{line:270,column:46},end:{line:270,column:56}}],line:270},"22":{loc:{start:{line:300,column:35},end:{line:300,column:53}},type:"default-arg",locations:[{start:{line:300,column:43},end:{line:300,column:53}}],line:300},"23":{loc:{start:{line:321,column:50},end:{line:321,column:68}},type:"default-arg",locations:[{start:{line:321,column:58},end:{line:321,column:68}}],line:321},"24":{loc:{start:{line:331,column:23},end:{line:331,column:33}},type:"default-arg",locations:[{start:{line:331,column:31},end:{line:331,column:33}}],line:331},"25":{loc:{start:{line:347,column:25},end:{line:347,column:36}},type:"default-arg",locations:[{start:{line:347,column:34},end:{line:347,column:36}}],line:347},"26":{loc:{start:{line:350,column:12},end:{line:355,column:13}},type:"if",locations:[{start:{line:350,column:12},end:{line:355,column:13}},{start:{line:350,column:12},end:{line:355,column:13}}],line:350},"27":{loc:{start:{line:350,column:16},end:{line:350,column:45}},type:"binary-expr",locations:[{start:{line:350,column:16},end:{line:350,column:21}},{start:{line:350,column:25},end:{line:350,column:45}}],line:350},"28":{loc:{start:{line:351,column:40},end:{line:351,column:81}},type:"binary-expr",locations:[{start:{line:351,column:40},end:{line:351,column:44}},{start:{line:351,column:48},end:{line:351,column:81}}],line:351},"29":{loc:{start:{line:353,column:17},end:{line:355,column:13}},type:"if",locations:[{start:{line:353,column:17},end:{line:355,column:13}},{start:{line:353,column:17},end:{line:355,column:13}}],line:353},"30":{loc:{start:{line:367,column:16},end:{line:367,column:63}},type:"cond-expr",locations:[{start:{line:367,column:30},end:{line:367,column:58}},{start:{line:367,column:61},end:{line:367,column:63}}],line:367},"31":{loc:{start:{line:374,column:8},end:{line:376,column:9}},type:"if",locations:[{start:{line:374,column:8},end:{line:376,column:9}},{start:{line:374,column:8},end:{line:376,column:9}}],line:374},"32":{loc:{start:{line:382,column:8},end:{line:393,column:9}},type:"if",locations:[{start:{line:382,column:8},end:{line:393,column:9}},{start:{line:382,column:8},end:{line:393,column:9}}],line:382},"33":{loc:{start:{line:385,column:12},end:{line:392,column:13}},type:"if",locations:[{start:{line:385,column:12},end:{line:392,column:13}},{start:{line:385,column:12},end:{line:392,column:13}}],line:385}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0],"4":[0],"5":[0],"6":[0,0],"7":[0],"8":[0],"9":[0],"10":[0,0],"11":[0],"12":[0],"13":[0],"14":[0],"15":[0],"16":[0],"17":[0],"18":[0],"19":[0],"20":[0],"21":[0],"22":[0],"23":[0],"24":[0],"25":[0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0]},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/src/api/api.ts",sources:["/Users/rg/dev/opensea-js/src/api/api.ts"],names:[],mappings:"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",sourcesContent:["import { ethers } from \"ethers\";\nimport {\n  getCollectionPath,\n  getOrdersAPIPath,\n  getPostCollectionOfferPath,\n  getBuildOfferPath,\n  getListNFTsByCollectionPath,\n  getListNFTsByContractPath,\n  getNFTPath,\n  getRefreshMetadataPath,\n  getCollectionOffersPath,\n  getListNFTsByAccountPath,\n  getBestOfferAPIPath,\n  getBestListingAPIPath,\n  getAllOffersAPIPath,\n  getAllListingsAPIPath,\n  getPaymentTokenPath,\n  getAccountPath,\n  getCollectionStatsPath,\n  getBestListingsAPIPath,\n} from \"./apiPaths\";\nimport {\n  BuildOfferResponse,\n  GetCollectionResponse,\n  ListNFTsResponse,\n  GetNFTResponse,\n  ListCollectionOffersResponse,\n  GetOrdersResponse,\n  GetBestOfferResponse,\n  GetBestListingResponse,\n  GetOffersResponse,\n  GetListingsResponse,\n  CollectionOffer,\n} from \"./types\";\nimport { API_BASE_MAINNET, API_BASE_TESTNET } from \"../constants\";\nimport {\n  FulfillmentDataResponse,\n  OrderAPIOptions,\n  OrdersPostQueryResponse,\n  OrdersQueryOptions,\n  OrdersQueryResponse,\n  OrderV2,\n  ProtocolData,\n} from \"../orders/types\";\nimport {\n  serializeOrdersQueryOptions,\n  deserializeOrder,\n  getFulfillmentDataPath,\n  getFulfillListingPayload,\n  getFulfillOfferPayload,\n  getBuildCollectionOfferPayload,\n  getPostCollectionOfferPayload,\n} from \"../orders/utils\";\nimport {\n  Chain,\n  OpenSeaAPIConfig,\n  OpenSeaAccount,\n  OpenSeaCollection,\n  OpenSeaCollectionStats,\n  OpenSeaPaymentToken,\n  OrderSide,\n} from \"../types\";\nimport {\n  paymentTokenFromJSON,\n  collectionFromJSON,\n  isTestChain,\n  accountFromJSON,\n} from \"../utils/utils\";\n\n/**\n * The API class for the OpenSea SDK.\n * @category Main Classes\n */\nexport class OpenSeaAPI {\n  /**\n   * Base url for the API\n   */\n  public readonly apiBaseUrl: string;\n  /**\n   * Default size to use for fetching orders\n   */\n  public pageSize = 20;\n  /**\n   * Logger function to use when debugging\n   */\n  public logger: (arg: string) => void;\n\n  private apiKey: string | undefined;\n  private chain: Chain;\n\n  /**\n   * Create an instance of the OpenSeaAPI\n   * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, Chain name, and base URL\n   * @param logger Optional function for logging debug strings before and after requests are made. Defaults to no logging\n   */\n  constructor(config: OpenSeaAPIConfig, logger?: (arg: string) => void) {\n    this.apiKey = config.apiKey;\n    this.chain = config.chain ?? Chain.Mainnet;\n\n    this.apiBaseUrl = isTestChain(this.chain)\n      ? API_BASE_TESTNET\n      : API_BASE_MAINNET;\n\n    // Debugging: default to nothing\n    this.logger = logger ?? ((arg: string) => arg);\n  }\n\n  /**\n   * Gets an order from API based on query options.\n   * @param options\n   * @param options.side The side of the order (buy or sell\n   * @param options.protocol The protocol, typically seaport, to query orders for\n   * @param options.orderDirection The direction to sort the orders\n   * @param options.orderBy The field to sort the orders by\n   * @param options.limit The number of orders to retrieve\n   * @param options.maker Filter by the wallet address of the order maker\n   * @param options.taker Filter by  wallet address of the order taker\n   * @param options.asset_contract_address Address of the NFT's contract\n   * @param options.token_ids String array of token IDs to filter by.\n   * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds\n   * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds\n   * @returns The first {@link OrderV2} returned by the API\n   *\n   * @throws An error if there are no matching orders.\n   */\n  public async getOrder({\n    side,\n    protocol = \"seaport\",\n    orderDirection = \"desc\",\n    orderBy = \"created_date\",\n    ...restOptions\n  }: Omit<OrdersQueryOptions, \"limit\">): Promise<OrderV2> {\n    const { orders } = await this.get<OrdersQueryResponse>(\n      getOrdersAPIPath(this.chain, protocol, side),\n      serializeOrdersQueryOptions({\n        limit: 1,\n        orderBy,\n        orderDirection,\n        ...restOptions,\n      }),\n    );\n    if (orders.length === 0) {\n      throw new Error(\"Not found: no matching order found\");\n    }\n    return deserializeOrder(orders[0]);\n  }\n\n  /**\n   * Gets a list of orders from API based on query options.\n   * @param options\n   * @param options.side The side of the order (buy or sell)\n   * @param options.protocol The protocol, typically seaport, to query orders for\n   * @param options.orderDirection The direction to sort the orders\n   * @param options.orderBy The field to sort the orders by\n   * @param options.limit The number of orders to retrieve\n   * @param options.maker Filter by the wallet address of the order maker\n   * @param options.taker Filter by  wallet address of the order taker\n   * @param options.asset_contract_address Address of the NFT's contract\n   * @param options.token_ids String array of token IDs to filter by.\n   * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds\n   * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds\n   * @returns The {@link GetOrdersResponse} returned by the API.\n   */\n  public async getOrders({\n    side,\n    protocol = \"seaport\",\n    orderDirection = \"desc\",\n    orderBy = \"created_date\",\n    ...restOptions\n  }: Omit<OrdersQueryOptions, \"limit\">): Promise<GetOrdersResponse> {\n    const response = await this.get<OrdersQueryResponse>(\n      getOrdersAPIPath(this.chain, protocol, side),\n      serializeOrdersQueryOptions({\n        limit: this.pageSize,\n        orderBy,\n        orderDirection,\n        ...restOptions,\n      }),\n    );\n    return {\n      ...response,\n      orders: response.orders.map(deserializeOrder),\n    };\n  }\n\n  /**\n   * Gets all offers for a given collection.\n   * @param collectionSlug The slug of the collection.\n   * @param limit The number of offers to return. Must be between 1 and 100. Default: 100\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetOffersResponse} returned by the API.\n   */\n  public async getAllOffers(\n    collectionSlug: string,\n    limit?: number,\n    next?: string,\n  ): Promise<GetOffersResponse> {\n    const response = await this.get<GetOffersResponse>(\n      getAllOffersAPIPath(collectionSlug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Gets all listings for a given collection.\n   * @param collectionSlug The slug of the collection.\n   * @param limit The number of listings to return. Must be between 1 and 100. Default: 100\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetListingsResponse} returned by the API.\n   */\n  public async getAllListings(\n    collectionSlug: string,\n    limit?: number,\n    next?: string,\n  ): Promise<GetListingsResponse> {\n    const response = await this.get<GetListingsResponse>(\n      getAllListingsAPIPath(collectionSlug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Gets the best offer for a given token.\n   * @param collectionSlug The slug of the collection.\n   * @param tokenId The token identifier.\n   * @returns The {@link GetBestOfferResponse} returned by the API.\n   */\n  public async getBestOffer(\n    collectionSlug: string,\n    tokenId: string | number,\n  ): Promise<GetBestOfferResponse> {\n    const response = await this.get<GetBestOfferResponse>(\n      getBestOfferAPIPath(collectionSlug, tokenId),\n    );\n    return response;\n  }\n\n  /**\n   * Gets the best listing for a given token.\n   * @param collectionSlug The slug of the collection.\n   * @param tokenId The token identifier.\n   * @returns The {@link GetBestListingResponse} returned by the API.\n   */\n  public async getBestListing(\n    collectionSlug: string,\n    tokenId: string | number,\n  ): Promise<GetBestListingResponse> {\n    const response = await this.get<GetBestListingResponse>(\n      getBestListingAPIPath(collectionSlug, tokenId),\n    );\n    return response;\n  }\n\n  /**\n   * Gets the best listings for a given collection.\n   * @param collectionSlug The slug of the collection.\n   * @param limit The number of listings to return. Must be between 1 and 100. Default: 100\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetListingsResponse} returned by the API.\n   */\n  public async getBestListings(\n    collectionSlug: string,\n    limit?: number,\n    next?: string,\n  ): Promise<GetListingsResponse> {\n    const response = await this.get<GetListingsResponse>(\n      getBestListingsAPIPath(collectionSlug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Generate the data needed to fulfill a listing or an offer onchain.\n   * @param fulfillerAddress The wallet address which will be used to fulfill the order\n   * @param orderHash The hash of the order to fulfill\n   * @param protocolAddress The address of the seaport contract\n   * @side The side of the order (buy or sell)\n   * @returns The {@link FulfillmentDataResponse}\n   */\n  public async generateFulfillmentData(\n    fulfillerAddress: string,\n    orderHash: string,\n    protocolAddress: string,\n    side: OrderSide,\n  ): Promise<FulfillmentDataResponse> {\n    let payload: object | null = null;\n    if (side === OrderSide.ASK) {\n      payload = getFulfillListingPayload(\n        fulfillerAddress,\n        orderHash,\n        protocolAddress,\n        this.chain,\n      );\n    } else {\n      payload = getFulfillOfferPayload(\n        fulfillerAddress,\n        orderHash,\n        protocolAddress,\n        this.chain,\n      );\n    }\n    const response = await this.post<FulfillmentDataResponse>(\n      getFulfillmentDataPath(side),\n      payload,\n    );\n    return response;\n  }\n\n  /**\n   * Post an order to OpenSea.\n   * @param order The order to post\n   * @param apiOptions\n   * @param apiOptions.protocol The protocol, typically seaport, to post the order to.\n   * @param apiOptions.side The side of the order (buy or sell).\n   * @param apiOptions.protocolAddress The address of the seaport contract.\n   * @param options\n   * @returns The {@link OrderV2} posted to the API.\n   */\n  public async postOrder(\n    order: ProtocolData,\n    apiOptions: OrderAPIOptions,\n  ): Promise<OrderV2> {\n    // TODO: Validate apiOptions. Avoid API calls that will definitely fail\n    const { protocol = \"seaport\", side, protocolAddress } = apiOptions;\n    const response = await this.post<OrdersPostQueryResponse>(\n      getOrdersAPIPath(this.chain, protocol, side),\n      { ...order, protocol_address: protocolAddress },\n    );\n    return deserializeOrder(response.order);\n  }\n\n  /**\n   * Build a OpenSea collection offer.\n   * @param offererAddress The wallet address which is creating the offer.\n   * @param quantity The number of NFTs requested in the offer.\n   * @param collectionSlug The slug (identifier) of the collection to build the offer for.\n   * @param offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.\n   * @returns The {@link BuildOfferResponse} returned by the API.\n   */\n  public async buildOffer(\n    offererAddress: string,\n    quantity: number,\n    collectionSlug: string,\n    offerProtectionEnabled = true,\n  ): Promise<BuildOfferResponse> {\n    const payload = getBuildCollectionOfferPayload(\n      offererAddress,\n      quantity,\n      collectionSlug,\n      offerProtectionEnabled,\n    );\n    const response = await this.post<BuildOfferResponse>(\n      getBuildOfferPath(),\n      payload,\n    );\n    return response;\n  }\n\n  /**\n   * Get a list collection offers for a given slug.\n   * @param slug The slug (identifier) of the collection to list offers for\n   * @returns The {@link ListCollectionOffersResponse} returned by the API.\n   */\n  public async getCollectionOffers(\n    slug: string,\n  ): Promise<ListCollectionOffersResponse | null> {\n    return await this.get<ListCollectionOffersResponse>(\n      getCollectionOffersPath(slug),\n    );\n  }\n\n  /**\n   * Post a collection offer to OpenSea.\n   * @param order The collection offer to post.\n   * @param slug The slug (identifier) of the collection to post the offer for.\n   * @returns The {@link Offer} returned to the API.\n   */\n  public async postCollectionOffer(\n    order: ProtocolData,\n    slug: string,\n  ): Promise<CollectionOffer | null> {\n    const payload = getPostCollectionOfferPayload(slug, order);\n    return await this.post<CollectionOffer>(\n      getPostCollectionOfferPath(),\n      payload,\n    );\n  }\n\n  /**\n   * Fetch multiple NFTs for a collection.\n   * @param slug The slug (identifier) of the collection\n   * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n   * @param next Cursor to retrieve the next page of NFTs\n   * @returns The {@link ListNFTsResponse} returned by the API.\n   */\n  public async getNFTsByCollection(\n    slug: string,\n    limit: number | undefined = undefined,\n    next: string | undefined = undefined,\n  ): Promise<ListNFTsResponse> {\n    const response = await this.get<ListNFTsResponse>(\n      getListNFTsByCollectionPath(slug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Fetch multiple NFTs for a contract.\n   * @param address The NFT's contract address.\n   * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n   * @param next Cursor to retrieve the next page of NFTs.\n   * @param chain The NFT's chain.\n   * @returns The {@link ListNFTsResponse} returned by the API.\n   */\n  public async getNFTsByContract(\n    address: string,\n    limit: number | undefined = undefined,\n    next: string | undefined = undefined,\n    chain: Chain = this.chain,\n  ): Promise<ListNFTsResponse> {\n    const response = await this.get<ListNFTsResponse>(\n      getListNFTsByContractPath(chain, address),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Fetch NFTs owned by an account.\n   * @param address The address of the account\n   * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n   * @param next Cursor to retrieve the next page of NFTs\n   * @param chain The chain to query. Defaults to the chain set in the constructor.\n   * @returns The {@link ListNFTsResponse} returned by the API.\n   */\n  public async getNFTsByAccount(\n    address: string,\n    limit: number | undefined = undefined,\n    next: string | undefined = undefined,\n    chain = this.chain,\n  ): Promise<ListNFTsResponse> {\n    const response = await this.get<ListNFTsResponse>(\n      getListNFTsByAccountPath(chain, address),\n      {\n        limit,\n        next,\n      },\n    );\n\n    return response;\n  }\n\n  /**\n   * Fetch metadata, traits, ownership information, and rarity for a single NFT.\n   * @param address The NFT's contract address.\n   * @param identifier the identifier of the NFT (i.e. Token ID)\n   * @param chain The NFT's chain.\n   * @returns The {@link GetNFTResponse} returned by the API.\n   */\n  public async getNFT(\n    address: string,\n    identifier: string,\n    chain = this.chain,\n  ): Promise<GetNFTResponse> {\n    const response = await this.get<GetNFTResponse>(\n      getNFTPath(chain, address, identifier),\n    );\n    return response;\n  }\n\n  /**\n   * Fetch an OpenSea collection.\n   * @param slug The slug (identifier) of the collection.\n   * @returns The {@link OpenSeaCollection} returned by the API.\n   */\n  public async getCollection(slug: string): Promise<OpenSeaCollection> {\n    const path = getCollectionPath(slug);\n    const response = await this.get<GetCollectionResponse>(path);\n    return collectionFromJSON(response);\n  }\n\n  /**\n   * Fetch stats for an OpenSea collection.\n   * @param slug The slug (identifier) of the collection.\n   * @returns The {@link OpenSeaCollection} returned by the API.\n   */\n  public async getCollectionStats(\n    slug: string,\n  ): Promise<OpenSeaCollectionStats> {\n    const path = getCollectionStatsPath(slug);\n    const response = await this.get<OpenSeaCollectionStats>(path);\n    return response as OpenSeaCollectionStats;\n  }\n\n  /**\n   * Fetch a payment token.\n   * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link OpenSeaPaymentToken} returned by the API.\n   */\n  public async getPaymentToken(\n    address: string,\n    chain = this.chain,\n  ): Promise<OpenSeaPaymentToken> {\n    const json = await this.get<OpenSeaPaymentToken>(\n      getPaymentTokenPath(chain, address),\n    );\n    return paymentTokenFromJSON(json);\n  }\n\n  /**\n   * Fetch account for an address.\n   * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetAccountResponse} returned by the API.\n   */\n  public async getAccount(address: string): Promise<OpenSeaAccount> {\n    const json = await this.get<OpenSeaAccount>(getAccountPath(address));\n    return accountFromJSON(json);\n  }\n\n  /**\n   * Force refresh the metadata for an NFT.\n   * @param address The address of the NFT's contract.\n   * @param identifier The identifier of the NFT.\n   * @param chain The chain where the NFT is located.\n   * @returns The response from the API.\n   */\n  public async refreshNFTMetadata(\n    address: string,\n    identifier: string,\n    chain: Chain = this.chain,\n  ): Promise<Response> {\n    const response = await this.post<Response>(\n      getRefreshMetadataPath(chain, address, identifier),\n      {},\n    );\n\n    return response;\n  }\n\n  /**\n   * Generic fetch method for any API endpoint\n   * @param apiPath Path to URL endpoint under API\n   * @param query URL query params. Will be used to create a URLSearchParams object.\n   * @returns @typeParam T The response from the API.\n   */\n  public async get<T>(apiPath: string, query: object = {}): Promise<T> {\n    const qs = this.objectToSearchParams(query);\n    const url = `${this.apiBaseUrl}${apiPath}?${qs}`;\n    return await this._fetch(url);\n  }\n\n  /**\n   * Generic post method for any API endpoint.\n   * @param apiPath Path to URL endpoint under API\n   * @param body Data to send.\n   * @param opts ethers ConnectionInfo, similar to Fetch API.\n   * @returns @typeParam T The response from the API.\n   */\n  public async post<T>(\n    apiPath: string,\n    body?: object,\n    opts?: object,\n  ): Promise<T> {\n    const url = `${this.apiBaseUrl}${apiPath}`;\n    return await this._fetch(url, opts, body);\n  }\n\n  private objectToSearchParams(params: object = {}) {\n    const urlSearchParams = new URLSearchParams();\n\n    Object.entries(params).forEach(([key, value]) => {\n      if (value && Array.isArray(value)) {\n        value.forEach((item) => item && urlSearchParams.append(key, item));\n      } else if (value) {\n        urlSearchParams.append(key, value);\n      }\n    });\n\n    return urlSearchParams.toString();\n  }\n\n  /**\n   * Get from an API Endpoint, sending auth token in headers\n   * @param opts ethers ConnectionInfo, similar to Fetch API\n   * @param body Optional body to send. If set, will POST, otherwise GET\n   */\n  private async _fetch(url: string, headers?: object, body?: object) {\n    headers = {\n      \"x-app-id\": \"opensea-js\",\n      ...(this.apiKey ? { \"X-API-KEY\": this.apiKey } : {}),\n      ...headers,\n    };\n\n    const req = new ethers.FetchRequest(url);\n    for (const [key, value] of Object.entries(headers)) {\n      req.setHeader(key, value);\n    }\n    if (body) {\n      req.body = body;\n    }\n\n    this.logger(\n      `Sending request: ${url} ${JSON.stringify({\n        request: req,\n        headers: req.headers,\n      })}`,\n    );\n\n    const response = await req.send();\n    if (!response.ok()) {\n      // If an errors array is returned, throw with the error messages.\n      const errors = response.bodyJson?.errors;\n      if (errors?.length > 0) {\n        throw new Error(`Server Error: ${errors.join(\", \")}`);\n      } else {\n        // Otherwise, let ethers throw a SERVER_ERROR since it will include\n        // more context about the request and response.\n        response.assertOk();\n      }\n    }\n    return response.bodyJson;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"59085952546a5d31e9d94ec97a009a193c7b4aae"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1r76ud9kcq=function(){return actualCoverage;};}return actualCoverage;}cov_1r76ud9kcq();cov_1r76ud9kcq().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1r76ud9kcq().s[1]++;exports.OpenSeaAPI=void 0;const ethers_1=(cov_1r76ud9kcq().s[2]++,require("ethers"));const apiPaths_1=(cov_1r76ud9kcq().s[3]++,require("./apiPaths"));const constants_1=(cov_1r76ud9kcq().s[4]++,require("../constants"));const utils_1=(cov_1r76ud9kcq().s[5]++,require("../orders/utils"));const types_1=(cov_1r76ud9kcq().s[6]++,require("../types"));const utils_2=(cov_1r76ud9kcq().s[7]++,require("../utils/utils"));/**
 * The API class for the OpenSea SDK.
 * @category Main Classes
 */class OpenSeaAPI{/**
     * Create an instance of the OpenSeaAPI
     * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, Chain name, and base URL
     * @param logger Optional function for logging debug strings before and after requests are made. Defaults to no logging
     */constructor(config,logger){cov_1r76ud9kcq().f[0]++;cov_1r76ud9kcq().s[8]++;/**
         * Default size to use for fetching orders
         */this.pageSize=20;cov_1r76ud9kcq().s[9]++;this.apiKey=config.apiKey;cov_1r76ud9kcq().s[10]++;this.chain=(cov_1r76ud9kcq().b[0][0]++,config.chain)??(cov_1r76ud9kcq().b[0][1]++,types_1.Chain.Mainnet);cov_1r76ud9kcq().s[11]++;this.apiBaseUrl=(0,utils_2.isTestChain)(this.chain)?(cov_1r76ud9kcq().b[1][0]++,constants_1.API_BASE_TESTNET):(cov_1r76ud9kcq().b[1][1]++,constants_1.API_BASE_MAINNET);// Debugging: default to nothing
cov_1r76ud9kcq().s[12]++;this.logger=(cov_1r76ud9kcq().b[2][0]++,logger)??(cov_1r76ud9kcq().b[2][1]++,arg=>{cov_1r76ud9kcq().f[1]++;cov_1r76ud9kcq().s[13]++;return arg;});}/**
     * Gets an order from API based on query options.
     * @param options
     * @param options.side The side of the order (buy or sell
     * @param options.protocol The protocol, typically seaport, to query orders for
     * @param options.orderDirection The direction to sort the orders
     * @param options.orderBy The field to sort the orders by
     * @param options.limit The number of orders to retrieve
     * @param options.maker Filter by the wallet address of the order maker
     * @param options.taker Filter by  wallet address of the order taker
     * @param options.asset_contract_address Address of the NFT's contract
     * @param options.token_ids String array of token IDs to filter by.
     * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds
     * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds
     * @returns The first {@link OrderV2} returned by the API
     *
     * @throws An error if there are no matching orders.
     */async getOrder({side,protocol=(cov_1r76ud9kcq().b[3][0]++,"seaport"),orderDirection=(cov_1r76ud9kcq().b[4][0]++,"desc"),orderBy=(cov_1r76ud9kcq().b[5][0]++,"created_date"),...restOptions}){cov_1r76ud9kcq().f[2]++;const{orders}=(cov_1r76ud9kcq().s[14]++,await this.get((0,apiPaths_1.getOrdersAPIPath)(this.chain,protocol,side),(0,utils_1.serializeOrdersQueryOptions)({limit:1,orderBy,orderDirection,...restOptions})));cov_1r76ud9kcq().s[15]++;if(orders.length===0){cov_1r76ud9kcq().b[6][0]++;cov_1r76ud9kcq().s[16]++;throw new Error("Not found: no matching order found");}else{cov_1r76ud9kcq().b[6][1]++;}cov_1r76ud9kcq().s[17]++;return(0,utils_1.deserializeOrder)(orders[0]);}/**
     * Gets a list of orders from API based on query options.
     * @param options
     * @param options.side The side of the order (buy or sell)
     * @param options.protocol The protocol, typically seaport, to query orders for
     * @param options.orderDirection The direction to sort the orders
     * @param options.orderBy The field to sort the orders by
     * @param options.limit The number of orders to retrieve
     * @param options.maker Filter by the wallet address of the order maker
     * @param options.taker Filter by  wallet address of the order taker
     * @param options.asset_contract_address Address of the NFT's contract
     * @param options.token_ids String array of token IDs to filter by.
     * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds
     * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds
     * @returns The {@link GetOrdersResponse} returned by the API.
     */async getOrders({side,protocol=(cov_1r76ud9kcq().b[7][0]++,"seaport"),orderDirection=(cov_1r76ud9kcq().b[8][0]++,"desc"),orderBy=(cov_1r76ud9kcq().b[9][0]++,"created_date"),...restOptions}){cov_1r76ud9kcq().f[3]++;const response=(cov_1r76ud9kcq().s[18]++,await this.get((0,apiPaths_1.getOrdersAPIPath)(this.chain,protocol,side),(0,utils_1.serializeOrdersQueryOptions)({limit:this.pageSize,orderBy,orderDirection,...restOptions})));cov_1r76ud9kcq().s[19]++;return{...response,orders:response.orders.map(utils_1.deserializeOrder)};}/**
     * Gets all offers for a given collection.
     * @param collectionSlug The slug of the collection.
     * @param limit The number of offers to return. Must be between 1 and 100. Default: 100
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetOffersResponse} returned by the API.
     */async getAllOffers(collectionSlug,limit,next){cov_1r76ud9kcq().f[4]++;const response=(cov_1r76ud9kcq().s[20]++,await this.get((0,apiPaths_1.getAllOffersAPIPath)(collectionSlug),{limit,next}));cov_1r76ud9kcq().s[21]++;return response;}/**
     * Gets all listings for a given collection.
     * @param collectionSlug The slug of the collection.
     * @param limit The number of listings to return. Must be between 1 and 100. Default: 100
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetListingsResponse} returned by the API.
     */async getAllListings(collectionSlug,limit,next){cov_1r76ud9kcq().f[5]++;const response=(cov_1r76ud9kcq().s[22]++,await this.get((0,apiPaths_1.getAllListingsAPIPath)(collectionSlug),{limit,next}));cov_1r76ud9kcq().s[23]++;return response;}/**
     * Gets the best offer for a given token.
     * @param collectionSlug The slug of the collection.
     * @param tokenId The token identifier.
     * @returns The {@link GetBestOfferResponse} returned by the API.
     */async getBestOffer(collectionSlug,tokenId){cov_1r76ud9kcq().f[6]++;const response=(cov_1r76ud9kcq().s[24]++,await this.get((0,apiPaths_1.getBestOfferAPIPath)(collectionSlug,tokenId)));cov_1r76ud9kcq().s[25]++;return response;}/**
     * Gets the best listing for a given token.
     * @param collectionSlug The slug of the collection.
     * @param tokenId The token identifier.
     * @returns The {@link GetBestListingResponse} returned by the API.
     */async getBestListing(collectionSlug,tokenId){cov_1r76ud9kcq().f[7]++;const response=(cov_1r76ud9kcq().s[26]++,await this.get((0,apiPaths_1.getBestListingAPIPath)(collectionSlug,tokenId)));cov_1r76ud9kcq().s[27]++;return response;}/**
     * Gets the best listings for a given collection.
     * @param collectionSlug The slug of the collection.
     * @param limit The number of listings to return. Must be between 1 and 100. Default: 100
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetListingsResponse} returned by the API.
     */async getBestListings(collectionSlug,limit,next){cov_1r76ud9kcq().f[8]++;const response=(cov_1r76ud9kcq().s[28]++,await this.get((0,apiPaths_1.getBestListingsAPIPath)(collectionSlug),{limit,next}));cov_1r76ud9kcq().s[29]++;return response;}/**
     * Generate the data needed to fulfill a listing or an offer onchain.
     * @param fulfillerAddress The wallet address which will be used to fulfill the order
     * @param orderHash The hash of the order to fulfill
     * @param protocolAddress The address of the seaport contract
     * @side The side of the order (buy or sell)
     * @returns The {@link FulfillmentDataResponse}
     */async generateFulfillmentData(fulfillerAddress,orderHash,protocolAddress,side){cov_1r76ud9kcq().f[9]++;let payload=(cov_1r76ud9kcq().s[30]++,null);cov_1r76ud9kcq().s[31]++;if(side===types_1.OrderSide.ASK){cov_1r76ud9kcq().b[10][0]++;cov_1r76ud9kcq().s[32]++;payload=(0,utils_1.getFulfillListingPayload)(fulfillerAddress,orderHash,protocolAddress,this.chain);}else{cov_1r76ud9kcq().b[10][1]++;cov_1r76ud9kcq().s[33]++;payload=(0,utils_1.getFulfillOfferPayload)(fulfillerAddress,orderHash,protocolAddress,this.chain);}const response=(cov_1r76ud9kcq().s[34]++,await this.post((0,utils_1.getFulfillmentDataPath)(side),payload));cov_1r76ud9kcq().s[35]++;return response;}/**
     * Post an order to OpenSea.
     * @param order The order to post
     * @param apiOptions
     * @param apiOptions.protocol The protocol, typically seaport, to post the order to.
     * @param apiOptions.side The side of the order (buy or sell).
     * @param apiOptions.protocolAddress The address of the seaport contract.
     * @param options
     * @returns The {@link OrderV2} posted to the API.
     */async postOrder(order,apiOptions){cov_1r76ud9kcq().f[10]++;// TODO: Validate apiOptions. Avoid API calls that will definitely fail
const{protocol=(cov_1r76ud9kcq().b[11][0]++,"seaport"),side,protocolAddress}=(cov_1r76ud9kcq().s[36]++,apiOptions);const response=(cov_1r76ud9kcq().s[37]++,await this.post((0,apiPaths_1.getOrdersAPIPath)(this.chain,protocol,side),{...order,protocol_address:protocolAddress}));cov_1r76ud9kcq().s[38]++;return(0,utils_1.deserializeOrder)(response.order);}/**
     * Build a OpenSea collection offer.
     * @param offererAddress The wallet address which is creating the offer.
     * @param quantity The number of NFTs requested in the offer.
     * @param collectionSlug The slug (identifier) of the collection to build the offer for.
     * @param offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.
     * @returns The {@link BuildOfferResponse} returned by the API.
     */async buildOffer(offererAddress,quantity,collectionSlug,offerProtectionEnabled=(cov_1r76ud9kcq().b[12][0]++,true)){cov_1r76ud9kcq().f[11]++;const payload=(cov_1r76ud9kcq().s[39]++,(0,utils_1.getBuildCollectionOfferPayload)(offererAddress,quantity,collectionSlug,offerProtectionEnabled));const response=(cov_1r76ud9kcq().s[40]++,await this.post((0,apiPaths_1.getBuildOfferPath)(),payload));cov_1r76ud9kcq().s[41]++;return response;}/**
     * Get a list collection offers for a given slug.
     * @param slug The slug (identifier) of the collection to list offers for
     * @returns The {@link ListCollectionOffersResponse} returned by the API.
     */async getCollectionOffers(slug){cov_1r76ud9kcq().f[12]++;cov_1r76ud9kcq().s[42]++;return await this.get((0,apiPaths_1.getCollectionOffersPath)(slug));}/**
     * Post a collection offer to OpenSea.
     * @param order The collection offer to post.
     * @param slug The slug (identifier) of the collection to post the offer for.
     * @returns The {@link Offer} returned to the API.
     */async postCollectionOffer(order,slug){cov_1r76ud9kcq().f[13]++;const payload=(cov_1r76ud9kcq().s[43]++,(0,utils_1.getPostCollectionOfferPayload)(slug,order));cov_1r76ud9kcq().s[44]++;return await this.post((0,apiPaths_1.getPostCollectionOfferPath)(),payload);}/**
     * Fetch multiple NFTs for a collection.
     * @param slug The slug (identifier) of the collection
     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.
     * @param next Cursor to retrieve the next page of NFTs
     * @returns The {@link ListNFTsResponse} returned by the API.
     */async getNFTsByCollection(slug,limit=(cov_1r76ud9kcq().b[13][0]++,undefined),next=(cov_1r76ud9kcq().b[14][0]++,undefined)){cov_1r76ud9kcq().f[14]++;const response=(cov_1r76ud9kcq().s[45]++,await this.get((0,apiPaths_1.getListNFTsByCollectionPath)(slug),{limit,next}));cov_1r76ud9kcq().s[46]++;return response;}/**
     * Fetch multiple NFTs for a contract.
     * @param address The NFT's contract address.
     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.
     * @param next Cursor to retrieve the next page of NFTs.
     * @param chain The NFT's chain.
     * @returns The {@link ListNFTsResponse} returned by the API.
     */async getNFTsByContract(address,limit=(cov_1r76ud9kcq().b[15][0]++,undefined),next=(cov_1r76ud9kcq().b[16][0]++,undefined),chain=(cov_1r76ud9kcq().b[17][0]++,this.chain)){cov_1r76ud9kcq().f[15]++;const response=(cov_1r76ud9kcq().s[47]++,await this.get((0,apiPaths_1.getListNFTsByContractPath)(chain,address),{limit,next}));cov_1r76ud9kcq().s[48]++;return response;}/**
     * Fetch NFTs owned by an account.
     * @param address The address of the account
     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.
     * @param next Cursor to retrieve the next page of NFTs
     * @param chain The chain to query. Defaults to the chain set in the constructor.
     * @returns The {@link ListNFTsResponse} returned by the API.
     */async getNFTsByAccount(address,limit=(cov_1r76ud9kcq().b[18][0]++,undefined),next=(cov_1r76ud9kcq().b[19][0]++,undefined),chain=(cov_1r76ud9kcq().b[20][0]++,this.chain)){cov_1r76ud9kcq().f[16]++;const response=(cov_1r76ud9kcq().s[49]++,await this.get((0,apiPaths_1.getListNFTsByAccountPath)(chain,address),{limit,next}));cov_1r76ud9kcq().s[50]++;return response;}/**
     * Fetch metadata, traits, ownership information, and rarity for a single NFT.
     * @param address The NFT's contract address.
     * @param identifier the identifier of the NFT (i.e. Token ID)
     * @param chain The NFT's chain.
     * @returns The {@link GetNFTResponse} returned by the API.
     */async getNFT(address,identifier,chain=(cov_1r76ud9kcq().b[21][0]++,this.chain)){cov_1r76ud9kcq().f[17]++;const response=(cov_1r76ud9kcq().s[51]++,await this.get((0,apiPaths_1.getNFTPath)(chain,address,identifier)));cov_1r76ud9kcq().s[52]++;return response;}/**
     * Fetch an OpenSea collection.
     * @param slug The slug (identifier) of the collection.
     * @returns The {@link OpenSeaCollection} returned by the API.
     */async getCollection(slug){cov_1r76ud9kcq().f[18]++;const path=(cov_1r76ud9kcq().s[53]++,(0,apiPaths_1.getCollectionPath)(slug));const response=(cov_1r76ud9kcq().s[54]++,await this.get(path));cov_1r76ud9kcq().s[55]++;return(0,utils_2.collectionFromJSON)(response);}/**
     * Fetch stats for an OpenSea collection.
     * @param slug The slug (identifier) of the collection.
     * @returns The {@link OpenSeaCollection} returned by the API.
     */async getCollectionStats(slug){cov_1r76ud9kcq().f[19]++;const path=(cov_1r76ud9kcq().s[56]++,(0,apiPaths_1.getCollectionStatsPath)(slug));const response=(cov_1r76ud9kcq().s[57]++,await this.get(path));cov_1r76ud9kcq().s[58]++;return response;}/**
     * Fetch a payment token.
     * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link OpenSeaPaymentToken} returned by the API.
     */async getPaymentToken(address,chain=(cov_1r76ud9kcq().b[22][0]++,this.chain)){cov_1r76ud9kcq().f[20]++;const json=(cov_1r76ud9kcq().s[59]++,await this.get((0,apiPaths_1.getPaymentTokenPath)(chain,address)));cov_1r76ud9kcq().s[60]++;return(0,utils_2.paymentTokenFromJSON)(json);}/**
     * Fetch account for an address.
     * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetAccountResponse} returned by the API.
     */async getAccount(address){cov_1r76ud9kcq().f[21]++;const json=(cov_1r76ud9kcq().s[61]++,await this.get((0,apiPaths_1.getAccountPath)(address)));cov_1r76ud9kcq().s[62]++;return(0,utils_2.accountFromJSON)(json);}/**
     * Force refresh the metadata for an NFT.
     * @param address The address of the NFT's contract.
     * @param identifier The identifier of the NFT.
     * @param chain The chain where the NFT is located.
     * @returns The response from the API.
     */async refreshNFTMetadata(address,identifier,chain=(cov_1r76ud9kcq().b[23][0]++,this.chain)){cov_1r76ud9kcq().f[22]++;const response=(cov_1r76ud9kcq().s[63]++,await this.post((0,apiPaths_1.getRefreshMetadataPath)(chain,address,identifier),{}));cov_1r76ud9kcq().s[64]++;return response;}/**
     * Generic fetch method for any API endpoint
     * @param apiPath Path to URL endpoint under API
     * @param query URL query params. Will be used to create a URLSearchParams object.
     * @returns @typeParam T The response from the API.
     */async get(apiPath,query=(cov_1r76ud9kcq().b[24][0]++,{})){cov_1r76ud9kcq().f[23]++;const qs=(cov_1r76ud9kcq().s[65]++,this.objectToSearchParams(query));const url=(cov_1r76ud9kcq().s[66]++,`${this.apiBaseUrl}${apiPath}?${qs}`);cov_1r76ud9kcq().s[67]++;return await this._fetch(url);}/**
     * Generic post method for any API endpoint.
     * @param apiPath Path to URL endpoint under API
     * @param body Data to send.
     * @param opts ethers ConnectionInfo, similar to Fetch API.
     * @returns @typeParam T The response from the API.
     */async post(apiPath,body,opts){cov_1r76ud9kcq().f[24]++;const url=(cov_1r76ud9kcq().s[68]++,`${this.apiBaseUrl}${apiPath}`);cov_1r76ud9kcq().s[69]++;return await this._fetch(url,opts,body);}objectToSearchParams(params=(cov_1r76ud9kcq().b[25][0]++,{})){cov_1r76ud9kcq().f[25]++;const urlSearchParams=(cov_1r76ud9kcq().s[70]++,new URLSearchParams());cov_1r76ud9kcq().s[71]++;Object.entries(params).forEach(([key,value])=>{cov_1r76ud9kcq().f[26]++;cov_1r76ud9kcq().s[72]++;if((cov_1r76ud9kcq().b[27][0]++,value)&&(cov_1r76ud9kcq().b[27][1]++,Array.isArray(value))){cov_1r76ud9kcq().b[26][0]++;cov_1r76ud9kcq().s[73]++;value.forEach(item=>{cov_1r76ud9kcq().f[27]++;cov_1r76ud9kcq().s[74]++;return(cov_1r76ud9kcq().b[28][0]++,item)&&(cov_1r76ud9kcq().b[28][1]++,urlSearchParams.append(key,item));});}else{cov_1r76ud9kcq().b[26][1]++;cov_1r76ud9kcq().s[75]++;if(value){cov_1r76ud9kcq().b[29][0]++;cov_1r76ud9kcq().s[76]++;urlSearchParams.append(key,value);}else{cov_1r76ud9kcq().b[29][1]++;}}});cov_1r76ud9kcq().s[77]++;return urlSearchParams.toString();}/**
     * Get from an API Endpoint, sending auth token in headers
     * @param opts ethers ConnectionInfo, similar to Fetch API
     * @param body Optional body to send. If set, will POST, otherwise GET
     */async _fetch(url,headers,body){cov_1r76ud9kcq().f[28]++;cov_1r76ud9kcq().s[78]++;headers={"x-app-id":"opensea-js",...(this.apiKey?(cov_1r76ud9kcq().b[30][0]++,{"X-API-KEY":this.apiKey}):(cov_1r76ud9kcq().b[30][1]++,{})),...headers};const req=(cov_1r76ud9kcq().s[79]++,new ethers_1.ethers.FetchRequest(url));cov_1r76ud9kcq().s[80]++;for(const[key,value]of Object.entries(headers)){cov_1r76ud9kcq().s[81]++;req.setHeader(key,value);}cov_1r76ud9kcq().s[82]++;if(body){cov_1r76ud9kcq().b[31][0]++;cov_1r76ud9kcq().s[83]++;req.body=body;}else{cov_1r76ud9kcq().b[31][1]++;}cov_1r76ud9kcq().s[84]++;this.logger(`Sending request: ${url} ${JSON.stringify({request:req,headers:req.headers})}`);const response=(cov_1r76ud9kcq().s[85]++,await req.send());cov_1r76ud9kcq().s[86]++;if(!response.ok()){cov_1r76ud9kcq().b[32][0]++;// If an errors array is returned, throw with the error messages.
const errors=(cov_1r76ud9kcq().s[87]++,response.bodyJson?.errors);cov_1r76ud9kcq().s[88]++;if(errors?.length>0){cov_1r76ud9kcq().b[33][0]++;cov_1r76ud9kcq().s[89]++;throw new Error(`Server Error: ${errors.join(", ")}`);}else{cov_1r76ud9kcq().b[33][1]++;cov_1r76ud9kcq().s[90]++;// Otherwise, let ethers throw a SERVER_ERROR since it will include
// more context about the request and response.
response.assertOk();}}else{cov_1r76ud9kcq().b[32][1]++;}cov_1r76ud9kcq().s[91]++;return response.bodyJson;}}cov_1r76ud9kcq().s[92]++;exports.OpenSeaAPI=OpenSeaAPI;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,