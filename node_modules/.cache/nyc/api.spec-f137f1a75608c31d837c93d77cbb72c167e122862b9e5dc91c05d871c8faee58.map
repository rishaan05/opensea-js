{"version":3,"file":"/Users/rg/dev/opensea-js/test/api/api.spec.ts","sources":["/Users/rg/dev/opensea-js/test/api/api.spec.ts"],"names":[],"mappings":";;AAAA,+BAA8B;AAC9B,iCAAoC;AACpC,mCAAkC;AAClC,2CAAiD;AACjD,kDAI4B;AAE5B,IAAA,aAAK,EAAC,KAAK,EAAE,GAAG,EAAE;IAChB,IAAA,YAAI,EAAC,0BAA0B,EAAE,GAAG,EAAE;QACpC,aAAM,CAAC,KAAK,CAAC,mBAAO,CAAC,UAAU,EAAE,wBAAwB,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,IAAA,YAAI,EAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,SAAS,GAAG,mBAAO,CAAC,MAAM,CAAC;QAEjC,MAAM,UAAU,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACvD,mBAAO,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,EAAE;gBACvB,IAAI,CAAC;oBACH,aAAM,CAAC,OAAO,CAAC,GAAG,EAAE,gBAAgB,2BAAe,GAAG,CAAC,CAAC;oBACxD,OAAO,EAAE,CAAC;gBACZ,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACX,MAAM,CAAC,CAAC,CAAC,CAAC;gBACZ,CAAC;wBAAS,CAAC;oBACT,mBAAO,CAAC,MAAM,GAAG,SAAS,CAAC;gBAC7B,CAAC;YACH,CAAC,CAAC;YACF,MAAM,WAAW,GAAG,IAAA,sBAAc,EAAC,WAAK,CAAC,OAAO,CAAC,CAAC;YAClD,mBAAO,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,IAAA,YAAI,EAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;QACpC,oCAAoC;QACpC,IAAI,CAAC;YACH,MAAM,mBAAO,CAAC,MAAM,CAAC,iCAAqB,EAAE,QAAQ,CAAC,CAAC;QACxD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,aAAM,CAAC,OAAO,CAAE,KAAe,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QACxD,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from \"chai\";\nimport { suite, test } from \"mocha\";\nimport { Chain } from \"../../src\";\nimport { getWETHAddress } from \"../../src/utils\";\nimport {\n  BAYC_CONTRACT_ADDRESS,\n  mainAPI,\n  OPENSEA_API_KEY,\n} from \"../utils/constants\";\n\nsuite(\"API\", () => {\n  test(\"API has correct base url\", () => {\n    assert.equal(mainAPI.apiBaseUrl, \"https://api.opensea.io\");\n  });\n\n  test(\"Includes API key in request\", async () => {\n    const oldLogger = mainAPI.logger;\n\n    const logPromise = new Promise<void>((resolve, reject) => {\n      mainAPI.logger = (log) => {\n        try {\n          assert.include(log, `\"x-api-key\":\"${OPENSEA_API_KEY}\"`);\n          resolve();\n        } catch (e) {\n          reject(e);\n        } finally {\n          mainAPI.logger = oldLogger;\n        }\n      };\n      const wethAddress = getWETHAddress(Chain.Mainnet);\n      mainAPI.getPaymentToken(wethAddress);\n    });\n\n    await logPromise;\n  });\n\n  test(\"API handles errors\", async () => {\n    // 404 Not found for random token id\n    try {\n      await mainAPI.getNFT(BAYC_CONTRACT_ADDRESS, \"404040\");\n    } catch (error) {\n      assert.include((error as Error).message, \"not found\");\n    }\n  });\n});\n"]}