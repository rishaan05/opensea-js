"use strict";function cov_1v9tp8m4ry(){var path="/Users/rg/dev/opensea-js/src/api/types.ts";var hash="ef787757e18ea39fcdba9adebbcd11b6b79a6835";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/src/api/types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:34}},"2":{start:{line:9,column:0},end:{line:17,column:75}},"3":{start:{line:10,column:4},end:{line:10,column:42}},"4":{start:{line:11,column:4},end:{line:11,column:62}},"5":{start:{line:12,column:4},end:{line:12,column:54}},"6":{start:{line:13,column:4},end:{line:13,column:42}},"7":{start:{line:14,column:4},end:{line:14,column:38}},"8":{start:{line:16,column:4},end:{line:16,column:38}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:1},end:{line:9,column:2}},loc:{start:{line:9,column:29},end:{line:17,column:1}},line:9}},branchMap:{"0":{loc:{start:{line:17,column:3},end:{line:17,column:73}},type:"binary-expr",locations:[{start:{line:17,column:3},end:{line:17,column:19}},{start:{line:17,column:24},end:{line:17,column:72}}],line:17}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0},b:{"0":[0,0]},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/src/api/types.ts",sources:["/Users/rg/dev/opensea-js/src/api/types.ts"],names:[],mappings:";;;AA8OA;;;GAGG;AACH,IAAY,gBAQX;AARD,WAAY,gBAAgB;IAC1B,qCAAiB,CAAA;IACjB,yDAAqC,CAAA;IACrC,iDAA6B,CAAA;IAC7B,qCAAiB,CAAA;IACjB,iCAAa,CAAA;IACb,uCAAuC;IACvC,iCAAa,CAAA;AACf,CAAC,EARW,gBAAgB,gCAAhB,gBAAgB,QAQ3B",sourcesContent:["import { ConsiderationItem } from \"@opensea/seaport-js/lib/types\";\nimport {\n  OrderType,\n  OrderV2,\n  ProtocolData,\n  QueryCursors,\n} from \"../orders/types\";\nimport { OpenSeaCollection } from \"../types\";\n\n/**\n * Response from OpenSea API for building an offer.\n * @category API Response Types\n */\nexport type BuildOfferResponse = {\n  /** A portion of the parameters needed to submit a criteria offer, i.e. collection offer. */\n  partialParameters: PartialParameters;\n};\n\ntype PartialParameters = {\n  consideration: ConsiderationItem[];\n  zone: string;\n  zoneHash: string;\n};\n\n/**\n * Criteria for collection or trait offers.\n * @category API Response Types\n */\ntype Criteria = {\n  /** The collection for the criteria */\n  collection: CollectionCriteria;\n  /** The contract for the criteria */\n  contract: ContractCriteria;\n  /** Represents a list of token ids which can be used to fulfill the criteria offer. */\n  encoded_token_ids?: string;\n  /** The trait for the criteria */\n  trait?: TraitCriteria;\n};\n\n/**\n * Criteria for trait offers.\n * @category API Response Types\n */\ntype TraitCriteria = {\n  type: string;\n  value: string;\n};\n\ntype CollectionCriteria = {\n  slug: string;\n};\n\ntype ContractCriteria = {\n  address: string;\n};\n\n/**\n * Response from OpenSea API for fetching a single collection.\n * @category API Response Types\n */\nexport type GetCollectionResponse = {\n  /** Collection object. See {@link OpenSeaCollection} */\n  collection: OpenSeaCollection;\n};\n\n/**\n * Base Order type shared between Listings and Offers.\n * @category API Models\n */\nexport type Order = {\n  /** Offer Identifier */\n  order_hash: string;\n  /** Chain the offer exists on */\n  chain: string;\n  /** The protocol data for the order. Only 'seaport' is currently supported. */\n  protocol_data: ProtocolData;\n  /** The contract address of the protocol. */\n  protocol_address: string;\n  /** The price of the order. */\n  price: Price;\n};\n\n/**\n * Offer type.\n * @category API Models\n */\nexport type Offer = Order & {\n  /** The criteria for the offer if it is a collection or trait offer. */\n  criteria?: Criteria;\n};\n\n/**\n * Collection Offer type.\n * @category API Models\n */\nexport type CollectionOffer = Required<Pick<Offer, \"criteria\">> & Offer;\n\n/**\n * Price response.\n * @category API Models\n */\nexport type Price = {\n  current: {\n    currency: string;\n    decimals: number;\n    value: string;\n  };\n};\n\n/**\n * Listing order type.\n * @category API Models\n */\nexport type Listing = Order & {\n  /** The order type of the listing. */\n  type: OrderType;\n};\n\n/**\n * Response from OpenSea API for fetching a list of collection offers.\n * @category API Response Types\n */\nexport type ListCollectionOffersResponse = {\n  /** List of {@link Offer} */\n  offers: CollectionOffer[];\n};\n\n/**\n * Response from OpenSea API for fetching a list of NFTs.\n * @category API Response Types\n */\nexport type ListNFTsResponse = {\n  /** List of {@link NFT} */\n  nfts: NFT[];\n  /** Cursor for next page of results. */\n  next: string;\n};\n\n/**\n * Response from OpenSea API for fetching a single NFT.\n * @category API Response Types\n */\nexport type GetNFTResponse = {\n  /** See {@link NFT} */\n  nft: NFT;\n};\n\n/**\n * Response from OpenSea API for fetching Orders.\n * @category API Response Types\n */\nexport type GetOrdersResponse = QueryCursors & {\n  /** List of {@link OrderV2} */\n  orders: OrderV2[];\n};\n\n/**\n * Base query cursors response from OpenSea API.\n * @category API Response Types\n */\nexport type QueryCursorsV2 = {\n  next?: string;\n};\n\n/**\n * Response from OpenSea API for fetching offers.\n * @category API Response Types\n */\nexport type GetOffersResponse = QueryCursorsV2 & {\n  offers: Offer[];\n};\n\n/**\n * Response from OpenSea API for fetching listings.\n * @category API Response Types\n */\nexport type GetListingsResponse = QueryCursorsV2 & {\n  listings: Listing[];\n};\n\n/**\n * Response from OpenSea API for fetching a best offer.\n * @category API Response Types\n */\nexport type GetBestOfferResponse = Offer | CollectionOffer;\n\n/**\n * Response from OpenSea API for fetching a best listing.\n * @category API Response Types\n */\nexport type GetBestListingResponse = Listing;\n\n/**\n * NFT type returned by OpenSea API.\n * @category API Models\n */\nexport type NFT = {\n  /** NFT Identifier (also commonly referred to as tokenId) */\n  identifier: string;\n  /** Slug identifier of collection */\n  collection: string;\n  /** Address of contract */\n  contract: string;\n  /** Token standard, i.e. ERC721, ERC1155, etc. */\n  token_standard: string;\n  /** Name of NFT */\n  name: string;\n  /** Description of NFT */\n  description: string;\n  /** URL of image */\n  image_url: string;\n  /** URL of metadata */\n  metadata_url: string;\n  /** Date of latest NFT update */\n  updated_at: string;\n  /** Whether NFT is disabled for trading on OpenSea */\n  is_disabled: boolean;\n  /** Whether NFT is NSFW (Not Safe For Work) */\n  is_nsfw: boolean;\n  /** Traits for the NFT, returns null if the NFT has than 50 traits */\n  traits: Trait[] | null;\n};\n\n/**\n * Trait type returned by OpenSea API.\n * @category API Models\n */\nexport type Trait = {\n  /** The name of the trait category (e.g. 'Background') */\n  trait_type: string;\n  /** A field indicating how to display. None is used for string traits. */\n  display_type: TraitDisplayType;\n  /** Ceiling for possible numeric trait values */\n  max_value: string;\n  /** The value of the trait (e.g. 'Red') */\n  value: string | number | Date;\n};\n\n/**\n * Trait display type returned by OpenSea API.\n * @category API Models\n */\nexport enum TraitDisplayType {\n  NUMBER = \"number\",\n  BOOST_PERCENTAGE = \"boost_percentage\",\n  BOOST_NUMBER = \"boost_number\",\n  AUTHOR = \"author\",\n  DATE = \"date\",\n  /** \"None\" is used for string traits */\n  NONE = \"None\",\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ef787757e18ea39fcdba9adebbcd11b6b79a6835"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1v9tp8m4ry=function(){return actualCoverage;};}return actualCoverage;}cov_1v9tp8m4ry();cov_1v9tp8m4ry().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1v9tp8m4ry().s[1]++;exports.TraitDisplayType=void 0;/**
 * Trait display type returned by OpenSea API.
 * @category API Models
 */var TraitDisplayType;cov_1v9tp8m4ry().s[2]++;(function(TraitDisplayType){cov_1v9tp8m4ry().f[0]++;cov_1v9tp8m4ry().s[3]++;TraitDisplayType["NUMBER"]="number";cov_1v9tp8m4ry().s[4]++;TraitDisplayType["BOOST_PERCENTAGE"]="boost_percentage";cov_1v9tp8m4ry().s[5]++;TraitDisplayType["BOOST_NUMBER"]="boost_number";cov_1v9tp8m4ry().s[6]++;TraitDisplayType["AUTHOR"]="author";cov_1v9tp8m4ry().s[7]++;TraitDisplayType["DATE"]="date";/** "None" is used for string traits */cov_1v9tp8m4ry().s[8]++;TraitDisplayType["NONE"]="None";})((cov_1v9tp8m4ry().b[0][0]++,TraitDisplayType)||(cov_1v9tp8m4ry().b[0][1]++,exports.TraitDisplayType=TraitDisplayType={}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,