{"version":3,"file":"/Users/rg/dev/opensea-js/src/orders/privateListings.ts","sources":["/Users/rg/dev/opensea-js/src/orders/privateListings.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ConsiderationInputItem,\n  CreateInputItem,\n  MatchOrdersFulfillment,\n  Order,\n  OrderWithCounter,\n} from \"@opensea/seaport-js/lib/types\";\nimport { isCurrencyItem } from \"@opensea/seaport-js/lib/utils/item\";\nimport { generateRandomSalt } from \"@opensea/seaport-js/lib/utils/order\";\n\nexport const getPrivateListingConsiderations = (\n  offer: CreateInputItem[],\n  privateSaleRecipient: string,\n): ConsiderationInputItem[] => {\n  return offer.map((item) => {\n    return { ...item, recipient: privateSaleRecipient };\n  });\n};\n\nexport const constructPrivateListingCounterOrder = (\n  order: OrderWithCounter,\n  privateSaleRecipient: string,\n): Order => {\n  // Counter order offers up all the items in the private listing consideration\n  // besides the items that are going to the private listing recipient\n  const paymentItems = order.parameters.consideration.filter(\n    (item) =>\n      item.recipient.toLowerCase() !== privateSaleRecipient.toLowerCase(),\n  );\n\n  if (!paymentItems.every((item) => isCurrencyItem(item))) {\n    throw new Error(\n      \"The consideration for the private listing did not contain only currency items\",\n    );\n  }\n  if (\n    !paymentItems.every((item) => item.itemType === paymentItems[0].itemType)\n  ) {\n    throw new Error(\"Not all currency items were the same for private order\");\n  }\n\n  const { aggregatedStartAmount, aggregatedEndAmount } = paymentItems.reduce(\n    ({ aggregatedStartAmount, aggregatedEndAmount }, item) => ({\n      aggregatedStartAmount: aggregatedStartAmount + BigInt(item.startAmount),\n      aggregatedEndAmount: aggregatedEndAmount + BigInt(item.endAmount),\n    }),\n    {\n      aggregatedStartAmount: 0n,\n      aggregatedEndAmount: 0n,\n    },\n  );\n\n  const counterOrder: Order = {\n    parameters: {\n      ...order.parameters,\n      offerer: privateSaleRecipient,\n      offer: [\n        {\n          itemType: paymentItems[0].itemType,\n          token: paymentItems[0].token,\n          identifierOrCriteria: paymentItems[0].identifierOrCriteria,\n          startAmount: aggregatedStartAmount.toString(),\n          endAmount: aggregatedEndAmount.toString(),\n        },\n      ],\n      // The consideration here is empty as the original private listing order supplies\n      // the taker address to receive the desired items.\n      consideration: [],\n      salt: generateRandomSalt(),\n      totalOriginalConsiderationItems: 0,\n    },\n    signature: \"0x\",\n  };\n\n  return counterOrder;\n};\n\nexport const getPrivateListingFulfillments = (\n  privateListingOrder: OrderWithCounter,\n): MatchOrdersFulfillment[] => {\n  const nftRelatedFulfillments: MatchOrdersFulfillment[] = [];\n\n  // For the original order, we need to match everything offered with every consideration item\n  // on the original order that's set to go to the private listing recipient\n  privateListingOrder.parameters.offer.forEach((offerItem, offerIndex) => {\n    const considerationIndex =\n      privateListingOrder.parameters.consideration.findIndex(\n        (considerationItem) =>\n          considerationItem.itemType === offerItem.itemType &&\n          considerationItem.token === offerItem.token &&\n          considerationItem.identifierOrCriteria ===\n            offerItem.identifierOrCriteria,\n      );\n    if (considerationIndex === -1) {\n      throw new Error(\n        \"Could not find matching offer item in the consideration for private listing\",\n      );\n    }\n    nftRelatedFulfillments.push({\n      offerComponents: [\n        {\n          orderIndex: 0,\n          itemIndex: offerIndex,\n        },\n      ],\n      considerationComponents: [\n        {\n          orderIndex: 0,\n          itemIndex: considerationIndex,\n        },\n      ],\n    });\n  });\n\n  const currencyRelatedFulfillments: MatchOrdersFulfillment[] = [];\n\n  // For the original order, we need to match everything offered with every consideration item\n  // on the original order that's set to go to the private listing recipient\n  privateListingOrder.parameters.consideration.forEach(\n    (considerationItem, considerationIndex) => {\n      if (!isCurrencyItem(considerationItem)) {\n        return;\n      }\n      // We always match the offer item (index 0) of the counter order (index 1)\n      // with all of the payment items on the private listing\n      currencyRelatedFulfillments.push({\n        offerComponents: [\n          {\n            orderIndex: 1,\n            itemIndex: 0,\n          },\n        ],\n        considerationComponents: [\n          {\n            orderIndex: 0,\n            itemIndex: considerationIndex,\n          },\n        ],\n      });\n    },\n  );\n\n  return [...nftRelatedFulfillments, ...currencyRelatedFulfillments];\n};\n"]}