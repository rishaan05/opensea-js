{"version":3,"file":"/Users/rg/dev/opensea-js/test/integration/postOrder.spec.ts","sources":["/Users/rg/dev/opensea-js/test/integration/postOrder.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { suite, test } from \"mocha\";\nimport {\n  LISTING_AMOUNT,\n  TOKEN_ADDRESS_MAINNET,\n  TOKEN_ADDRESS_POLYGON,\n  TOKEN_ID_MAINNET,\n  TOKEN_ID_POLYGON,\n  sdk,\n  sdkPolygon,\n  walletAddress,\n} from \"./setup\";\nimport { ENGLISH_AUCTION_ZONE_MAINNETS } from \"../../src/constants\";\nimport { getWETHAddress } from \"../../src/utils\";\nimport { OFFER_AMOUNT } from \"../utils/constants\";\nimport { expectValidOrder } from \"../utils/utils\";\n\nconst ONE_HOUR = Math.floor(Date.now() / 1000) + 3600;\nconst listingTime = ONE_HOUR;\n\nsuite(\"SDK: order posting\", () => {\n  test(\"Post Offer - Mainnet\", async () => {\n    const offer = {\n      accountAddress: walletAddress,\n      startAmount: +OFFER_AMOUNT,\n      asset: {\n        tokenAddress: \"0x1a92f7381b9f03921564a437210bb9396471050c\",\n        tokenId: \"2288\",\n      },\n      listingTime,\n    };\n    const order = await sdk.createOffer(offer);\n    expectValidOrder(order);\n    expect(order.listingTime).to.equal(listingTime);\n    expect(order.protocolData.parameters.endTime).to.equal(listingTime);\n  });\n\n  test(\"Post Offer - Polygon\", async () => {\n    const offer = {\n      accountAddress: walletAddress,\n      startAmount: +OFFER_AMOUNT,\n      asset: {\n        tokenAddress: \"0x1a92f7381b9f03921564a437210bb9396471050c\",\n        tokenId: \"2288\",\n      },\n      listingTime,\n    };\n    const order = await sdk.createOffer(offer);\n    expectValidOrder(order);\n  });\n\n  test(\"Post Listing - Mainnet\", async function () {\n    if (!TOKEN_ADDRESS_MAINNET || !TOKEN_ID_MAINNET) {\n      this.skip();\n    }\n    const listing = {\n      accountAddress: walletAddress,\n      startAmount: LISTING_AMOUNT,\n      asset: {\n        tokenAddress: TOKEN_ADDRESS_MAINNET as string,\n        tokenId: TOKEN_ID_MAINNET as string,\n      },\n      listingTime,\n    };\n    const order = await sdk.createListing(listing);\n    expectValidOrder(order);\n  });\n\n  test(\"Post English Auction Listing - Mainnet\", async function () {\n    if (!TOKEN_ADDRESS_MAINNET || !TOKEN_ID_MAINNET) {\n      this.skip();\n    }\n    const listing = {\n      accountAddress: walletAddress,\n      startAmount: LISTING_AMOUNT,\n      asset: {\n        tokenAddress: TOKEN_ADDRESS_MAINNET as string,\n        tokenId: TOKEN_ID_MAINNET as string,\n      },\n      englishAuction: true,\n      listingTime,\n    };\n    try {\n      const order = await sdk.createListing(listing);\n      expectValidOrder(order);\n      expect(order.protocolData.parameters.zone.toLowerCase()).to.equal(\n        ENGLISH_AUCTION_ZONE_MAINNETS,\n      );\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      expect(\n        error.message.includes(\n          \"There is already a live auction for this item. You can only have one auction live at any time.\",\n        ),\n      );\n    }\n  });\n\n  test(\"Post Listing - Polygon\", async function () {\n    if (!TOKEN_ADDRESS_POLYGON || !TOKEN_ID_POLYGON) {\n      this.skip();\n    }\n    const listing = {\n      accountAddress: walletAddress,\n      startAmount: +LISTING_AMOUNT * 1_000_000,\n      asset: {\n        tokenAddress: TOKEN_ADDRESS_POLYGON,\n        tokenId: TOKEN_ID_POLYGON,\n      },\n      listingTime,\n    };\n    const order = await sdkPolygon.createListing(listing);\n    expectValidOrder(order);\n  });\n\n  test(\"Post Collection Offer - Mainnet\", async () => {\n    const collection = await sdk.api.getCollection(\"cool-cats-nft\");\n    const paymentTokenAddress = getWETHAddress(sdk.chain);\n    const postOrderRequest = {\n      collectionSlug: collection.collection,\n      accountAddress: walletAddress,\n      amount: OFFER_AMOUNT,\n      quantity: 1,\n      paymentTokenAddress,\n      listingTime,\n    };\n    const offerResponse = await sdk.createCollectionOffer(postOrderRequest);\n    expect(offerResponse).to.exist.and.to.have.property(\"protocol_address\");\n    expect(offerResponse).to.exist.and.to.have.property(\"protocol_data\");\n    expect(offerResponse).to.exist.and.to.have.property(\"order_hash\");\n\n    // Cancel the order using self serve API key tied to the offerer\n    const { protocol_address, order_hash } = offerResponse!;\n    const cancelResponse = await sdk.offchainCancelOrder(\n      protocol_address,\n      order_hash,\n    );\n    expect(cancelResponse).to.exist.and.to.have.property(\n      \"last_signature_issued_valid_until\",\n    );\n  });\n\n  test(\"Post Collection Offer - Polygon\", async () => {\n    const collection = await sdkPolygon.api.getCollection(\"arttoken-1155-4\");\n    const paymentTokenAddress = getWETHAddress(sdkPolygon.chain);\n    const postOrderRequest = {\n      collectionSlug: collection.collection,\n      accountAddress: walletAddress,\n      amount: 0.0001,\n      quantity: 1,\n      paymentTokenAddress,\n      listingTime,\n    };\n    const offerResponse =\n      await sdkPolygon.createCollectionOffer(postOrderRequest);\n    expect(offerResponse).to.exist.and.to.have.property(\"protocol_address\");\n    expect(offerResponse).to.exist.and.to.have.property(\"protocol_data\");\n    expect(offerResponse).to.exist.and.to.have.property(\"order_hash\");\n\n    // Cancel the order using the offerer signature, deriving it from the ethers signer\n    const { protocol_address, order_hash } = offerResponse!;\n    const cancelResponse = await sdkPolygon.offchainCancelOrder(\n      protocol_address,\n      order_hash,\n      undefined,\n      undefined,\n      true,\n    );\n    expect(cancelResponse).to.exist.and.to.have.property(\n      \"last_signature_issued_valid_until\",\n    );\n  });\n\n  test(\"Post Trait Offer - Ethereum\", async () => {\n    const collection = await sdk.api.getCollection(\"cool-cats-nft\");\n    const paymentTokenAddress = getWETHAddress(sdk.chain);\n    const postOrderRequest = {\n      collectionSlug: collection.collection,\n      accountAddress: walletAddress,\n      amount: OFFER_AMOUNT,\n      quantity: 1,\n      paymentTokenAddress,\n      traitType: \"face\",\n      traitValue: \"tvface bobross\",\n      listingTime,\n    };\n    const offerResponse = await sdk.createCollectionOffer(postOrderRequest);\n    expect(offerResponse).to.exist.and.to.have.property(\"protocol_data\");\n    expect(offerResponse?.criteria.trait).to.deep.equal({\n      type: \"face\",\n      value: \"tvface bobross\",\n    });\n  });\n});\n"]}