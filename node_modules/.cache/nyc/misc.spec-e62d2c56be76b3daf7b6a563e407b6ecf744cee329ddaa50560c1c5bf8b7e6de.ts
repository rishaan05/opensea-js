"use strict";function cov_1rwwl6lan7(){var path="/Users/rg/dev/opensea-js/test/sdk/misc.spec.ts";var hash="a0cef4964c05e281334646ca1feb43ec8efc5360";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/test/sdk/misc.spec.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:15},end:{line:3,column:30}},"2":{start:{line:4,column:17},end:{line:4,column:34}},"3":{start:{line:5,column:16},end:{line:5,column:32}},"4":{start:{line:6,column:20},end:{line:6,column:50}},"5":{start:{line:7,column:16},end:{line:7,column:42}},"6":{start:{line:8,column:16},end:{line:8,column:42}},"7":{start:{line:9,column:16},end:{line:9,column:48}},"8":{start:{line:10,column:20},end:{line:10,column:49}},"9":{start:{line:11,column:15},end:{line:14,column:46}},"10":{start:{line:14,column:13},end:{line:14,column:45}},"11":{start:{line:15,column:0},end:{line:162,column:3}},"12":{start:{line:16,column:4},end:{line:18,column:7}},"13":{start:{line:17,column:8},end:{line:17,column:63}},"14":{start:{line:19,column:4},end:{line:22,column:7}},"15":{start:{line:20,column:8},end:{line:20,column:68}},"16":{start:{line:21,column:8},end:{line:21,column:69}},"17":{start:{line:23,column:4},end:{line:26,column:7}},"18":{start:{line:24,column:24},end:{line:24,column:57}},"19":{start:{line:25,column:8},end:{line:25,column:132}},"20":{start:{line:27,column:4},end:{line:31,column:7}},"21":{start:{line:28,column:8},end:{line:30,column:9}},"22":{start:{line:29,column:12},end:{line:29,column:196}},"23":{start:{line:32,column:4},end:{line:36,column:7}},"24":{start:{line:33,column:8},end:{line:35,column:9}},"25":{start:{line:34,column:12},end:{line:34,column:210}},"26":{start:{line:37,column:4},end:{line:110,column:7}},"27":{start:{line:38,column:23},end:{line:38,column:60}},"28":{start:{line:39,column:31},end:{line:39,column:45}},"29":{start:{line:40,column:37},end:{line:40,column:126}},"30":{start:{line:42,column:8},end:{line:48,column:9}},"31":{start:{line:43,column:12},end:{line:43,column:73}},"32":{start:{line:44,column:12},end:{line:44,column:50}},"33":{start:{line:47,column:12},end:{line:47,column:75}},"34":{start:{line:49,column:8},end:{line:55,column:9}},"35":{start:{line:50,column:12},end:{line:50,column:76}},"36":{start:{line:51,column:12},end:{line:51,column:50}},"37":{start:{line:54,column:12},end:{line:54,column:75}},"38":{start:{line:56,column:22},end:{line:56,column:24}},"39":{start:{line:57,column:8},end:{line:63,column:9}},"40":{start:{line:58,column:12},end:{line:58,column:80}},"41":{start:{line:59,column:12},end:{line:59,column:50}},"42":{start:{line:62,column:12},end:{line:62,column:75}},"43":{start:{line:64,column:8},end:{line:70,column:9}},"44":{start:{line:65,column:12},end:{line:65,column:82}},"45":{start:{line:66,column:12},end:{line:66,column:50}},"46":{start:{line:69,column:12},end:{line:69,column:75}},"47":{start:{line:71,column:8},end:{line:83,column:9}},"48":{start:{line:72,column:12},end:{line:78,column:15}},"49":{start:{line:79,column:12},end:{line:79,column:50}},"50":{start:{line:82,column:12},end:{line:82,column:75}},"51":{start:{line:84,column:22},end:{line:84,column:24}},"52":{start:{line:85,column:8},end:{line:91,column:9}},"53":{start:{line:86,column:12},end:{line:86,column:65}},"54":{start:{line:87,column:12},end:{line:87,column:50}},"55":{start:{line:90,column:12},end:{line:90,column:75}},"56":{start:{line:92,column:8},end:{line:98,column:9}},"57":{start:{line:93,column:12},end:{line:93,column:64}},"58":{start:{line:94,column:12},end:{line:94,column:50}},"59":{start:{line:97,column:12},end:{line:97,column:75}},"60":{start:{line:99,column:8},end:{line:108,column:9}},"61":{start:{line:100,column:12},end:{line:103,column:15}},"62":{start:{line:104,column:12},end:{line:104,column:50}},"63":{start:{line:107,column:12},end:{line:107,column:75}},"64":{start:{line:111,column:4},end:{line:161,column:7}},"65":{start:{line:112,column:8},end:{line:114,column:11}},"66":{start:{line:113,column:12},end:{line:113,column:86}},"67":{start:{line:115,column:8},end:{line:117,column:11}},"68":{start:{line:116,column:12},end:{line:116,column:90}},"69":{start:{line:118,column:8},end:{line:120,column:11}},"70":{start:{line:119,column:12},end:{line:119,column:107}},"71":{start:{line:121,column:8},end:{line:123,column:11}},"72":{start:{line:122,column:12},end:{line:122,column:91}},"73":{start:{line:124,column:8},end:{line:126,column:11}},"74":{start:{line:125,column:12},end:{line:125,column:103}},"75":{start:{line:127,column:8},end:{line:136,column:11}},"76":{start:{line:128,column:12},end:{line:135,column:15}},"77":{start:{line:137,column:8},end:{line:145,column:11}},"78":{start:{line:138,column:12},end:{line:144,column:15}},"79":{start:{line:146,column:8},end:{line:149,column:11}},"80":{start:{line:147,column:12},end:{line:147,column:172}},"81":{start:{line:147,column:37},end:{line:147,column:75}},"82":{start:{line:148,column:12},end:{line:148,column:172}},"83":{start:{line:148,column:37},end:{line:148,column:75}},"84":{start:{line:150,column:8},end:{line:152,column:11}},"85":{start:{line:151,column:12},end:{line:151,column:164}},"86":{start:{line:151,column:37},end:{line:151,column:71}},"87":{start:{line:153,column:8},end:{line:160,column:11}},"88":{start:{line:154,column:28},end:{line:154,column:83}},"89":{start:{line:155,column:12},end:{line:159,column:15}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:3},end:{line:14,column:4}},loc:{start:{line:14,column:13},end:{line:14,column:45}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:32},end:{line:15,column:33}},loc:{start:{line:15,column:38},end:{line:162,column:1}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:16,column:53},end:{line:16,column:54}},loc:{start:{line:16,column:59},end:{line:18,column:5}},line:16},"3":{name:"(anonymous_3)",decl:{start:{line:19,column:54},end:{line:19,column:55}},loc:{start:{line:19,column:60},end:{line:22,column:5}},line:19},"4":{name:"(anonymous_4)",decl:{start:{line:23,column:85},end:{line:23,column:86}},loc:{start:{line:23,column:97},end:{line:26,column:5}},line:23},"5":{name:"(anonymous_5)",decl:{start:{line:27,column:107},end:{line:27,column:108}},loc:{start:{line:27,column:119},end:{line:31,column:5}},line:27},"6":{name:"(anonymous_6)",decl:{start:{line:32,column:118},end:{line:32,column:119}},loc:{start:{line:32,column:130},end:{line:36,column:5}},line:32},"7":{name:"(anonymous_7)",decl:{start:{line:37,column:121},end:{line:37,column:122}},loc:{start:{line:37,column:133},end:{line:110,column:5}},line:37},"8":{name:"(anonymous_8)",decl:{start:{line:111,column:31},end:{line:111,column:32}},loc:{start:{line:111,column:37},end:{line:161,column:5}},line:111},"9":{name:"(anonymous_9)",decl:{start:{line:112,column:58},end:{line:112,column:59}},loc:{start:{line:112,column:64},end:{line:114,column:9}},line:112},"10":{name:"(anonymous_10)",decl:{start:{line:115,column:54},end:{line:115,column:55}},loc:{start:{line:115,column:60},end:{line:117,column:9}},line:115},"11":{name:"(anonymous_11)",decl:{start:{line:118,column:71},end:{line:118,column:72}},loc:{start:{line:118,column:77},end:{line:120,column:9}},line:118},"12":{name:"(anonymous_12)",decl:{start:{line:121,column:54},end:{line:121,column:55}},loc:{start:{line:121,column:60},end:{line:123,column:9}},line:121},"13":{name:"(anonymous_13)",decl:{start:{line:124,column:57},end:{line:124,column:58}},loc:{start:{line:124,column:63},end:{line:126,column:9}},line:124},"14":{name:"(anonymous_14)",decl:{start:{line:127,column:65},end:{line:127,column:66}},loc:{start:{line:127,column:71},end:{line:136,column:9}},line:127},"15":{name:"(anonymous_15)",decl:{start:{line:137,column:73},end:{line:137,column:74}},loc:{start:{line:137,column:79},end:{line:145,column:9}},line:137},"16":{name:"(anonymous_16)",decl:{start:{line:146,column:61},end:{line:146,column:62}},loc:{start:{line:146,column:67},end:{line:149,column:9}},line:146},"17":{name:"(anonymous_17)",decl:{start:{line:147,column:31},end:{line:147,column:32}},loc:{start:{line:147,column:37},end:{line:147,column:75}},line:147},"18":{name:"(anonymous_18)",decl:{start:{line:148,column:31},end:{line:148,column:32}},loc:{start:{line:148,column:37},end:{line:148,column:75}},line:148},"19":{name:"(anonymous_19)",decl:{start:{line:150,column:61},end:{line:150,column:62}},loc:{start:{line:150,column:67},end:{line:152,column:9}},line:150},"20":{name:"(anonymous_20)",decl:{start:{line:151,column:31},end:{line:151,column:32}},loc:{start:{line:151,column:37},end:{line:151,column:71}},line:151},"21":{name:"(anonymous_21)",decl:{start:{line:153,column:53},end:{line:153,column:54}},loc:{start:{line:153,column:59},end:{line:160,column:9}},line:153}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},b:{},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/test/sdk/misc.spec.ts",sources:["/Users/rg/dev/opensea-js/test/sdk/misc.spec.ts"],names:[],mappings:"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",sourcesContent:["import { assert, expect } from \"chai\";\nimport { ethers } from \"ethers\";\nimport { suite, test } from \"mocha\";\nimport {\n  SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS,\n  SHARED_STOREFRONT_ADDRESSES,\n} from \"../../src/constants\";\nimport { OpenSeaSDK } from \"../../src/index\";\nimport { Chain } from \"../../src/types\";\nimport {\n  decodeTokenIds,\n  getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress,\n} from \"../../src/utils/utils\";\nimport {\n  BAYC_CONTRACT_ADDRESS,\n  OPENSEA_API_KEY,\n  RPC_PROVIDER_MAINNET,\n} from \"../utils/constants\";\n\nconst client = new OpenSeaSDK(\n  RPC_PROVIDER_MAINNET,\n  {\n    chain: Chain.Mainnet,\n    apiKey: OPENSEA_API_KEY,\n  },\n  (line) => console.info(`MAINNET: ${line}`),\n);\n\nsuite(\"SDK: misc\", () => {\n  test(\"Instance has public methods\", () => {\n    assert.equal(typeof client.wrapEth, \"function\");\n  });\n\n  test(\"Instance exposes API methods\", () => {\n    assert.equal(typeof client.api.getOrder, \"function\");\n    assert.equal(typeof client.api.getOrders, \"function\");\n  });\n\n  test(\"Checks that a non-shared storefront address is not remapped\", async () => {\n    const address = BAYC_CONTRACT_ADDRESS;\n    assert.equal(\n      getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress(\n        address,\n      ),\n      address,\n    );\n  });\n\n  test(\"Checks that shared storefront addresses are remapped to lazy mint adapter address\", async () => {\n    for (const address of SHARED_STOREFRONT_ADDRESSES) {\n      assert.equal(\n        getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress(\n          address,\n        ),\n        SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS,\n      );\n    }\n  });\n\n  test(\"Checks that upper case shared storefront addresses are remapped to lazy mint adapter address\", async () => {\n    for (const address of SHARED_STOREFRONT_ADDRESSES) {\n      assert.equal(\n        getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress(\n          address.toUpperCase(),\n        ),\n        SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS,\n      );\n    }\n  });\n\n  test(\"Should throw an error when using methods that need a provider or wallet with the accountAddress\", async () => {\n    const wallet = ethers.Wallet.createRandom();\n    const accountAddress = wallet.address;\n    const expectedErrorMessage = `Specified accountAddress is not available through wallet or provider: ${accountAddress}`;\n\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    try {\n      await client.wrapEth({ amountInEth: \"0.1\", accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    try {\n      await client.unwrapWeth({ amountInEth: \"0.1\", accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    const asset = {} as any;\n\n    try {\n      await client.createOffer({ asset, startAmount: 1, accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    try {\n      await client.createListing({ asset, startAmount: 1, accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    try {\n      await client.createCollectionOffer({\n        collectionSlug: \"\",\n        amount: 1,\n        quantity: 1,\n        paymentTokenAddress: \"\",\n        accountAddress,\n      });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    const order = {} as any;\n\n    try {\n      await client.fulfillOrder({ order, accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    try {\n      await client.cancelOrder({ order, accountAddress });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n\n    try {\n      await client.approveOrder({\n        ...order,\n        maker: { address: accountAddress },\n      });\n      throw new Error(\"should have thrown\");\n    } catch (e: any) {\n      expect(e.message).to.include(expectedErrorMessage);\n    }\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n  });\n\n  describe(\"decodeTokenIds\", () => {\n    it('should return [\"*\"] when given \"*\" as input', () => {\n      expect(decodeTokenIds(\"*\")).to.deep.equal([\"*\"]);\n    });\n\n    it(\"should correctly decode a single number\", () => {\n      expect(decodeTokenIds(\"123\")).to.deep.equal([\"123\"]);\n    });\n\n    it(\"should correctly decode multiple comma-separated numbers\", () => {\n      expect(decodeTokenIds(\"1,2,3,4\")).to.deep.equal([\"1\", \"2\", \"3\", \"4\"]);\n    });\n\n    it(\"should correctly decode a single number\", () => {\n      expect(decodeTokenIds(\"10:10\")).to.deep.equal([\"10\"]);\n    });\n\n    it(\"should correctly decode a range of numbers\", () => {\n      expect(decodeTokenIds(\"5:8\")).to.deep.equal([\"5\", \"6\", \"7\", \"8\"]);\n    });\n\n    it(\"should correctly decode multiple ranges of numbers\", () => {\n      expect(decodeTokenIds(\"1:3,7:9\")).to.deep.equal([\n        \"1\",\n        \"2\",\n        \"3\",\n        \"7\",\n        \"8\",\n        \"9\",\n      ]);\n    });\n\n    it(\"should correctly decode a mix of single numbers and ranges\", () => {\n      expect(decodeTokenIds(\"1,3:5,8\")).to.deep.equal([\n        \"1\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"8\",\n      ]);\n    });\n\n    it(\"should throw an error for invalid input format\", () => {\n      expect(() => decodeTokenIds(\"1:3:5,8\")).to.throw(\n        \"Invalid input format. Expected a valid comma-separated list of numbers and ranges.\",\n      );\n      expect(() => decodeTokenIds(\"1;3:5,8\")).to.throw(\n        \"Invalid input format. Expected a valid comma-separated list of numbers and ranges.\",\n      );\n    });\n\n    it(\"should throw an error for invalid range format\", () => {\n      expect(() => decodeTokenIds(\"5:2\")).throws(\n        \"Invalid range. End value: 2 must be greater than or equal to the start value: 5.\",\n      );\n    });\n\n    it(\"should handle very large input numbers\", () => {\n      const encoded = \"10000000000000000000000000:10000000000000000000000002\";\n      expect(decodeTokenIds(encoded)).deep.equal([\n        \"10000000000000000000000000\",\n        \"10000000000000000000000001\",\n        \"10000000000000000000000002\",\n      ]);\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a0cef4964c05e281334646ca1feb43ec8efc5360"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1rwwl6lan7=function(){return actualCoverage;};}return actualCoverage;}cov_1rwwl6lan7();cov_1rwwl6lan7().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const chai_1=(cov_1rwwl6lan7().s[1]++,require("chai"));const ethers_1=(cov_1rwwl6lan7().s[2]++,require("ethers"));const mocha_1=(cov_1rwwl6lan7().s[3]++,require("mocha"));const constants_1=(cov_1rwwl6lan7().s[4]++,require("../../src/constants"));const index_1=(cov_1rwwl6lan7().s[5]++,require("../../src/index"));const types_1=(cov_1rwwl6lan7().s[6]++,require("../../src/types"));const utils_1=(cov_1rwwl6lan7().s[7]++,require("../../src/utils/utils"));const constants_2=(cov_1rwwl6lan7().s[8]++,require("../utils/constants"));const client=(cov_1rwwl6lan7().s[9]++,new index_1.OpenSeaSDK(constants_2.RPC_PROVIDER_MAINNET,{chain:types_1.Chain.Mainnet,apiKey:constants_2.OPENSEA_API_KEY},line=>{cov_1rwwl6lan7().f[0]++;cov_1rwwl6lan7().s[10]++;return console.info(`MAINNET: ${line}`);}));cov_1rwwl6lan7().s[11]++;(0,mocha_1.suite)("SDK: misc",()=>{cov_1rwwl6lan7().f[1]++;cov_1rwwl6lan7().s[12]++;(0,mocha_1.test)("Instance has public methods",()=>{cov_1rwwl6lan7().f[2]++;cov_1rwwl6lan7().s[13]++;chai_1.assert.equal(typeof client.wrapEth,"function");});cov_1rwwl6lan7().s[14]++;(0,mocha_1.test)("Instance exposes API methods",()=>{cov_1rwwl6lan7().f[3]++;cov_1rwwl6lan7().s[15]++;chai_1.assert.equal(typeof client.api.getOrder,"function");cov_1rwwl6lan7().s[16]++;chai_1.assert.equal(typeof client.api.getOrders,"function");});cov_1rwwl6lan7().s[17]++;(0,mocha_1.test)("Checks that a non-shared storefront address is not remapped",async()=>{cov_1rwwl6lan7().f[4]++;const address=(cov_1rwwl6lan7().s[18]++,constants_2.BAYC_CONTRACT_ADDRESS);cov_1rwwl6lan7().s[19]++;chai_1.assert.equal((0,utils_1.getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress)(address),address);});cov_1rwwl6lan7().s[20]++;(0,mocha_1.test)("Checks that shared storefront addresses are remapped to lazy mint adapter address",async()=>{cov_1rwwl6lan7().f[5]++;cov_1rwwl6lan7().s[21]++;for(const address of constants_1.SHARED_STOREFRONT_ADDRESSES){cov_1rwwl6lan7().s[22]++;chai_1.assert.equal((0,utils_1.getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress)(address),constants_1.SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS);}});cov_1rwwl6lan7().s[23]++;(0,mocha_1.test)("Checks that upper case shared storefront addresses are remapped to lazy mint adapter address",async()=>{cov_1rwwl6lan7().f[6]++;cov_1rwwl6lan7().s[24]++;for(const address of constants_1.SHARED_STOREFRONT_ADDRESSES){cov_1rwwl6lan7().s[25]++;chai_1.assert.equal((0,utils_1.getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress)(address.toUpperCase()),constants_1.SHARED_STOREFRONT_LAZY_MINT_ADAPTER_CROSS_CHAIN_ADDRESS);}});cov_1rwwl6lan7().s[26]++;(0,mocha_1.test)("Should throw an error when using methods that need a provider or wallet with the accountAddress",async()=>{cov_1rwwl6lan7().f[7]++;const wallet=(cov_1rwwl6lan7().s[27]++,ethers_1.ethers.Wallet.createRandom());const accountAddress=(cov_1rwwl6lan7().s[28]++,wallet.address);const expectedErrorMessage=(cov_1rwwl6lan7().s[29]++,`Specified accountAddress is not available through wallet or provider: ${accountAddress}`);/* eslint-disable @typescript-eslint/no-explicit-any */cov_1rwwl6lan7().s[30]++;try{cov_1rwwl6lan7().s[31]++;await client.wrapEth({amountInEth:"0.1",accountAddress});cov_1rwwl6lan7().s[32]++;throw new Error("should have thrown");}catch(e){cov_1rwwl6lan7().s[33]++;(0,chai_1.expect)(e.message).to.include(expectedErrorMessage);}cov_1rwwl6lan7().s[34]++;try{cov_1rwwl6lan7().s[35]++;await client.unwrapWeth({amountInEth:"0.1",accountAddress});cov_1rwwl6lan7().s[36]++;throw new Error("should have thrown");}catch(e){cov_1rwwl6lan7().s[37]++;(0,chai_1.expect)(e.message).to.include(expectedErrorMessage);}const asset=(cov_1rwwl6lan7().s[38]++,{});cov_1rwwl6lan7().s[39]++;try{cov_1rwwl6lan7().s[40]++;await client.createOffer({asset,startAmount:1,accountAddress});cov_1rwwl6lan7().s[41]++;throw new Error("should have thrown");}catch(e){cov_1rwwl6lan7().s[42]++;(0,chai_1.expect)(e.message).to.include(expectedErrorMessage);}cov_1rwwl6lan7().s[43]++;try{cov_1rwwl6lan7().s[44]++;await client.createListing({asset,startAmount:1,accountAddress});cov_1rwwl6lan7().s[45]++;throw new Error("should have thrown");}catch(e){cov_1rwwl6lan7().s[46]++;(0,chai_1.expect)(e.message).to.include(expectedErrorMessage);}cov_1rwwl6lan7().s[47]++;try{cov_1rwwl6lan7().s[48]++;await client.createCollectionOffer({collectionSlug:"",amount:1,quantity:1,paymentTokenAddress:"",accountAddress});cov_1rwwl6lan7().s[49]++;throw new Error("should have thrown");}catch(e){cov_1rwwl6lan7().s[50]++;(0,chai_1.expect)(e.message).to.include(expectedErrorMessage);}const order=(cov_1rwwl6lan7().s[51]++,{});cov_1rwwl6lan7().s[52]++;try{cov_1rwwl6lan7().s[53]++;await client.fulfillOrder({order,accountAddress});cov_1rwwl6lan7().s[54]++;throw new Error("should have thrown");}catch(e){cov_1rwwl6lan7().s[55]++;(0,chai_1.expect)(e.message).to.include(expectedErrorMessage);}cov_1rwwl6lan7().s[56]++;try{cov_1rwwl6lan7().s[57]++;await client.cancelOrder({order,accountAddress});cov_1rwwl6lan7().s[58]++;throw new Error("should have thrown");}catch(e){cov_1rwwl6lan7().s[59]++;(0,chai_1.expect)(e.message).to.include(expectedErrorMessage);}cov_1rwwl6lan7().s[60]++;try{cov_1rwwl6lan7().s[61]++;await client.approveOrder({...order,maker:{address:accountAddress}});cov_1rwwl6lan7().s[62]++;throw new Error("should have thrown");}catch(e){cov_1rwwl6lan7().s[63]++;(0,chai_1.expect)(e.message).to.include(expectedErrorMessage);}/* eslint-enable @typescript-eslint/no-explicit-any */});cov_1rwwl6lan7().s[64]++;describe("decodeTokenIds",()=>{cov_1rwwl6lan7().f[8]++;cov_1rwwl6lan7().s[65]++;it('should return ["*"] when given "*" as input',()=>{cov_1rwwl6lan7().f[9]++;cov_1rwwl6lan7().s[66]++;(0,chai_1.expect)((0,utils_1.decodeTokenIds)("*")).to.deep.equal(["*"]);});cov_1rwwl6lan7().s[67]++;it("should correctly decode a single number",()=>{cov_1rwwl6lan7().f[10]++;cov_1rwwl6lan7().s[68]++;(0,chai_1.expect)((0,utils_1.decodeTokenIds)("123")).to.deep.equal(["123"]);});cov_1rwwl6lan7().s[69]++;it("should correctly decode multiple comma-separated numbers",()=>{cov_1rwwl6lan7().f[11]++;cov_1rwwl6lan7().s[70]++;(0,chai_1.expect)((0,utils_1.decodeTokenIds)("1,2,3,4")).to.deep.equal(["1","2","3","4"]);});cov_1rwwl6lan7().s[71]++;it("should correctly decode a single number",()=>{cov_1rwwl6lan7().f[12]++;cov_1rwwl6lan7().s[72]++;(0,chai_1.expect)((0,utils_1.decodeTokenIds)("10:10")).to.deep.equal(["10"]);});cov_1rwwl6lan7().s[73]++;it("should correctly decode a range of numbers",()=>{cov_1rwwl6lan7().f[13]++;cov_1rwwl6lan7().s[74]++;(0,chai_1.expect)((0,utils_1.decodeTokenIds)("5:8")).to.deep.equal(["5","6","7","8"]);});cov_1rwwl6lan7().s[75]++;it("should correctly decode multiple ranges of numbers",()=>{cov_1rwwl6lan7().f[14]++;cov_1rwwl6lan7().s[76]++;(0,chai_1.expect)((0,utils_1.decodeTokenIds)("1:3,7:9")).to.deep.equal(["1","2","3","7","8","9"]);});cov_1rwwl6lan7().s[77]++;it("should correctly decode a mix of single numbers and ranges",()=>{cov_1rwwl6lan7().f[15]++;cov_1rwwl6lan7().s[78]++;(0,chai_1.expect)((0,utils_1.decodeTokenIds)("1,3:5,8")).to.deep.equal(["1","3","4","5","8"]);});cov_1rwwl6lan7().s[79]++;it("should throw an error for invalid input format",()=>{cov_1rwwl6lan7().f[16]++;cov_1rwwl6lan7().s[80]++;(0,chai_1.expect)(()=>{cov_1rwwl6lan7().f[17]++;cov_1rwwl6lan7().s[81]++;return(0,utils_1.decodeTokenIds)("1:3:5,8");}).to.throw("Invalid input format. Expected a valid comma-separated list of numbers and ranges.");cov_1rwwl6lan7().s[82]++;(0,chai_1.expect)(()=>{cov_1rwwl6lan7().f[18]++;cov_1rwwl6lan7().s[83]++;return(0,utils_1.decodeTokenIds)("1;3:5,8");}).to.throw("Invalid input format. Expected a valid comma-separated list of numbers and ranges.");});cov_1rwwl6lan7().s[84]++;it("should throw an error for invalid range format",()=>{cov_1rwwl6lan7().f[19]++;cov_1rwwl6lan7().s[85]++;(0,chai_1.expect)(()=>{cov_1rwwl6lan7().f[20]++;cov_1rwwl6lan7().s[86]++;return(0,utils_1.decodeTokenIds)("5:2");}).throws("Invalid range. End value: 2 must be greater than or equal to the start value: 5.");});cov_1rwwl6lan7().s[87]++;it("should handle very large input numbers",()=>{cov_1rwwl6lan7().f[21]++;const encoded=(cov_1rwwl6lan7().s[88]++,"10000000000000000000000000:10000000000000000000000002");cov_1rwwl6lan7().s[89]++;(0,chai_1.expect)((0,utils_1.decodeTokenIds)(encoded)).deep.equal(["10000000000000000000000000","10000000000000000000000001","10000000000000000000000002"]);});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,