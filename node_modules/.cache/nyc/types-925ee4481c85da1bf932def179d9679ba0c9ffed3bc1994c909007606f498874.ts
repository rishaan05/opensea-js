"use strict";function cov_1il0pgw43z(){var path="/Users/rg/dev/opensea-js/src/orders/types.ts";var hash="077de6ec9fdb1314bb8c7ca966b6afe7a017df1a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/src/orders/types.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:27}},"2":{start:{line:5,column:0},end:{line:9,column:54}},"3":{start:{line:6,column:4},end:{line:6,column:33}},"4":{start:{line:7,column:4},end:{line:7,column:37}},"5":{start:{line:8,column:4},end:{line:8,column:39}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:1},end:{line:5,column:2}},loc:{start:{line:5,column:22},end:{line:9,column:1}},line:5}},branchMap:{"0":{loc:{start:{line:9,column:3},end:{line:9,column:52}},type:"binary-expr",locations:[{start:{line:9,column:3},end:{line:9,column:12}},{start:{line:9,column:17},end:{line:9,column:51}}],line:9}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0]},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/src/orders/types.ts",sources:["/Users/rg/dev/opensea-js/src/orders/types.ts"],names:[],mappings:";;;AAYA,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,4BAAe,CAAA;IACf,gCAAmB,CAAA;IACnB,kCAAqB,CAAA;AACvB,CAAC,EAJW,SAAS,yBAAT,SAAS,QAIpB",sourcesContent:["import { BasicOrderParametersStruct } from \"@opensea/seaport-js/lib/typechain-types/seaport/contracts/Seaport\";\nimport { AdvancedOrder, OrderWithCounter } from \"@opensea/seaport-js/lib/types\";\nimport { OpenSeaAccount, OrderSide } from \"../types\";\n\n// Protocol data\ntype OrderProtocolToProtocolData = {\n  seaport: OrderWithCounter;\n};\nexport type OrderProtocol = keyof OrderProtocolToProtocolData;\nexport type ProtocolData =\n  OrderProtocolToProtocolData[keyof OrderProtocolToProtocolData];\n\nexport enum OrderType {\n  BASIC = \"basic\",\n  ENGLISH = \"english\",\n  CRITERIA = \"criteria\",\n}\n\ntype OrderFee = {\n  account: OpenSeaAccount;\n  basisPoints: string;\n};\n\n/**\n * The latest OpenSea Order schema.\n */\nexport type OrderV2 = {\n  /** The date the order was created. */\n  createdDate: string;\n  /** The date the order was closed. */\n  closingDate: string | null;\n  /** The date the order was listed. Order can be created before the listing time. */\n  listingTime: number;\n  /** The date the order expires. */\n  expirationTime: number;\n  /** The hash of the order. */\n  orderHash: string | null;\n  /** The account that created the order. */\n  maker: OpenSeaAccount;\n  /** The account that filled the order. */\n  taker: OpenSeaAccount | null;\n  /** The protocol data for the order. Only 'seaport' is currently supported. */\n  protocolData: ProtocolData;\n  /** The contract address of the protocol. */\n  protocolAddress: string;\n  /** The current price of the order. */\n  currentPrice: bigint;\n  /** The maker fees for the order. */\n  makerFees: OrderFee[];\n  /** The taker fees for the order. */\n  takerFees: OrderFee[];\n  /** The side of the order. Ask/Bid */\n  side: OrderSide;\n  /** The type of the order. Basic/English/Criteria */\n  orderType: OrderType;\n  /** Whether or not the maker has cancelled the order. */\n  cancelled: boolean;\n  /** Whether or not the order is finalized. */\n  finalized: boolean;\n  /** Whether or not the order is marked invalid and therefore not fillable. */\n  markedInvalid: boolean;\n  /** The signature the order is signed with. */\n  clientSignature: string | null;\n  /** Amount of items left in the order which can be taken. */\n  remainingQuantity: number;\n};\n\nexport type FulfillmentDataResponse = {\n  protocol: string;\n  fulfillment_data: FulfillmentData;\n};\n\ntype FulfillmentData = {\n  transaction: Transaction;\n  orders: ProtocolData[];\n};\n\ntype Transaction = {\n  function: string;\n  chain: number;\n  to: string;\n  value: number;\n  input_data: {\n    orders: OrderWithCounter[] | AdvancedOrder[] | BasicOrderParametersStruct[];\n  };\n};\n\n// API query types\ntype OpenOrderOrderingOption = \"created_date\" | \"eth_price\";\ntype OrderByDirection = \"asc\" | \"desc\";\n\nexport type OrderAPIOptions = {\n  protocol?: OrderProtocol;\n  protocolAddress?: string;\n  side: OrderSide;\n};\n\nexport type OrdersQueryOptions = OrderAPIOptions & {\n  limit?: number;\n  cursor?: string;\n  next?: string;\n\n  paymentTokenAddress?: string;\n  maker?: string;\n  taker?: string;\n  owner?: string;\n  listedAfter?: number | string;\n  listedBefore?: number | string;\n  tokenId?: string;\n  tokenIds?: string[];\n  assetContractAddress?: string;\n  orderBy?: OpenOrderOrderingOption;\n  orderDirection?: OrderByDirection;\n  onlyEnglish?: boolean;\n};\n\nexport type SerializedOrderV2 = {\n  created_date: string;\n  closing_date: string | null;\n  listing_time: number;\n  expiration_time: number;\n  order_hash: string | null;\n  maker: unknown;\n  taker: unknown | null;\n  protocol_data: ProtocolData;\n  protocol_address: string;\n  current_price: string;\n  maker_fees: {\n    account: unknown;\n    basis_points: string;\n  }[];\n  taker_fees: {\n    account: unknown;\n    basis_points: string;\n  }[];\n  side: OrderSide;\n  order_type: OrderType;\n  cancelled: boolean;\n  finalized: boolean;\n  marked_invalid: boolean;\n  client_signature: string | null;\n  remaining_quantity: number;\n};\n\nexport type QueryCursors = {\n  next: string | null;\n  previous: string | null;\n};\n\nexport type OrdersQueryResponse = QueryCursors & {\n  orders: SerializedOrderV2[];\n};\n\nexport type OrdersPostQueryResponse = { order: SerializedOrderV2 };\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"077de6ec9fdb1314bb8c7ca966b6afe7a017df1a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1il0pgw43z=function(){return actualCoverage;};}return actualCoverage;}cov_1il0pgw43z();cov_1il0pgw43z().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1il0pgw43z().s[1]++;exports.OrderType=void 0;var OrderType;cov_1il0pgw43z().s[2]++;(function(OrderType){cov_1il0pgw43z().f[0]++;cov_1il0pgw43z().s[3]++;OrderType["BASIC"]="basic";cov_1il0pgw43z().s[4]++;OrderType["ENGLISH"]="english";cov_1il0pgw43z().s[5]++;OrderType["CRITERIA"]="criteria";})((cov_1il0pgw43z().b[0][0]++,OrderType)||(cov_1il0pgw43z().b[0][1]++,exports.OrderType=OrderType={}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3JnL2Rldi9vcGVuc2VhLWpzL3NyYy9vcmRlcnMvdHlwZXMudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yZy9kZXYvb3BlbnNlYS1qcy9zcmMvb3JkZXJzL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQVlBLElBQVksU0FJWDtBQUpELFdBQVksU0FBUztJQUNuQiw0QkFBZSxDQUFBO0lBQ2YsZ0NBQW1CLENBQUE7SUFDbkIsa0NBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQUpXLFNBQVMseUJBQVQsU0FBUyxRQUlwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2ljT3JkZXJQYXJhbWV0ZXJzU3RydWN0IH0gZnJvbSBcIkBvcGVuc2VhL3NlYXBvcnQtanMvbGliL3R5cGVjaGFpbi10eXBlcy9zZWFwb3J0L2NvbnRyYWN0cy9TZWFwb3J0XCI7XG5pbXBvcnQgeyBBZHZhbmNlZE9yZGVyLCBPcmRlcldpdGhDb3VudGVyIH0gZnJvbSBcIkBvcGVuc2VhL3NlYXBvcnQtanMvbGliL3R5cGVzXCI7XG5pbXBvcnQgeyBPcGVuU2VhQWNjb3VudCwgT3JkZXJTaWRlIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbi8vIFByb3RvY29sIGRhdGFcbnR5cGUgT3JkZXJQcm90b2NvbFRvUHJvdG9jb2xEYXRhID0ge1xuICBzZWFwb3J0OiBPcmRlcldpdGhDb3VudGVyO1xufTtcbmV4cG9ydCB0eXBlIE9yZGVyUHJvdG9jb2wgPSBrZXlvZiBPcmRlclByb3RvY29sVG9Qcm90b2NvbERhdGE7XG5leHBvcnQgdHlwZSBQcm90b2NvbERhdGEgPVxuICBPcmRlclByb3RvY29sVG9Qcm90b2NvbERhdGFba2V5b2YgT3JkZXJQcm90b2NvbFRvUHJvdG9jb2xEYXRhXTtcblxuZXhwb3J0IGVudW0gT3JkZXJUeXBlIHtcbiAgQkFTSUMgPSBcImJhc2ljXCIsXG4gIEVOR0xJU0ggPSBcImVuZ2xpc2hcIixcbiAgQ1JJVEVSSUEgPSBcImNyaXRlcmlhXCIsXG59XG5cbnR5cGUgT3JkZXJGZWUgPSB7XG4gIGFjY291bnQ6IE9wZW5TZWFBY2NvdW50O1xuICBiYXNpc1BvaW50czogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBUaGUgbGF0ZXN0IE9wZW5TZWEgT3JkZXIgc2NoZW1hLlxuICovXG5leHBvcnQgdHlwZSBPcmRlclYyID0ge1xuICAvKiogVGhlIGRhdGUgdGhlIG9yZGVyIHdhcyBjcmVhdGVkLiAqL1xuICBjcmVhdGVkRGF0ZTogc3RyaW5nO1xuICAvKiogVGhlIGRhdGUgdGhlIG9yZGVyIHdhcyBjbG9zZWQuICovXG4gIGNsb3NpbmdEYXRlOiBzdHJpbmcgfCBudWxsO1xuICAvKiogVGhlIGRhdGUgdGhlIG9yZGVyIHdhcyBsaXN0ZWQuIE9yZGVyIGNhbiBiZSBjcmVhdGVkIGJlZm9yZSB0aGUgbGlzdGluZyB0aW1lLiAqL1xuICBsaXN0aW5nVGltZTogbnVtYmVyO1xuICAvKiogVGhlIGRhdGUgdGhlIG9yZGVyIGV4cGlyZXMuICovXG4gIGV4cGlyYXRpb25UaW1lOiBudW1iZXI7XG4gIC8qKiBUaGUgaGFzaCBvZiB0aGUgb3JkZXIuICovXG4gIG9yZGVySGFzaDogc3RyaW5nIHwgbnVsbDtcbiAgLyoqIFRoZSBhY2NvdW50IHRoYXQgY3JlYXRlZCB0aGUgb3JkZXIuICovXG4gIG1ha2VyOiBPcGVuU2VhQWNjb3VudDtcbiAgLyoqIFRoZSBhY2NvdW50IHRoYXQgZmlsbGVkIHRoZSBvcmRlci4gKi9cbiAgdGFrZXI6IE9wZW5TZWFBY2NvdW50IHwgbnVsbDtcbiAgLyoqIFRoZSBwcm90b2NvbCBkYXRhIGZvciB0aGUgb3JkZXIuIE9ubHkgJ3NlYXBvcnQnIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuICovXG4gIHByb3RvY29sRGF0YTogUHJvdG9jb2xEYXRhO1xuICAvKiogVGhlIGNvbnRyYWN0IGFkZHJlc3Mgb2YgdGhlIHByb3RvY29sLiAqL1xuICBwcm90b2NvbEFkZHJlc3M6IHN0cmluZztcbiAgLyoqIFRoZSBjdXJyZW50IHByaWNlIG9mIHRoZSBvcmRlci4gKi9cbiAgY3VycmVudFByaWNlOiBiaWdpbnQ7XG4gIC8qKiBUaGUgbWFrZXIgZmVlcyBmb3IgdGhlIG9yZGVyLiAqL1xuICBtYWtlckZlZXM6IE9yZGVyRmVlW107XG4gIC8qKiBUaGUgdGFrZXIgZmVlcyBmb3IgdGhlIG9yZGVyLiAqL1xuICB0YWtlckZlZXM6IE9yZGVyRmVlW107XG4gIC8qKiBUaGUgc2lkZSBvZiB0aGUgb3JkZXIuIEFzay9CaWQgKi9cbiAgc2lkZTogT3JkZXJTaWRlO1xuICAvKiogVGhlIHR5cGUgb2YgdGhlIG9yZGVyLiBCYXNpYy9FbmdsaXNoL0NyaXRlcmlhICovXG4gIG9yZGVyVHlwZTogT3JkZXJUeXBlO1xuICAvKiogV2hldGhlciBvciBub3QgdGhlIG1ha2VyIGhhcyBjYW5jZWxsZWQgdGhlIG9yZGVyLiAqL1xuICBjYW5jZWxsZWQ6IGJvb2xlYW47XG4gIC8qKiBXaGV0aGVyIG9yIG5vdCB0aGUgb3JkZXIgaXMgZmluYWxpemVkLiAqL1xuICBmaW5hbGl6ZWQ6IGJvb2xlYW47XG4gIC8qKiBXaGV0aGVyIG9yIG5vdCB0aGUgb3JkZXIgaXMgbWFya2VkIGludmFsaWQgYW5kIHRoZXJlZm9yZSBub3QgZmlsbGFibGUuICovXG4gIG1hcmtlZEludmFsaWQ6IGJvb2xlYW47XG4gIC8qKiBUaGUgc2lnbmF0dXJlIHRoZSBvcmRlciBpcyBzaWduZWQgd2l0aC4gKi9cbiAgY2xpZW50U2lnbmF0dXJlOiBzdHJpbmcgfCBudWxsO1xuICAvKiogQW1vdW50IG9mIGl0ZW1zIGxlZnQgaW4gdGhlIG9yZGVyIHdoaWNoIGNhbiBiZSB0YWtlbi4gKi9cbiAgcmVtYWluaW5nUXVhbnRpdHk6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIEZ1bGZpbGxtZW50RGF0YVJlc3BvbnNlID0ge1xuICBwcm90b2NvbDogc3RyaW5nO1xuICBmdWxmaWxsbWVudF9kYXRhOiBGdWxmaWxsbWVudERhdGE7XG59O1xuXG50eXBlIEZ1bGZpbGxtZW50RGF0YSA9IHtcbiAgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uO1xuICBvcmRlcnM6IFByb3RvY29sRGF0YVtdO1xufTtcblxudHlwZSBUcmFuc2FjdGlvbiA9IHtcbiAgZnVuY3Rpb246IHN0cmluZztcbiAgY2hhaW46IG51bWJlcjtcbiAgdG86IHN0cmluZztcbiAgdmFsdWU6IG51bWJlcjtcbiAgaW5wdXRfZGF0YToge1xuICAgIG9yZGVyczogT3JkZXJXaXRoQ291bnRlcltdIHwgQWR2YW5jZWRPcmRlcltdIHwgQmFzaWNPcmRlclBhcmFtZXRlcnNTdHJ1Y3RbXTtcbiAgfTtcbn07XG5cbi8vIEFQSSBxdWVyeSB0eXBlc1xudHlwZSBPcGVuT3JkZXJPcmRlcmluZ09wdGlvbiA9IFwiY3JlYXRlZF9kYXRlXCIgfCBcImV0aF9wcmljZVwiO1xudHlwZSBPcmRlckJ5RGlyZWN0aW9uID0gXCJhc2NcIiB8IFwiZGVzY1wiO1xuXG5leHBvcnQgdHlwZSBPcmRlckFQSU9wdGlvbnMgPSB7XG4gIHByb3RvY29sPzogT3JkZXJQcm90b2NvbDtcbiAgcHJvdG9jb2xBZGRyZXNzPzogc3RyaW5nO1xuICBzaWRlOiBPcmRlclNpZGU7XG59O1xuXG5leHBvcnQgdHlwZSBPcmRlcnNRdWVyeU9wdGlvbnMgPSBPcmRlckFQSU9wdGlvbnMgJiB7XG4gIGxpbWl0PzogbnVtYmVyO1xuICBjdXJzb3I/OiBzdHJpbmc7XG4gIG5leHQ/OiBzdHJpbmc7XG5cbiAgcGF5bWVudFRva2VuQWRkcmVzcz86IHN0cmluZztcbiAgbWFrZXI/OiBzdHJpbmc7XG4gIHRha2VyPzogc3RyaW5nO1xuICBvd25lcj86IHN0cmluZztcbiAgbGlzdGVkQWZ0ZXI/OiBudW1iZXIgfCBzdHJpbmc7XG4gIGxpc3RlZEJlZm9yZT86IG51bWJlciB8IHN0cmluZztcbiAgdG9rZW5JZD86IHN0cmluZztcbiAgdG9rZW5JZHM/OiBzdHJpbmdbXTtcbiAgYXNzZXRDb250cmFjdEFkZHJlc3M/OiBzdHJpbmc7XG4gIG9yZGVyQnk/OiBPcGVuT3JkZXJPcmRlcmluZ09wdGlvbjtcbiAgb3JkZXJEaXJlY3Rpb24/OiBPcmRlckJ5RGlyZWN0aW9uO1xuICBvbmx5RW5nbGlzaD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBTZXJpYWxpemVkT3JkZXJWMiA9IHtcbiAgY3JlYXRlZF9kYXRlOiBzdHJpbmc7XG4gIGNsb3NpbmdfZGF0ZTogc3RyaW5nIHwgbnVsbDtcbiAgbGlzdGluZ190aW1lOiBudW1iZXI7XG4gIGV4cGlyYXRpb25fdGltZTogbnVtYmVyO1xuICBvcmRlcl9oYXNoOiBzdHJpbmcgfCBudWxsO1xuICBtYWtlcjogdW5rbm93bjtcbiAgdGFrZXI6IHVua25vd24gfCBudWxsO1xuICBwcm90b2NvbF9kYXRhOiBQcm90b2NvbERhdGE7XG4gIHByb3RvY29sX2FkZHJlc3M6IHN0cmluZztcbiAgY3VycmVudF9wcmljZTogc3RyaW5nO1xuICBtYWtlcl9mZWVzOiB7XG4gICAgYWNjb3VudDogdW5rbm93bjtcbiAgICBiYXNpc19wb2ludHM6IHN0cmluZztcbiAgfVtdO1xuICB0YWtlcl9mZWVzOiB7XG4gICAgYWNjb3VudDogdW5rbm93bjtcbiAgICBiYXNpc19wb2ludHM6IHN0cmluZztcbiAgfVtdO1xuICBzaWRlOiBPcmRlclNpZGU7XG4gIG9yZGVyX3R5cGU6IE9yZGVyVHlwZTtcbiAgY2FuY2VsbGVkOiBib29sZWFuO1xuICBmaW5hbGl6ZWQ6IGJvb2xlYW47XG4gIG1hcmtlZF9pbnZhbGlkOiBib29sZWFuO1xuICBjbGllbnRfc2lnbmF0dXJlOiBzdHJpbmcgfCBudWxsO1xuICByZW1haW5pbmdfcXVhbnRpdHk6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5Q3Vyc29ycyA9IHtcbiAgbmV4dDogc3RyaW5nIHwgbnVsbDtcbiAgcHJldmlvdXM6IHN0cmluZyB8IG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBPcmRlcnNRdWVyeVJlc3BvbnNlID0gUXVlcnlDdXJzb3JzICYge1xuICBvcmRlcnM6IFNlcmlhbGl6ZWRPcmRlclYyW107XG59O1xuXG5leHBvcnQgdHlwZSBPcmRlcnNQb3N0UXVlcnlSZXNwb25zZSA9IHsgb3JkZXI6IFNlcmlhbGl6ZWRPcmRlclYyIH07XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPcmRlclR5cGUiLCJjb3ZfMWlsMHBndzQzeiIsInMiLCJmIiwiYiIsImV4cG9ydHMiXSwic291cmNlcyI6WyIvVXNlcnMvcmcvZGV2L29wZW5zZWEtanMvc3JjL29yZGVycy90eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNpY09yZGVyUGFyYW1ldGVyc1N0cnVjdCB9IGZyb20gXCJAb3BlbnNlYS9zZWFwb3J0LWpzL2xpYi90eXBlY2hhaW4tdHlwZXMvc2VhcG9ydC9jb250cmFjdHMvU2VhcG9ydFwiO1xuaW1wb3J0IHsgQWR2YW5jZWRPcmRlciwgT3JkZXJXaXRoQ291bnRlciB9IGZyb20gXCJAb3BlbnNlYS9zZWFwb3J0LWpzL2xpYi90eXBlc1wiO1xuaW1wb3J0IHsgT3BlblNlYUFjY291bnQsIE9yZGVyU2lkZSB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG4vLyBQcm90b2NvbCBkYXRhXG50eXBlIE9yZGVyUHJvdG9jb2xUb1Byb3RvY29sRGF0YSA9IHtcbiAgc2VhcG9ydDogT3JkZXJXaXRoQ291bnRlcjtcbn07XG5leHBvcnQgdHlwZSBPcmRlclByb3RvY29sID0ga2V5b2YgT3JkZXJQcm90b2NvbFRvUHJvdG9jb2xEYXRhO1xuZXhwb3J0IHR5cGUgUHJvdG9jb2xEYXRhID1cbiAgT3JkZXJQcm90b2NvbFRvUHJvdG9jb2xEYXRhW2tleW9mIE9yZGVyUHJvdG9jb2xUb1Byb3RvY29sRGF0YV07XG5cbmV4cG9ydCBlbnVtIE9yZGVyVHlwZSB7XG4gIEJBU0lDID0gXCJiYXNpY1wiLFxuICBFTkdMSVNIID0gXCJlbmdsaXNoXCIsXG4gIENSSVRFUklBID0gXCJjcml0ZXJpYVwiLFxufVxuXG50eXBlIE9yZGVyRmVlID0ge1xuICBhY2NvdW50OiBPcGVuU2VhQWNjb3VudDtcbiAgYmFzaXNQb2ludHM6IHN0cmluZztcbn07XG5cbi8qKlxuICogVGhlIGxhdGVzdCBPcGVuU2VhIE9yZGVyIHNjaGVtYS5cbiAqL1xuZXhwb3J0IHR5cGUgT3JkZXJWMiA9IHtcbiAgLyoqIFRoZSBkYXRlIHRoZSBvcmRlciB3YXMgY3JlYXRlZC4gKi9cbiAgY3JlYXRlZERhdGU6IHN0cmluZztcbiAgLyoqIFRoZSBkYXRlIHRoZSBvcmRlciB3YXMgY2xvc2VkLiAqL1xuICBjbG9zaW5nRGF0ZTogc3RyaW5nIHwgbnVsbDtcbiAgLyoqIFRoZSBkYXRlIHRoZSBvcmRlciB3YXMgbGlzdGVkLiBPcmRlciBjYW4gYmUgY3JlYXRlZCBiZWZvcmUgdGhlIGxpc3RpbmcgdGltZS4gKi9cbiAgbGlzdGluZ1RpbWU6IG51bWJlcjtcbiAgLyoqIFRoZSBkYXRlIHRoZSBvcmRlciBleHBpcmVzLiAqL1xuICBleHBpcmF0aW9uVGltZTogbnVtYmVyO1xuICAvKiogVGhlIGhhc2ggb2YgdGhlIG9yZGVyLiAqL1xuICBvcmRlckhhc2g6IHN0cmluZyB8IG51bGw7XG4gIC8qKiBUaGUgYWNjb3VudCB0aGF0IGNyZWF0ZWQgdGhlIG9yZGVyLiAqL1xuICBtYWtlcjogT3BlblNlYUFjY291bnQ7XG4gIC8qKiBUaGUgYWNjb3VudCB0aGF0IGZpbGxlZCB0aGUgb3JkZXIuICovXG4gIHRha2VyOiBPcGVuU2VhQWNjb3VudCB8IG51bGw7XG4gIC8qKiBUaGUgcHJvdG9jb2wgZGF0YSBmb3IgdGhlIG9yZGVyLiBPbmx5ICdzZWFwb3J0JyBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLiAqL1xuICBwcm90b2NvbERhdGE6IFByb3RvY29sRGF0YTtcbiAgLyoqIFRoZSBjb250cmFjdCBhZGRyZXNzIG9mIHRoZSBwcm90b2NvbC4gKi9cbiAgcHJvdG9jb2xBZGRyZXNzOiBzdHJpbmc7XG4gIC8qKiBUaGUgY3VycmVudCBwcmljZSBvZiB0aGUgb3JkZXIuICovXG4gIGN1cnJlbnRQcmljZTogYmlnaW50O1xuICAvKiogVGhlIG1ha2VyIGZlZXMgZm9yIHRoZSBvcmRlci4gKi9cbiAgbWFrZXJGZWVzOiBPcmRlckZlZVtdO1xuICAvKiogVGhlIHRha2VyIGZlZXMgZm9yIHRoZSBvcmRlci4gKi9cbiAgdGFrZXJGZWVzOiBPcmRlckZlZVtdO1xuICAvKiogVGhlIHNpZGUgb2YgdGhlIG9yZGVyLiBBc2svQmlkICovXG4gIHNpZGU6IE9yZGVyU2lkZTtcbiAgLyoqIFRoZSB0eXBlIG9mIHRoZSBvcmRlci4gQmFzaWMvRW5nbGlzaC9Dcml0ZXJpYSAqL1xuICBvcmRlclR5cGU6IE9yZGVyVHlwZTtcbiAgLyoqIFdoZXRoZXIgb3Igbm90IHRoZSBtYWtlciBoYXMgY2FuY2VsbGVkIHRoZSBvcmRlci4gKi9cbiAgY2FuY2VsbGVkOiBib29sZWFuO1xuICAvKiogV2hldGhlciBvciBub3QgdGhlIG9yZGVyIGlzIGZpbmFsaXplZC4gKi9cbiAgZmluYWxpemVkOiBib29sZWFuO1xuICAvKiogV2hldGhlciBvciBub3QgdGhlIG9yZGVyIGlzIG1hcmtlZCBpbnZhbGlkIGFuZCB0aGVyZWZvcmUgbm90IGZpbGxhYmxlLiAqL1xuICBtYXJrZWRJbnZhbGlkOiBib29sZWFuO1xuICAvKiogVGhlIHNpZ25hdHVyZSB0aGUgb3JkZXIgaXMgc2lnbmVkIHdpdGguICovXG4gIGNsaWVudFNpZ25hdHVyZTogc3RyaW5nIHwgbnVsbDtcbiAgLyoqIEFtb3VudCBvZiBpdGVtcyBsZWZ0IGluIHRoZSBvcmRlciB3aGljaCBjYW4gYmUgdGFrZW4uICovXG4gIHJlbWFpbmluZ1F1YW50aXR5OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBGdWxmaWxsbWVudERhdGFSZXNwb25zZSA9IHtcbiAgcHJvdG9jb2w6IHN0cmluZztcbiAgZnVsZmlsbG1lbnRfZGF0YTogRnVsZmlsbG1lbnREYXRhO1xufTtcblxudHlwZSBGdWxmaWxsbWVudERhdGEgPSB7XG4gIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbjtcbiAgb3JkZXJzOiBQcm90b2NvbERhdGFbXTtcbn07XG5cbnR5cGUgVHJhbnNhY3Rpb24gPSB7XG4gIGZ1bmN0aW9uOiBzdHJpbmc7XG4gIGNoYWluOiBudW1iZXI7XG4gIHRvOiBzdHJpbmc7XG4gIHZhbHVlOiBudW1iZXI7XG4gIGlucHV0X2RhdGE6IHtcbiAgICBvcmRlcnM6IE9yZGVyV2l0aENvdW50ZXJbXSB8IEFkdmFuY2VkT3JkZXJbXSB8IEJhc2ljT3JkZXJQYXJhbWV0ZXJzU3RydWN0W107XG4gIH07XG59O1xuXG4vLyBBUEkgcXVlcnkgdHlwZXNcbnR5cGUgT3Blbk9yZGVyT3JkZXJpbmdPcHRpb24gPSBcImNyZWF0ZWRfZGF0ZVwiIHwgXCJldGhfcHJpY2VcIjtcbnR5cGUgT3JkZXJCeURpcmVjdGlvbiA9IFwiYXNjXCIgfCBcImRlc2NcIjtcblxuZXhwb3J0IHR5cGUgT3JkZXJBUElPcHRpb25zID0ge1xuICBwcm90b2NvbD86IE9yZGVyUHJvdG9jb2w7XG4gIHByb3RvY29sQWRkcmVzcz86IHN0cmluZztcbiAgc2lkZTogT3JkZXJTaWRlO1xufTtcblxuZXhwb3J0IHR5cGUgT3JkZXJzUXVlcnlPcHRpb25zID0gT3JkZXJBUElPcHRpb25zICYge1xuICBsaW1pdD86IG51bWJlcjtcbiAgY3Vyc29yPzogc3RyaW5nO1xuICBuZXh0Pzogc3RyaW5nO1xuXG4gIHBheW1lbnRUb2tlbkFkZHJlc3M/OiBzdHJpbmc7XG4gIG1ha2VyPzogc3RyaW5nO1xuICB0YWtlcj86IHN0cmluZztcbiAgb3duZXI/OiBzdHJpbmc7XG4gIGxpc3RlZEFmdGVyPzogbnVtYmVyIHwgc3RyaW5nO1xuICBsaXN0ZWRCZWZvcmU/OiBudW1iZXIgfCBzdHJpbmc7XG4gIHRva2VuSWQ/OiBzdHJpbmc7XG4gIHRva2VuSWRzPzogc3RyaW5nW107XG4gIGFzc2V0Q29udHJhY3RBZGRyZXNzPzogc3RyaW5nO1xuICBvcmRlckJ5PzogT3Blbk9yZGVyT3JkZXJpbmdPcHRpb247XG4gIG9yZGVyRGlyZWN0aW9uPzogT3JkZXJCeURpcmVjdGlvbjtcbiAgb25seUVuZ2xpc2g/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgU2VyaWFsaXplZE9yZGVyVjIgPSB7XG4gIGNyZWF0ZWRfZGF0ZTogc3RyaW5nO1xuICBjbG9zaW5nX2RhdGU6IHN0cmluZyB8IG51bGw7XG4gIGxpc3RpbmdfdGltZTogbnVtYmVyO1xuICBleHBpcmF0aW9uX3RpbWU6IG51bWJlcjtcbiAgb3JkZXJfaGFzaDogc3RyaW5nIHwgbnVsbDtcbiAgbWFrZXI6IHVua25vd247XG4gIHRha2VyOiB1bmtub3duIHwgbnVsbDtcbiAgcHJvdG9jb2xfZGF0YTogUHJvdG9jb2xEYXRhO1xuICBwcm90b2NvbF9hZGRyZXNzOiBzdHJpbmc7XG4gIGN1cnJlbnRfcHJpY2U6IHN0cmluZztcbiAgbWFrZXJfZmVlczoge1xuICAgIGFjY291bnQ6IHVua25vd247XG4gICAgYmFzaXNfcG9pbnRzOiBzdHJpbmc7XG4gIH1bXTtcbiAgdGFrZXJfZmVlczoge1xuICAgIGFjY291bnQ6IHVua25vd247XG4gICAgYmFzaXNfcG9pbnRzOiBzdHJpbmc7XG4gIH1bXTtcbiAgc2lkZTogT3JkZXJTaWRlO1xuICBvcmRlcl90eXBlOiBPcmRlclR5cGU7XG4gIGNhbmNlbGxlZDogYm9vbGVhbjtcbiAgZmluYWxpemVkOiBib29sZWFuO1xuICBtYXJrZWRfaW52YWxpZDogYm9vbGVhbjtcbiAgY2xpZW50X3NpZ25hdHVyZTogc3RyaW5nIHwgbnVsbDtcbiAgcmVtYWluaW5nX3F1YW50aXR5OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBRdWVyeUN1cnNvcnMgPSB7XG4gIG5leHQ6IHN0cmluZyB8IG51bGw7XG4gIHByZXZpb3VzOiBzdHJpbmcgfCBudWxsO1xufTtcblxuZXhwb3J0IHR5cGUgT3JkZXJzUXVlcnlSZXNwb25zZSA9IFF1ZXJ5Q3Vyc29ycyAmIHtcbiAgb3JkZXJzOiBTZXJpYWxpemVkT3JkZXJWMltdO1xufTtcblxuZXhwb3J0IHR5cGUgT3JkZXJzUG9zdFF1ZXJ5UmVzcG9uc2UgPSB7IG9yZGVyOiBTZXJpYWxpemVkT3JkZXJWMiB9O1xuIl0sIm1hcHBpbmdzIjoiOzZOQVlBLEdBQVksQ0FBQUEsU0FJWCxDQUFBQyxjQUFBLEdBQUFDLENBQUEsTUFKRCxVQUFZRixTQUFTLEVBQUFDLGNBQUEsR0FBQUUsQ0FBQSxNQUFBRixjQUFBLEdBQUFDLENBQUEsTUFDbkJGLFNBQUEsaUJBQWUsQ0FBQUMsY0FBQSxHQUFBQyxDQUFBLE1BQ2ZGLFNBQUEscUJBQW1CLENBQUFDLGNBQUEsR0FBQUMsQ0FBQSxNQUNuQkYsU0FBQSx1QkFBcUIsQ0FDdkIsQ0FBQyxFQUpXLENBQUFDLGNBQUEsR0FBQUcsQ0FBQSxTQUFBSixTQUFTLElBQUFDLGNBQUEsR0FBQUcsQ0FBQSxTQUFBQyxPQUFBLENBQUFMLFNBQUEsQ0FBVEEsU0FBUyxNIiwiaWdub3JlTGlzdCI6W119