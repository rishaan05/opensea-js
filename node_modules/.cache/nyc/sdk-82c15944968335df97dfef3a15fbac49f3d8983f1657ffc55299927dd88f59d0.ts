"use strict";function cov_i250qerm0(){var path="/Users/rg/dev/opensea-js/src/sdk.ts";var hash="3860b26b3c9bfdb4b0159a902226fc5c50c0f739";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/src/sdk.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:28}},"2":{start:{line:4,column:21},end:{line:4,column:38}},"3":{start:{line:5,column:21},end:{line:5,column:51}},"4":{start:{line:6,column:20},end:{line:6,column:64}},"5":{start:{line:7,column:17},end:{line:7,column:34}},"6":{start:{line:8,column:14},end:{line:8,column:34}},"7":{start:{line:9,column:20},end:{line:9,column:42}},"8":{start:{line:10,column:26},end:{line:10,column:61}},"9":{start:{line:11,column:16},end:{line:11,column:41}},"10":{start:{line:12,column:16},end:{line:12,column:41}},"11":{start:{line:13,column:20},end:{line:13,column:52}},"12":{start:{line:14,column:16},end:{line:14,column:34}},"13":{start:{line:15,column:16},end:{line:15,column:40}},"14":{start:{line:31,column:8},end:{line:31,column:46}},"15":{start:{line:32,column:8},end:{line:34,column:10}},"16":{start:{line:33,column:12},end:{line:33,column:89}},"17":{start:{line:36,column:8},end:{line:36,column:69}},"18":{start:{line:37,column:8},end:{line:37,column:37}},"19":{start:{line:38,column:8},end:{line:38,column:51}},"20":{start:{line:39,column:8},end:{line:40,column:30}},"21":{start:{line:41,column:8},end:{line:41,column:67}},"22":{start:{line:43,column:8},end:{line:49,column:11}},"23":{start:{line:51,column:8},end:{line:53,column:11}},"24":{start:{line:55,column:8},end:{line:55,column:43}},"25":{start:{line:57,column:8},end:{line:57,column:47}},"26":{start:{line:57,column:42},end:{line:57,column:45}},"27":{start:{line:59,column:8},end:{line:71,column:9}},"28":{start:{line:60,column:32},end:{line:60,column:85}},"29":{start:{line:61,column:12},end:{line:61,column:63}},"30":{start:{line:65,column:12},end:{line:70,column:13}},"31":{start:{line:69,column:16},end:{line:69,column:37}},"32":{start:{line:80,column:8},end:{line:85,column:9}},"33":{start:{line:81,column:12},end:{line:81,column:48}},"34":{start:{line:84,column:12},end:{line:84,column:55}},"35":{start:{line:93,column:8},end:{line:93,column:54}},"36":{start:{line:101,column:8},end:{line:101,column:48}},"37":{start:{line:111,column:8},end:{line:111,column:62}},"38":{start:{line:112,column:22},end:{line:112,column:102}},"39":{start:{line:113,column:8},end:{line:113,column:85}},"40":{start:{line:114,column:29},end:{line:114,column:147}},"41":{start:{line:115,column:8},end:{line:122,column:9}},"42":{start:{line:116,column:32},end:{line:116,column:69}},"43":{start:{line:117,column:12},end:{line:117,column:104}},"44":{start:{line:120,column:12},end:{line:120,column:33}},"45":{start:{line:121,column:12},end:{line:121,column:91}},"46":{start:{line:132,column:8},end:{line:132,column:62}},"47":{start:{line:133,column:23},end:{line:133,column:103}},"48":{start:{line:134,column:8},end:{line:134,column:81}},"49":{start:{line:135,column:29},end:{line:135,column:155}},"50":{start:{line:136,column:8},end:{line:143,column:9}},"51":{start:{line:137,column:32},end:{line:137,column:67}},"52":{start:{line:138,column:12},end:{line:138,column:111}},"53":{start:{line:141,column:12},end:{line:141,column:33}},"54":{start:{line:142,column:12},end:{line:142,column:91}},"55":{start:{line:146,column:29},end:{line:146,column:44}},"56":{start:{line:147,column:8},end:{line:149,column:9}},"57":{start:{line:148,column:12},end:{line:148,column:74}},"58":{start:{line:148,column:60},end:{line:148,column:72}},"59":{start:{line:150,column:42},end:{line:150,column:94}},"60":{start:{line:151,column:34},end:{line:151,column:93}},"61":{start:{line:152,column:37},end:{line:159,column:9}},"62":{start:{line:153,column:12},end:{line:158,column:14}},"63":{start:{line:160,column:35},end:{line:160,column:37}},"64":{start:{line:161,column:8},end:{line:163,column:9}},"65":{start:{line:162,column:12},end:{line:162,column:85}},"66":{start:{line:164,column:8},end:{line:168,column:9}},"67":{start:{line:165,column:12},end:{line:167,column:13}},"68":{start:{line:166,column:16},end:{line:166,column:114}},"69":{start:{line:169,column:8},end:{line:169,column:34}},"70":{start:{line:172,column:8},end:{line:177,column:12}},"71":{start:{line:172,column:41},end:{line:177,column:9}},"72":{start:{line:201,column:8},end:{line:201,column:62}},"73":{start:{line:202,column:24},end:{line:202,column:80}},"74":{start:{line:203,column:40},end:{line:203,column:88}},"75":{start:{line:204,column:30},end:{line:204,column:184}},"76":{start:{line:205,column:27},end:{line:205,column:71}},"77":{start:{line:206,column:38},end:{line:211,column:10}},"78":{start:{line:212,column:8},end:{line:214,column:9}},"79":{start:{line:213,column:12},end:{line:213,column:43}},"80":{start:{line:215,column:38},end:{line:231,column:26}},"81":{start:{line:232,column:22},end:{line:232,column:47}},"82":{start:{line:233,column:8},end:{line:237,column:11}},"83":{start:{line:264,column:8},end:{line:264,column:62}},"84":{start:{line:265,column:24},end:{line:265,column:80}},"85":{start:{line:266,column:32},end:{line:266,column:80}},"86":{start:{line:267,column:8},end:{line:269,column:9}},"87":{start:{line:268,column:12},end:{line:268,column:89}},"88":{start:{line:270,column:40},end:{line:270,column:220}},"89":{start:{line:271,column:27},end:{line:271,column:71}},"90":{start:{line:272,column:38},end:{line:279,column:10}},"91":{start:{line:280,column:8},end:{line:282,column:9}},"92":{start:{line:281,column:12},end:{line:281,column:129}},"93":{start:{line:283,column:8},end:{line:290,column:9}},"94":{start:{line:284,column:12},end:{line:286,column:60}},"95":{start:{line:288,column:13},end:{line:290,column:9}},"96":{start:{line:289,column:12},end:{line:289,column:43}},"97":{start:{line:291,column:38},end:{line:302,column:26}},"98":{start:{line:303,column:22},end:{line:303,column:47}},"99":{start:{line:304,column:8},end:{line:308,column:11}},"100":{start:{line:328,column:8},end:{line:328,column:62}},"101":{start:{line:329,column:27},end:{line:329,column:71}},"102":{start:{line:330,column:33},end:{line:330,column:147}},"103":{start:{line:331,column:21},end:{line:331,column:72}},"104":{start:{line:332,column:43},end:{line:337,column:9}},"105":{start:{line:338,column:30},end:{line:338,column:181}},"106":{start:{line:339,column:38},end:{line:345,column:10}},"107":{start:{line:346,column:35},end:{line:349,column:9}},"108":{start:{line:350,column:24},end:{line:366,column:9}},"109":{start:{line:367,column:38},end:{line:367,column:98}},"110":{start:{line:368,column:22},end:{line:368,column:47}},"111":{start:{line:369,column:8},end:{line:369,column:90}},"112":{start:{line:382,column:8},end:{line:384,column:9}},"113":{start:{line:383,column:12},end:{line:383,column:90}},"114":{start:{line:385,column:29},end:{line:385,column:128}},"115":{start:{line:386,column:29},end:{line:386,column:101}},"116":{start:{line:387,column:24},end:{line:387,column:62}},"117":{start:{line:388,column:28},end:{line:399,column:23}},"118":{start:{line:400,column:35},end:{line:400,column:59}},"119":{start:{line:401,column:8},end:{line:403,column:9}},"120":{start:{line:402,column:12},end:{line:402,column:59}},"121":{start:{line:404,column:8},end:{line:404,column:115}},"122":{start:{line:405,column:8},end:{line:405,column:39}},"123":{start:{line:422,column:8},end:{line:422,column:62}},"124":{start:{line:423,column:32},end:{line:423,column:79}},"125":{start:{line:424,column:8},end:{line:424,column:59}},"126":{start:{line:425,column:26},end:{line:425,column:61}},"127":{start:{line:426,column:21},end:{line:429,column:42}},"128":{start:{line:430,column:24},end:{line:430,column:33}},"129":{start:{line:431,column:29},end:{line:431,column:70}},"130":{start:{line:432,column:8},end:{line:442,column:9}},"131":{start:{line:433,column:27},end:{line:433,column:115}},"132":{start:{line:436,column:30},end:{line:436,column:76}},"133":{start:{line:437,column:12},end:{line:439,column:13}},"134":{start:{line:438,column:16},end:{line:438,column:58}},"135":{start:{line:440,column:30},end:{line:440,column:73}},"136":{start:{line:441,column:12},end:{line:441,column:47}},"137":{start:{line:443,column:33},end:{line:443,column:73}},"138":{start:{line:444,column:8},end:{line:454,column:9}},"139":{start:{line:445,column:12},end:{line:447,column:13}},"140":{start:{line:446,column:16},end:{line:446,column:97}},"141":{start:{line:448,column:12},end:{line:453,column:15}},"142":{start:{line:455,column:24},end:{line:455,column:56}},"143":{start:{line:456,column:38},end:{line:463,column:10}},"144":{start:{line:464,column:28},end:{line:464,column:53}},"145":{start:{line:465,column:32},end:{line:465,column:82}},"146":{start:{line:466,column:8},end:{line:468,column:9}},"147":{start:{line:467,column:12},end:{line:467,column:56}},"148":{start:{line:469,column:8},end:{line:469,column:107}},"149":{start:{line:470,column:8},end:{line:470,column:31}},"150":{start:{line:477,column:43},end:{line:477,column:86}},"151":{start:{line:478,column:8},end:{line:485,column:9}},"152":{start:{line:480,column:16},end:{line:480,column:41}},"153":{start:{line:482,column:16},end:{line:482,column:41}},"154":{start:{line:484,column:16},end:{line:484,column:84}},"155":{start:{line:498,column:24},end:{line:498,column:56}},"156":{start:{line:499,column:28},end:{line:501,column:23}},"157":{start:{line:502,column:8},end:{line:502,column:32}},"158":{start:{line:515,column:8},end:{line:515,column:62}},"159":{start:{line:516,column:8},end:{line:516,column:65}},"160":{start:{line:517,column:8},end:{line:517,column:90}},"161":{start:{line:519,column:32},end:{line:524,column:10}},"162":{start:{line:526,column:8},end:{line:526,column:107}},"163":{start:{line:529,column:43},end:{line:529,column:86}},"164":{start:{line:530,column:8},end:{line:537,column:9}},"165":{start:{line:532,column:16},end:{line:532,column:29}},"166":{start:{line:534,column:16},end:{line:534,column:29}},"167":{start:{line:536,column:16},end:{line:536,column:75}},"168":{start:{line:544,column:24},end:{line:544,column:54}},"169":{start:{line:545,column:21},end:{line:545,column:30}},"170":{start:{line:546,column:24},end:{line:546,column:64}},"171":{start:{line:547,column:8},end:{line:549,column:9}},"172":{start:{line:548,column:12},end:{line:548,column:105}},"173":{start:{line:550,column:8},end:{line:550,column:188}},"174":{start:{line:568,column:8},end:{line:570,column:9}},"175":{start:{line:569,column:12},end:{line:569,column:98}},"176":{start:{line:571,column:8},end:{line:571,column:97}},"177":{start:{line:586,column:8},end:{line:586,column:65}},"178":{start:{line:587,column:24},end:{line:587,column:62}},"179":{start:{line:588,column:8},end:{line:599,column:9}},"180":{start:{line:589,column:28},end:{line:591,column:29}},"181":{start:{line:592,column:12},end:{line:592,column:29}},"182":{start:{line:595,column:12},end:{line:597,column:13}},"183":{start:{line:596,column:16},end:{line:596,column:29}},"184":{start:{line:598,column:12},end:{line:598,column:24}},"185":{start:{line:611,column:8},end:{line:640,column:9}},"186":{start:{line:613,column:33},end:{line:613,column:102}},"187":{start:{line:614,column:16},end:{line:614,column:75}},"188":{start:{line:617,column:16},end:{line:619,column:17}},"189":{start:{line:618,column:20},end:{line:618,column:78}},"190":{start:{line:620,column:33},end:{line:620,column:104}},"191":{start:{line:621,column:16},end:{line:621,column:90}},"192":{start:{line:624,column:16},end:{line:626,column:17}},"193":{start:{line:625,column:20},end:{line:625,column:77}},"194":{start:{line:627,column:33},end:{line:627,column:103}},"195":{start:{line:628,column:16},end:{line:636,column:17}},"196":{start:{line:629,column:34},end:{line:629,column:82}},"197":{start:{line:630,column:20},end:{line:630,column:87}},"198":{start:{line:634,column:20},end:{line:634,column:91}},"199":{start:{line:635,column:20},end:{line:635,column:30}},"200":{start:{line:639,column:16},end:{line:639,column:77}},"201":{start:{line:652,column:8},end:{line:652,column:59}},"202":{start:{line:653,column:8},end:{line:653,column:56}},"203":{start:{line:655,column:8},end:{line:685,column:9}},"204":{start:{line:657,column:16},end:{line:659,column:17}},"205":{start:{line:658,column:20},end:{line:658,column:73}},"206":{start:{line:660,column:33},end:{line:660,column:111}},"207":{start:{line:661,column:16},end:{line:661,column:78}},"208":{start:{line:662,column:16},end:{line:662,column:22}},"209":{start:{line:665,column:16},end:{line:667,column:17}},"210":{start:{line:666,column:20},end:{line:666,column:76}},"211":{start:{line:668,column:16},end:{line:670,column:17}},"212":{start:{line:669,column:20},end:{line:669,column:75}},"213":{start:{line:671,column:33},end:{line:671,column:113}},"214":{start:{line:672,column:16},end:{line:672,column:118}},"215":{start:{line:673,column:16},end:{line:673,column:22}},"216":{start:{line:676,column:16},end:{line:678,column:17}},"217":{start:{line:677,column:20},end:{line:677,column:75}},"218":{start:{line:679,column:33},end:{line:679,column:112}},"219":{start:{line:680,column:16},end:{line:680,column:102}},"220":{start:{line:681,column:16},end:{line:681,column:22}},"221":{start:{line:684,column:16},end:{line:684,column:75}},"222":{start:{line:686,column:8},end:{line:696,column:9}},"223":{start:{line:687,column:40},end:{line:687,column:57}},"224":{start:{line:688,column:12},end:{line:688,column:119}},"225":{start:{line:691,column:12},end:{line:691,column:33}},"226":{start:{line:692,column:12},end:{line:695,column:15}},"227":{start:{line:709,column:8},end:{line:709,column:67}},"228":{start:{line:710,column:8},end:{line:710,column:65}},"229":{start:{line:711,column:8},end:{line:714,column:11}},"230":{start:{line:715,column:24},end:{line:715,column:62}},"231":{start:{line:716,column:28},end:{line:718,column:23}},"232":{start:{line:719,column:8},end:{line:719,column:108}},"233":{start:{line:720,column:8},end:{line:720,column:32}},"234":{start:{line:731,column:8},end:{line:731,column:50}},"235":{start:{line:732,column:24},end:{line:732,column:68}},"236":{start:{line:733,column:23},end:{line:733,column:25}},"237":{start:{line:734,column:8},end:{line:743,column:9}},"238":{start:{line:735,column:12},end:{line:742,column:13}},"239":{start:{line:736,column:16},end:{line:736,column:74}},"240":{start:{line:739,column:37},end:{line:739,column:81}},"241":{start:{line:740,column:16},end:{line:740,column:87}},"242":{start:{line:741,column:16},end:{line:741,column:49}},"243":{start:{line:744,column:31},end:{line:744,column:91}},"244":{start:{line:745,column:29},end:{line:747,column:23}},"245":{start:{line:748,column:29},end:{line:748,column:92}},"246":{start:{line:749,column:26},end:{line:749,column:40}},"247":{start:{line:750,column:25},end:{line:750,column:37}},"248":{start:{line:752,column:8},end:{line:754,column:9}},"249":{start:{line:753,column:12},end:{line:753,column:68}},"250":{start:{line:755,column:8},end:{line:757,column:9}},"251":{start:{line:756,column:12},end:{line:756,column:79}},"252":{start:{line:758,column:8},end:{line:760,column:9}},"253":{start:{line:759,column:12},end:{line:759,column:88}},"254":{start:{line:761,column:8},end:{line:763,column:9}},"255":{start:{line:762,column:12},end:{line:762,column:90}},"256":{start:{line:764,column:8},end:{line:764,column:39}},"257":{start:{line:767,column:8},end:{line:767,column:40}},"258":{start:{line:771,column:34},end:{line:771,column:36}},"259":{start:{line:772,column:8},end:{line:781,column:9}},"260":{start:{line:773,column:12},end:{line:773,column:67}},"261":{start:{line:775,column:13},end:{line:781,column:9}},"262":{start:{line:776,column:30},end:{line:776,column:103}},"263":{start:{line:776,column:90},end:{line:776,column:102}},"264":{start:{line:777,column:12},end:{line:777,column:49}},"265":{start:{line:779,column:13},end:{line:781,column:9}},"266":{start:{line:780,column:12},end:{line:780,column:78}},"267":{start:{line:782,column:8},end:{line:782,column:33}},"268":{start:{line:789,column:42},end:{line:789,column:84}},"269":{start:{line:790,column:34},end:{line:790,column:68}},"270":{start:{line:791,column:8},end:{line:793,column:9}},"271":{start:{line:792,column:12},end:{line:792,column:19}},"272":{start:{line:794,column:8},end:{line:794,column:219}},"273":{start:{line:803,column:37},end:{line:803,column:63}},"274":{start:{line:804,column:8},end:{line:804,column:59}},"275":{start:{line:805,column:8},end:{line:818,column:9}},"276":{start:{line:806,column:12},end:{line:806,column:87}},"277":{start:{line:807,column:12},end:{line:807,column:68}},"278":{start:{line:808,column:12},end:{line:808,column:65}},"279":{start:{line:809,column:12},end:{line:809,column:89}},"280":{start:{line:812,column:12},end:{line:812,column:62}},"281":{start:{line:813,column:12},end:{line:816,column:15}},"282":{start:{line:817,column:12},end:{line:817,column:24}},"283":{start:{line:821,column:0},end:{line:821,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:58},end:{line:72,column:5}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:32,column:47},end:{line:32,column:48}},loc:{start:{line:32,column:72},end:{line:34,column:9}},line:32},"2":{name:"(anonymous_2)",decl:{start:{line:57,column:33},end:{line:57,column:34}},loc:{start:{line:57,column:42},end:{line:57,column:45}},line:57},"3":{name:"(anonymous_3)",decl:{start:{line:79,column:4},end:{line:79,column:5}},loc:{start:{line:79,column:47},end:{line:86,column:5}},line:79},"4":{name:"(anonymous_4)",decl:{start:{line:92,column:4},end:{line:92,column:5}},loc:{start:{line:92,column:36},end:{line:94,column:5}},line:92},"5":{name:"(anonymous_5)",decl:{start:{line:100,column:4},end:{line:100,column:5}},loc:{start:{line:100,column:30},end:{line:102,column:5}},line:100},"6":{name:"(anonymous_6)",decl:{start:{line:110,column:4},end:{line:110,column:5}},loc:{start:{line:110,column:52},end:{line:123,column:5}},line:110},"7":{name:"(anonymous_7)",decl:{start:{line:131,column:4},end:{line:131,column:5}},loc:{start:{line:131,column:55},end:{line:144,column:5}},line:131},"8":{name:"(anonymous_8)",decl:{start:{line:145,column:4},end:{line:145,column:5}},loc:{start:{line:145,column:116},end:{line:170,column:5}},line:145},"9":{name:"(anonymous_9)",decl:{start:{line:148,column:51},end:{line:148,column:52}},loc:{start:{line:148,column:60},end:{line:148,column:72}},line:148},"10":{name:"(anonymous_10)",decl:{start:{line:152,column:37},end:{line:152,column:38}},loc:{start:{line:152,column:65},end:{line:159,column:9}},line:152},"11":{name:"(anonymous_11)",decl:{start:{line:171,column:4},end:{line:171,column:5}},loc:{start:{line:171,column:39},end:{line:178,column:5}},line:171},"12":{name:"(anonymous_12)",decl:{start:{line:172,column:24},end:{line:172,column:25}},loc:{start:{line:172,column:41},end:{line:177,column:9}},line:172},"13":{name:"(anonymous_13)",decl:{start:{line:200,column:4},end:{line:200,column:5}},loc:{start:{line:200,column:234},end:{line:238,column:5}},line:200},"14":{name:"(anonymous_14)",decl:{start:{line:263,column:4},end:{line:263,column:5}},loc:{start:{line:263,column:279},end:{line:309,column:5}},line:263},"15":{name:"(anonymous_15)",decl:{start:{line:327,column:4},end:{line:327,column:5}},loc:{start:{line:327,column:270},end:{line:370,column:5}},line:327},"16":{name:"(anonymous_16)",decl:{start:{line:381,column:4},end:{line:381,column:5}},loc:{start:{line:381,column:77},end:{line:406,column:5}},line:381},"17":{name:"(anonymous_17)",decl:{start:{line:421,column:4},end:{line:421,column:5}},loc:{start:{line:421,column:88},end:{line:471,column:5}},line:421},"18":{name:"(anonymous_18)",decl:{start:{line:476,column:4},end:{line:476,column:5}},loc:{start:{line:476,column:32},end:{line:486,column:5}},line:476},"19":{name:"(anonymous_19)",decl:{start:{line:497,column:4},end:{line:497,column:5}},loc:{start:{line:497,column:138},end:{line:503,column:5}},line:497},"20":{name:"(anonymous_20)",decl:{start:{line:514,column:4},end:{line:514,column:5}},loc:{start:{line:514,column:58},end:{line:527,column:5}},line:514},"21":{name:"(anonymous_21)",decl:{start:{line:528,column:4},end:{line:528,column:5}},loc:{start:{line:528,column:40},end:{line:538,column:5}},line:528},"22":{name:"(anonymous_22)",decl:{start:{line:543,column:4},end:{line:543,column:5}},loc:{start:{line:543,column:66},end:{line:551,column:5}},line:543},"23":{name:"(anonymous_23)",decl:{start:{line:567,column:4},end:{line:567,column:5}},loc:{start:{line:567,column:131},end:{line:572,column:5}},line:567},"24":{name:"(anonymous_24)",decl:{start:{line:585,column:4},end:{line:585,column:5}},loc:{start:{line:585,column:57},end:{line:600,column:5}},line:585},"25":{name:"(anonymous_25)",decl:{start:{line:610,column:4},end:{line:610,column:5}},loc:{start:{line:610,column:49},end:{line:641,column:5}},line:610},"26":{name:"(anonymous_26)",decl:{start:{line:651,column:4},end:{line:651,column:5}},loc:{start:{line:651,column:74},end:{line:697,column:5}},line:651},"27":{name:"(anonymous_27)",decl:{start:{line:708,column:4},end:{line:708,column:5}},loc:{start:{line:708,column:38},end:{line:721,column:5}},line:708},"28":{name:"(anonymous_28)",decl:{start:{line:730,column:4},end:{line:730,column:5}},loc:{start:{line:730,column:95},end:{line:765,column:5}},line:730},"29":{name:"(anonymous_29)",decl:{start:{line:766,column:4},end:{line:766,column:5}},loc:{start:{line:766,column:27},end:{line:768,column:5}},line:766},"30":{name:"(anonymous_30)",decl:{start:{line:770,column:4},end:{line:770,column:5}},loc:{start:{line:770,column:34},end:{line:783,column:5}},line:770},"31":{name:"(anonymous_31)",decl:{start:{line:776,column:80},end:{line:776,column:81}},loc:{start:{line:776,column:90},end:{line:776,column:102}},line:776},"32":{name:"(anonymous_32)",decl:{start:{line:788,column:4},end:{line:788,column:5}},loc:{start:{line:788,column:53},end:{line:795,column:5}},line:788},"33":{name:"(anonymous_33)",decl:{start:{line:802,column:4},end:{line:802,column:5}},loc:{start:{line:802,column:67},end:{line:819,column:5}},line:802}},branchMap:{"0":{loc:{start:{line:29,column:34},end:{line:29,column:48}},type:"default-arg",locations:[{start:{line:29,column:46},end:{line:29,column:48}}],line:29},"1":{loc:{start:{line:36,column:8},end:{line:36,column:68}},type:"binary-expr",locations:[{start:{line:36,column:8},end:{line:36,column:23}},{start:{line:36,column:28},end:{line:36,column:67}}],line:36},"2":{loc:{start:{line:39,column:25},end:{line:40,column:28}},type:"binary-expr",locations:[{start:{line:39,column:25},end:{line:39,column:50}},{start:{line:40,column:12},end:{line:40,column:28}}],line:39},"3":{loc:{start:{line:41,column:33},end:{line:41,column:66}},type:"binary-expr",locations:[{start:{line:41,column:33},end:{line:41,column:49}},{start:{line:41,column:53},end:{line:41,column:66}}],line:41},"4":{loc:{start:{line:57,column:22},end:{line:57,column:46}},type:"binary-expr",locations:[{start:{line:57,column:22},end:{line:57,column:28}},{start:{line:57,column:33},end:{line:57,column:45}}],line:57},"5":{loc:{start:{line:65,column:12},end:{line:70,column:13}},type:"if",locations:[{start:{line:65,column:12},end:{line:70,column:13}},{start:{line:68,column:17},end:{line:70,column:13}}],line:65},"6":{loc:{start:{line:79,column:33},end:{line:79,column:45}},type:"default-arg",locations:[{start:{line:79,column:40},end:{line:79,column:45}}],line:79},"7":{loc:{start:{line:80,column:8},end:{line:85,column:9}},type:"if",locations:[{start:{line:80,column:8},end:{line:85,column:9}},{start:{line:83,column:13},end:{line:85,column:9}}],line:80},"8":{loc:{start:{line:147,column:8},end:{line:149,column:9}},type:"if",locations:[{start:{line:147,column:8},end:{line:149,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:147},"9":{loc:{start:{line:156,column:64},end:{line:156,column:88}},type:"binary-expr",locations:[{start:{line:156,column:64},end:{line:156,column:73}},{start:{line:156,column:77},end:{line:156,column:88}}],line:156},"10":{loc:{start:{line:161,column:8},end:{line:163,column:9}},type:"if",locations:[{start:{line:161,column:8},end:{line:163,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:161},"11":{loc:{start:{line:164,column:8},end:{line:168,column:9}},type:"if",locations:[{start:{line:164,column:8},end:{line:168,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:164},"12":{loc:{start:{line:171,column:22},end:{line:171,column:37}},type:"default-arg",locations:[{start:{line:171,column:35},end:{line:171,column:37}}],line:171},"13":{loc:{start:{line:175,column:24},end:{line:175,column:51}},type:"binary-expr",locations:[{start:{line:175,column:24},end:{line:175,column:38}},{start:{line:175,column:42},end:{line:175,column:51}}],line:175},"14":{loc:{start:{line:176,column:20},end:{line:176,column:55}},type:"binary-expr",locations:[{start:{line:176,column:20},end:{line:176,column:48}},{start:{line:176,column:52},end:{line:176,column:55}}],line:176},"15":{loc:{start:{line:200,column:60},end:{line:200,column:72}},type:"default-arg",locations:[{start:{line:200,column:71},end:{line:200,column:72}}],line:200},"16":{loc:{start:{line:200,column:104},end:{line:200,column:165}},type:"default-arg",locations:[{start:{line:200,column:126},end:{line:200,column:165}}],line:200},"17":{loc:{start:{line:200,column:167},end:{line:200,column:200}},type:"default-arg",locations:[{start:{line:200,column:196},end:{line:200,column:200}}],line:200},"18":{loc:{start:{line:200,column:202},end:{line:200,column:229}},type:"default-arg",locations:[{start:{line:200,column:209},end:{line:200,column:229}}],line:200},"19":{loc:{start:{line:203,column:72},end:{line:203,column:85}},type:"binary-expr",locations:[{start:{line:203,column:72},end:{line:203,column:80}},{start:{line:203,column:84},end:{line:203,column:85}}],line:203},"20":{loc:{start:{line:204,column:107},end:{line:204,column:170}},type:"binary-expr",locations:[{start:{line:204,column:107},end:{line:204,column:121}},{start:{line:204,column:125},end:{line:204,column:170}}],line:204},"21":{loc:{start:{line:212,column:8},end:{line:214,column:9}},type:"if",locations:[{start:{line:212,column:8},end:{line:214,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:212},"22":{loc:{start:{line:223,column:21},end:{line:225,column:74}},type:"cond-expr",locations:[{start:{line:224,column:18},end:{line:224,column:51}},{start:{line:225,column:18},end:{line:225,column:74}}],line:223},"23":{loc:{start:{line:228,column:25},end:{line:228,column:34}},type:"binary-expr",locations:[{start:{line:228,column:25},end:{line:228,column:29}},{start:{line:228,column:33},end:{line:228,column:34}}],line:228},"24":{loc:{start:{line:263,column:73},end:{line:263,column:85}},type:"default-arg",locations:[{start:{line:263,column:84},end:{line:263,column:85}}],line:263},"25":{loc:{start:{line:263,column:130},end:{line:263,column:179}},type:"default-arg",locations:[{start:{line:263,column:152},end:{line:263,column:179}}],line:263},"26":{loc:{start:{line:263,column:211},end:{line:263,column:245}},type:"default-arg",locations:[{start:{line:263,column:240},end:{line:263,column:245}}],line:263},"27":{loc:{start:{line:263,column:247},end:{line:263,column:274}},type:"default-arg",locations:[{start:{line:263,column:254},end:{line:263,column:274}}],line:263},"28":{loc:{start:{line:266,column:64},end:{line:266,column:77}},type:"binary-expr",locations:[{start:{line:266,column:64},end:{line:266,column:72}},{start:{line:266,column:76},end:{line:266,column:77}}],line:266},"29":{loc:{start:{line:267,column:8},end:{line:269,column:9}},type:"if",locations:[{start:{line:267,column:8},end:{line:269,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:267},"30":{loc:{start:{line:267,column:12},end:{line:267,column:80}},type:"binary-expr",locations:[{start:{line:267,column:12},end:{line:267,column:26}},{start:{line:267,column:30},end:{line:267,column:80}}],line:267},"31":{loc:{start:{line:270,column:119},end:{line:270,column:182}},type:"binary-expr",locations:[{start:{line:270,column:119},end:{line:270,column:133}},{start:{line:270,column:137},end:{line:270,column:182}}],line:270},"32":{loc:{start:{line:270,column:197},end:{line:270,column:219}},type:"binary-expr",locations:[{start:{line:270,column:197},end:{line:270,column:206}},{start:{line:270,column:210},end:{line:270,column:219}}],line:270},"33":{loc:{start:{line:280,column:8},end:{line:282,column:9}},type:"if",locations:[{start:{line:280,column:8},end:{line:282,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:280},"34":{loc:{start:{line:283,column:8},end:{line:290,column:9}},type:"if",locations:[{start:{line:283,column:8},end:{line:290,column:9}},{start:{line:288,column:13},end:{line:290,column:9}}],line:283},"35":{loc:{start:{line:284,column:19},end:{line:286,column:59}},type:"cond-expr",locations:[{start:{line:285,column:18},end:{line:285,column:59}},{start:{line:286,column:18},end:{line:286,column:59}}],line:284},"36":{loc:{start:{line:288,column:13},end:{line:290,column:9}},type:"if",locations:[{start:{line:288,column:13},end:{line:290,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:288},"37":{loc:{start:{line:295,column:21},end:{line:296,column:72}},type:"binary-expr",locations:[{start:{line:295,column:21},end:{line:295,column:47}},{start:{line:296,column:16},end:{line:296,column:72}}],line:295},"38":{loc:{start:{line:299,column:25},end:{line:299,column:34}},type:"binary-expr",locations:[{start:{line:299,column:25},end:{line:299,column:29}},{start:{line:299,column:33},end:{line:299,column:34}}],line:299},"39":{loc:{start:{line:301,column:31},end:{line:301,column:60}},type:"cond-expr",locations:[{start:{line:301,column:48},end:{line:301,column:53}},{start:{line:301,column:56},end:{line:301,column:60}}],line:301},"40":{loc:{start:{line:327,column:114},end:{line:327,column:175}},type:"default-arg",locations:[{start:{line:327,column:136},end:{line:327,column:175}}],line:327},"41":{loc:{start:{line:327,column:177},end:{line:327,column:211}},type:"default-arg",locations:[{start:{line:327,column:206},end:{line:327,column:211}}],line:327},"42":{loc:{start:{line:327,column:213},end:{line:327,column:242}},type:"default-arg",locations:[{start:{line:327,column:238},end:{line:327,column:242}}],line:327},"43":{loc:{start:{line:338,column:109},end:{line:338,column:172}},type:"binary-expr",locations:[{start:{line:338,column:109},end:{line:338,column:123}},{start:{line:338,column:127},end:{line:338,column:172}}],line:338},"44":{loc:{start:{line:359,column:21},end:{line:360,column:72}},type:"binary-expr",locations:[{start:{line:359,column:21},end:{line:359,column:47}},{start:{line:360,column:16},end:{line:360,column:72}}],line:359},"45":{loc:{start:{line:363,column:25},end:{line:363,column:34}},type:"binary-expr",locations:[{start:{line:363,column:25},end:{line:363,column:29}},{start:{line:363,column:33},end:{line:363,column:34}}],line:363},"46":{loc:{start:{line:382,column:8},end:{line:384,column:9}},type:"if",locations:[{start:{line:382,column:8},end:{line:384,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:382},"47":{loc:{start:{line:401,column:8},end:{line:403,column:9}},type:"if",locations:[{start:{line:401,column:8},end:{line:403,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:401},"48":{loc:{start:{line:423,column:32},end:{line:423,column:79}},type:"binary-expr",locations:[{start:{line:423,column:32},end:{line:423,column:53}},{start:{line:423,column:57},end:{line:423,column:79}}],line:423},"49":{loc:{start:{line:425,column:26},end:{line:425,column:61}},type:"binary-expr",locations:[{start:{line:425,column:26},end:{line:425,column:41}},{start:{line:425,column:45},end:{line:425,column:61}}],line:425},"50":{loc:{start:{line:426,column:21},end:{line:429,column:42}},type:"binary-expr",locations:[{start:{line:426,column:21},end:{line:426,column:31}},{start:{line:427,column:13},end:{line:429,column:41}}],line:426},"51":{loc:{start:{line:427,column:13},end:{line:429,column:41}},type:"cond-expr",locations:[{start:{line:428,column:18},end:{line:428,column:43}},{start:{line:429,column:18},end:{line:429,column:41}}],line:427},"52":{loc:{start:{line:431,column:29},end:{line:431,column:70}},type:"binary-expr",locations:[{start:{line:431,column:29},end:{line:431,column:47}},{start:{line:431,column:51},end:{line:431,column:70}}],line:431},"53":{loc:{start:{line:432,column:8},end:{line:442,column:9}},type:"if",locations:[{start:{line:432,column:8},end:{line:442,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:432},"54":{loc:{start:{line:437,column:12},end:{line:439,column:13}},type:"if",locations:[{start:{line:437,column:12},end:{line:439,column:13}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:437},"55":{loc:{start:{line:437,column:16},end:{line:437,column:75}},type:"binary-expr",locations:[{start:{line:437,column:16},end:{line:437,column:37}},{start:{line:437,column:41},end:{line:437,column:75}}],line:437},"56":{loc:{start:{line:443,column:33},end:{line:443,column:73}},type:"cond-expr",locations:[{start:{line:443,column:52},end:{line:443,column:65}},{start:{line:443,column:68},end:{line:443,column:73}}],line:443},"57":{loc:{start:{line:444,column:8},end:{line:454,column:9}},type:"if",locations:[{start:{line:444,column:8},end:{line:454,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:444},"58":{loc:{start:{line:445,column:12},end:{line:447,column:13}},type:"if",locations:[{start:{line:445,column:12},end:{line:447,column:13}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:445},"59":{loc:{start:{line:466,column:8},end:{line:468,column:9}},type:"if",locations:[{start:{line:466,column:8},end:{line:468,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:466},"60":{loc:{start:{line:478,column:8},end:{line:485,column:9}},type:"switch",locations:[{start:{line:479,column:12},end:{line:480,column:41}},{start:{line:481,column:12},end:{line:482,column:41}},{start:{line:483,column:12},end:{line:484,column:84}}],line:478},"61":{loc:{start:{line:497,column:64},end:{line:497,column:122}},type:"default-arg",locations:[{start:{line:497,column:82},end:{line:497,column:122}}],line:497},"62":{loc:{start:{line:530,column:8},end:{line:537,column:9}},type:"switch",locations:[{start:{line:531,column:12},end:{line:532,column:29}},{start:{line:533,column:12},end:{line:534,column:29}},{start:{line:535,column:12},end:{line:536,column:75}}],line:530},"63":{loc:{start:{line:547,column:8},end:{line:549,column:9}},type:"if",locations:[{start:{line:547,column:8},end:{line:549,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:547},"64":{loc:{start:{line:567,column:58},end:{line:567,column:76}},type:"default-arg",locations:[{start:{line:567,column:66},end:{line:567,column:76}}],line:567},"65":{loc:{start:{line:568,column:8},end:{line:570,column:9}},type:"if",locations:[{start:{line:568,column:8},end:{line:570,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:568},"66":{loc:{start:{line:595,column:12},end:{line:597,column:13}},type:"if",locations:[{start:{line:595,column:12},end:{line:597,column:13}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:595},"67":{loc:{start:{line:595,column:16},end:{line:595,column:83}},type:"binary-expr",locations:[{start:{line:595,column:16},end:{line:595,column:48}},{start:{line:595,column:52},end:{line:595,column:83}}],line:595},"68":{loc:{start:{line:611,column:8},end:{line:640,column:9}},type:"switch",locations:[{start:{line:612,column:12},end:{line:615,column:13}},{start:{line:616,column:12},end:{line:622,column:13}},{start:{line:623,column:12},end:{line:637,column:13}},{start:{line:638,column:12},end:{line:639,column:77}}],line:611},"69":{loc:{start:{line:617,column:16},end:{line:619,column:17}},type:"if",locations:[{start:{line:617,column:16},end:{line:619,column:17}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:617},"70":{loc:{start:{line:617,column:20},end:{line:617,column:73}},type:"binary-expr",locations:[{start:{line:617,column:20},end:{line:617,column:47}},{start:{line:617,column:51},end:{line:617,column:73}}],line:617},"71":{loc:{start:{line:624,column:16},end:{line:626,column:17}},type:"if",locations:[{start:{line:624,column:16},end:{line:626,column:17}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:624},"72":{loc:{start:{line:624,column:20},end:{line:624,column:73}},type:"binary-expr",locations:[{start:{line:624,column:20},end:{line:624,column:47}},{start:{line:624,column:51},end:{line:624,column:73}}],line:624},"73":{loc:{start:{line:634,column:65},end:{line:634,column:87}},type:"binary-expr",locations:[{start:{line:634,column:65},end:{line:634,column:78}},{start:{line:634,column:82},end:{line:634,column:87}}],line:634},"74":{loc:{start:{line:655,column:8},end:{line:685,column:9}},type:"switch",locations:[{start:{line:656,column:12},end:{line:663,column:13}},{start:{line:664,column:12},end:{line:674,column:13}},{start:{line:675,column:12},end:{line:682,column:13}},{start:{line:683,column:12},end:{line:684,column:75}}],line:655},"75":{loc:{start:{line:657,column:16},end:{line:659,column:17}},type:"if",locations:[{start:{line:657,column:16},end:{line:659,column:17}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:657},"76":{loc:{start:{line:665,column:16},end:{line:667,column:17}},type:"if",locations:[{start:{line:665,column:16},end:{line:667,column:17}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:665},"77":{loc:{start:{line:665,column:20},end:{line:665,column:73}},type:"binary-expr",locations:[{start:{line:665,column:20},end:{line:665,column:47}},{start:{line:665,column:51},end:{line:665,column:73}}],line:665},"78":{loc:{start:{line:668,column:16},end:{line:670,column:17}},type:"if",locations:[{start:{line:668,column:16},end:{line:670,column:17}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:668},"79":{loc:{start:{line:676,column:16},end:{line:678,column:17}},type:"if",locations:[{start:{line:676,column:16},end:{line:678,column:17}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:676},"80":{loc:{start:{line:676,column:20},end:{line:676,column:73}},type:"binary-expr",locations:[{start:{line:676,column:20},end:{line:676,column:47}},{start:{line:676,column:51},end:{line:676,column:73}}],line:676},"81":{loc:{start:{line:734,column:8},end:{line:743,column:9}},type:"if",locations:[{start:{line:734,column:8},end:{line:743,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:734},"82":{loc:{start:{line:735,column:12},end:{line:742,column:13}},type:"if",locations:[{start:{line:735,column:12},end:{line:742,column:13}},{start:{line:738,column:17},end:{line:742,column:13}}],line:735},"83":{loc:{start:{line:745,column:29},end:{line:747,column:23}},type:"cond-expr",locations:[{start:{line:746,column:14},end:{line:746,column:72}},{start:{line:747,column:14},end:{line:747,column:23}}],line:745},"84":{loc:{start:{line:748,column:29},end:{line:748,column:92}},type:"cond-expr",locations:[{start:{line:748,column:58},end:{line:748,column:87}},{start:{line:748,column:90},end:{line:748,column:92}}],line:748},"85":{loc:{start:{line:752,column:8},end:{line:754,column:9}},type:"if",locations:[{start:{line:752,column:8},end:{line:754,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:752},"86":{loc:{start:{line:752,column:12},end:{line:752,column:53}},type:"binary-expr",locations:[{start:{line:752,column:12},end:{line:752,column:31}},{start:{line:752,column:35},end:{line:752,column:53}}],line:752},"87":{loc:{start:{line:755,column:8},end:{line:757,column:9}},type:"if",locations:[{start:{line:755,column:8},end:{line:757,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:755},"88":{loc:{start:{line:755,column:12},end:{line:755,column:60}},type:"binary-expr",locations:[{start:{line:755,column:12},end:{line:755,column:19}},{start:{line:755,column:23},end:{line:755,column:60}}],line:755},"89":{loc:{start:{line:758,column:8},end:{line:760,column:9}},type:"if",locations:[{start:{line:758,column:8},end:{line:760,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:758},"90":{loc:{start:{line:761,column:8},end:{line:763,column:9}},type:"if",locations:[{start:{line:761,column:8},end:{line:763,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:761},"91":{loc:{start:{line:761,column:12},end:{line:761,column:61}},type:"binary-expr",locations:[{start:{line:761,column:12},end:{line:761,column:28}},{start:{line:761,column:32},end:{line:761,column:61}}],line:761},"92":{loc:{start:{line:772,column:8},end:{line:781,column:9}},type:"if",locations:[{start:{line:772,column:8},end:{line:781,column:9}},{start:{line:775,column:13},end:{line:781,column:9}}],line:772},"93":{loc:{start:{line:775,column:13},end:{line:781,column:9}},type:"if",locations:[{start:{line:775,column:13},end:{line:781,column:9}},{start:{line:779,column:13},end:{line:781,column:9}}],line:775},"94":{loc:{start:{line:779,column:13},end:{line:781,column:9}},type:"if",locations:[{start:{line:779,column:13},end:{line:781,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:779},"95":{loc:{start:{line:791,column:8},end:{line:793,column:9}},type:"if",locations:[{start:{line:791,column:8},end:{line:793,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:791},"96":{loc:{start:{line:794,column:147},end:{line:794,column:215}},type:"cond-expr",locations:[{start:{line:794,column:178},end:{line:794,column:206}},{start:{line:794,column:209},end:{line:794,column:215}}],line:794}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0],"13":[0,0],"14":[0,0],"15":[0],"16":[0],"17":[0],"18":[0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0],"25":[0],"26":[0],"27":[0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0],"41":[0],"42":[0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0,0],"61":[0],"62":[0,0,0],"63":[0,0],"64":[0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0,0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0,0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0]},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/src/sdk.ts",sources:["/Users/rg/dev/opensea-js/src/sdk.ts"],names:[],mappings:"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",sourcesContent:["import EventEmitter = require(\"events\");\nimport { Seaport } from \"@opensea/seaport-js\";\nimport {\n  CROSS_CHAIN_SEAPORT_V1_5_ADDRESS,\n  CROSS_CHAIN_SEAPORT_V1_6_ADDRESS,\n  OPENSEA_CONDUIT_KEY,\n} from \"@opensea/seaport-js/lib/constants\";\nimport {\n  AdvancedOrder,\n  ConsiderationInputItem,\n  CreateInputItem,\n  OrderComponents,\n} from \"@opensea/seaport-js/lib/types\";\nimport {\n  BigNumberish,\n  Contract,\n  FixedNumber,\n  Overrides,\n  Signer,\n  ethers,\n  parseEther,\n  JsonRpcProvider,\n  ContractTransactionResponse,\n  ZeroAddress,\n} from \"ethers\";\nimport { OpenSeaAPI } from \"./api/api\";\nimport { CollectionOffer, Listing, NFT, Order } from \"./api/types\";\nimport {\n  INVERSE_BASIS_POINT,\n  ENGLISH_AUCTION_ZONE_MAINNETS,\n  ENGLISH_AUCTION_ZONE_TESTNETS,\n} from \"./constants\";\nimport {\n  constructPrivateListingCounterOrder,\n  getPrivateListingConsiderations,\n  getPrivateListingFulfillments,\n} from \"./orders/privateListings\";\nimport { OrderType, OrderV2 } from \"./orders/types\";\nimport { DEFAULT_SEAPORT_CONTRACT_ADDRESS } from \"./orders/utils\";\nimport {\n  ERC1155__factory,\n  ERC20__factory,\n  ERC721__factory,\n} from \"./typechain/contracts\";\nimport {\n  EventData,\n  EventType,\n  Chain,\n  OpenSeaAPIConfig,\n  OpenSeaCollection,\n  OrderSide,\n  TokenStandard,\n  AssetWithTokenStandard,\n  AssetWithTokenId,\n} from \"./types\";\nimport {\n  getMaxOrderExpirationTimestamp,\n  hasErrorCode,\n  getAssetItemType,\n  getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress,\n  requireValidProtocol,\n  getWETHAddress,\n  isTestChain,\n  basisPointsForFee,\n  totalBasisPointsForFees,\n  getChainId,\n} from \"./utils/utils\";\n\n/**\n * The OpenSea SDK main class.\n * @category Main Classes\n */\nexport class OpenSeaSDK {\n  /** Provider to use for transactions. */\n  public provider: JsonRpcProvider;\n  /** Seaport v1.6 client @see {@link https://github.com/ProjectOpenSea/seaport-js} */\n  public seaport_v1_6: Seaport;\n  /** Seaport v1.5 client @see {@link https://github.com/ProjectOpenSea/seaport-js} */\n  public seaport_v1_5: Seaport;\n  /** Logger function to use when debugging */\n  public logger: (arg: string) => void;\n  /** API instance */\n  public readonly api: OpenSeaAPI;\n  /** The configured chain */\n  public readonly chain: Chain;\n  /** Internal cache of decimals for payment tokens to save network requests */\n  private _cachedPaymentTokenDecimals: { [address: string]: number } = {};\n\n  private _emitter: EventEmitter;\n  private _signerOrProvider: Signer | JsonRpcProvider;\n\n  /**\n   * Create a new instance of OpenSeaSDK.\n   * @param signerOrProvider Signer or provider to use for transactions. For example:\n   * `new ethers.providers.JsonRpcProvider('https://mainnet.infura.io')` or\n   * `new ethers.Wallet(privKey, provider)`\n   * @param apiConfig configuration options, including `chain`\n   * @param logger optional function for logging debug strings. defaults to no logging\n   */\n  constructor(\n    signerOrProvider: Signer | JsonRpcProvider,\n    apiConfig: OpenSeaAPIConfig = {},\n    logger?: (arg: string) => void,\n  ) {\n    // API config\n    apiConfig.chain ??= Chain.Mainnet;\n    this.chain = apiConfig.chain;\n    this.api = new OpenSeaAPI(apiConfig);\n\n    this.provider = ((signerOrProvider as Signer).provider ??\n      signerOrProvider) as JsonRpcProvider;\n    this._signerOrProvider = signerOrProvider ?? this.provider;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.seaport_v1_5 = new Seaport(this._signerOrProvider as any, {\n      overrides: {\n        contractAddress: CROSS_CHAIN_SEAPORT_V1_5_ADDRESS,\n        seaportVersion: \"1.5\",\n        defaultConduitKey: OPENSEA_CONDUIT_KEY,\n      },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.seaport_v1_6 = new Seaport(this._signerOrProvider as any, {\n      overrides: { defaultConduitKey: OPENSEA_CONDUIT_KEY },\n    });\n\n    // Emit events\n    this._emitter = new EventEmitter();\n\n    // Logger: default to no logging if fn not provided\n    this.logger = logger ?? ((arg: string) => arg);\n\n    // Cache decimals for WETH payment token to skip network request\n    try {\n      const wethAddress = getWETHAddress(this.chain).toLowerCase();\n      this._cachedPaymentTokenDecimals[wethAddress] = 18;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      if (error.message.includes(\"Unknown WETH address\")) {\n        // Ignore\n      } else {\n        console.error(error);\n      }\n    }\n  }\n\n  /**\n   * Add a listener for events emitted by the SDK.\n   * @param event The {@link EventType} to listen to.\n   * @param listener A callback that will accept an object with {@link EventData}\\\n   * @param once Whether the listener should only be called once, or continue listening until removed.\n   */\n  public addListener(\n    event: EventType,\n    listener: (data: EventData) => void,\n    once = false,\n  ) {\n    if (once) {\n      this._emitter.once(event, listener);\n    } else {\n      this._emitter.addListener(event, listener);\n    }\n  }\n\n  /**\n   * Remove an event listener by calling `.removeListener()` on an event and listener.\n   * @param event The {@link EventType} to remove a listener for\\\n   * @param listener The listener to remove\n   */\n  public removeListener(event: EventType, listener: (data: EventData) => void) {\n    this._emitter.removeListener(event, listener);\n  }\n\n  /**\n   * Remove all event listeners. This should be called when you're unmounting\n   * a component that listens to events to make UI updates.\n   * @param event Optional EventType to remove listeners for\n   */\n  public removeAllListeners(event?: EventType) {\n    this._emitter.removeAllListeners(event);\n  }\n\n  /**\n   * Wrap ETH into WETH.\n   * W-ETH is needed for making offers.\n   * @param options\n   * @param options.amountInEth Amount of ether to wrap\n   * @param options.accountAddress Address of the user's wallet containing the ether\n   */\n  public async wrapEth({\n    amountInEth,\n    accountAddress,\n  }: {\n    amountInEth: BigNumberish;\n    accountAddress: string;\n  }) {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const value = parseEther(FixedNumber.fromValue(amountInEth).toString());\n\n    this._dispatch(EventType.WrapEth, { accountAddress, amount: value });\n\n    const wethContract = new Contract(\n      getWETHAddress(this.chain),\n      [\"function deposit() payable\"],\n      this._signerOrProvider,\n    );\n\n    try {\n      const transaction = await wethContract.deposit({ value });\n      await this._confirmTransaction(\n        transaction.hash,\n        EventType.WrapEth,\n        \"Wrapping ETH\",\n      );\n    } catch (error) {\n      console.error(error);\n      this._dispatch(EventType.TransactionDenied, { error, accountAddress });\n    }\n  }\n\n  /**\n   * Unwrap WETH into ETH.\n   * Emits the `UnwrapWeth` event when the transaction is prompted.\n   * @param options\n   * @param options.amountInEth How much WETH to unwrap\n   * @param options.accountAddress Address of the user's wallet containing the WETH\n   */\n  public async unwrapWeth({\n    amountInEth,\n    accountAddress,\n  }: {\n    amountInEth: BigNumberish;\n    accountAddress: string;\n  }) {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const amount = parseEther(FixedNumber.fromValue(amountInEth).toString());\n\n    this._dispatch(EventType.UnwrapWeth, { accountAddress, amount });\n\n    const wethContract = new Contract(\n      getWETHAddress(this.chain),\n      [\"function withdraw(uint wad) public\"],\n      this._signerOrProvider,\n    );\n\n    try {\n      const transaction = await wethContract.withdraw(amount);\n      await this._confirmTransaction(\n        transaction.hash,\n        EventType.UnwrapWeth,\n        \"Unwrapping W-ETH\",\n      );\n    } catch (error) {\n      console.error(error);\n      this._dispatch(EventType.TransactionDenied, { error, accountAddress });\n    }\n  }\n\n  private getAmountWithBasisPointsApplied = (\n    amount: bigint,\n    basisPoints: bigint,\n  ): string => {\n    return ((amount * basisPoints) / INVERSE_BASIS_POINT).toString();\n  };\n\n  private async getFees({\n    collection,\n    seller,\n    paymentTokenAddress,\n    startAmount,\n    endAmount,\n    excludeOptionalCreatorFees,\n  }: {\n    collection: OpenSeaCollection;\n    seller?: string;\n    paymentTokenAddress: string;\n    startAmount: bigint;\n    endAmount?: bigint;\n    excludeOptionalCreatorFees?: boolean;\n  }): Promise<ConsiderationInputItem[]> {\n    let collectionFees = collection.fees;\n    if (excludeOptionalCreatorFees) {\n      collectionFees = collectionFees.filter((fee) => fee.required);\n    }\n    const collectionFeesBasisPoints = totalBasisPointsForFees(collectionFees);\n    const sellerBasisPoints = INVERSE_BASIS_POINT - collectionFeesBasisPoints;\n\n    const getConsiderationItem = (basisPoints: bigint, recipient?: string) => {\n      return {\n        token: paymentTokenAddress,\n        amount: this.getAmountWithBasisPointsApplied(startAmount, basisPoints),\n        endAmount: this.getAmountWithBasisPointsApplied(\n          endAmount ?? startAmount,\n          basisPoints,\n        ),\n        recipient,\n      };\n    };\n\n    const considerationItems: ConsiderationInputItem[] = [];\n\n    if (seller) {\n      considerationItems.push(getConsiderationItem(sellerBasisPoints, seller));\n    }\n    if (collectionFeesBasisPoints > 0) {\n      for (const fee of collectionFees) {\n        considerationItems.push(\n          getConsiderationItem(basisPointsForFee(fee), fee.recipient),\n        );\n      }\n    }\n    return considerationItems;\n  }\n\n  private getNFTItems(\n    nfts: NFT[],\n    quantities: bigint[] = [],\n  ): CreateInputItem[] {\n    return nfts.map((nft, index) => ({\n      itemType: getAssetItemType(\n        nft.token_standard.toUpperCase() as TokenStandard,\n      ),\n      token:\n        getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress(\n          nft.contract,\n        ),\n      identifier: nft.identifier ?? undefined,\n      amount: quantities[index].toString() ?? \"1\",\n    }));\n  }\n\n  /**\n   * Create and submit an offer on an asset.\n   * @param options\n   * @param options.asset The asset to trade. tokenAddress and tokenId must be defined.\n   * @param options.accountAddress Address of the wallet making the offer.\n   * @param options.startAmount Value of the offer in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified)\n   * @param options.quantity The number of assets to bid for (if fungible or semi-fungible). Defaults to 1.\n   * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt.\n   * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n   * @param options.expirationTime Expiration time for the order, in UTC seconds\n   * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to WETH\n   * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the offer. Default: true.\n   * @param options.zone The zone to use for the order. For order protection, pass SIGNED_ZONE. If unspecified, defaults to no zone.\n   *\n   * @returns The {@link OrderV2} that was created.\n   *\n   * @throws Error if the asset does not contain a token id.\n   * @throws Error if the accountAddress is not available through wallet or provider.\n   * @throws Error if the startAmount is not greater than 0.\n   * @throws Error if paymentTokenAddress is not WETH on anything other than Ethereum mainnet.\n   */\n  public async createOffer({\n    asset,\n    accountAddress,\n    startAmount,\n    quantity = 1,\n    domain,\n    salt,\n    expirationTime,\n    paymentTokenAddress = getWETHAddress(this.chain),\n    excludeOptionalCreatorFees = true,\n    zone = ZeroAddress,\n  }: {\n    asset: AssetWithTokenId;\n    accountAddress: string;\n    startAmount: BigNumberish;\n    quantity?: BigNumberish;\n    domain?: string;\n    salt?: BigNumberish;\n    expirationTime?: BigNumberish;\n    paymentTokenAddress?: string;\n    excludeOptionalCreatorFees?: boolean;\n    zone?: string;\n  }): Promise<OrderV2> {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const { nft } = await this.api.getNFT(asset.tokenAddress, asset.tokenId);\n    const considerationAssetItems = this.getNFTItems(\n      [nft],\n      [BigInt(quantity ?? 1)],\n    );\n\n    const { basePrice } = await this._getPriceParameters(\n      OrderSide.OFFER,\n      paymentTokenAddress,\n      expirationTime ?? getMaxOrderExpirationTimestamp(),\n      startAmount,\n    );\n\n    const collection = await this.api.getCollection(nft.collection);\n\n    const considerationFeeItems = await this.getFees({\n      collection,\n      paymentTokenAddress,\n      startAmount: basePrice,\n      excludeOptionalCreatorFees,\n    });\n\n    if (collection.requiredZone) {\n      zone = collection.requiredZone;\n    }\n\n    const { executeAllActions } = await this.seaport_v1_6.createOrder(\n      {\n        offer: [\n          {\n            token: paymentTokenAddress,\n            amount: basePrice.toString(),\n          },\n        ],\n        consideration: [...considerationAssetItems, ...considerationFeeItems],\n        endTime:\n          expirationTime !== undefined\n            ? BigInt(expirationTime).toString()\n            : getMaxOrderExpirationTimestamp().toString(),\n        zone,\n        domain,\n        salt: BigInt(salt ?? 0).toString(),\n        restrictedByZone: zone !== ZeroAddress,\n        allowPartialFills: true,\n      },\n      accountAddress,\n    );\n    const order = await executeAllActions();\n\n    return this.api.postOrder(order, {\n      protocol: \"seaport\",\n      protocolAddress: DEFAULT_SEAPORT_CONTRACT_ADDRESS,\n      side: OrderSide.OFFER,\n    });\n  }\n\n  /**\n   * Create and submit a listing for an asset.\n   * @param options\n   * @param options.asset The asset to trade. tokenAddress and tokenId must be defined.\n   * @param options.accountAddress  Address of the wallet making the listing\n   * @param options.startAmount Value of the listing at the start of the auction in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified)\n   * @param options.endAmount Value of the listing at the end of the auction. If specified, price will change linearly between startAmount and endAmount as time progresses.\n   * @param options.quantity The number of assets to list (if fungible or semi-fungible). Defaults to 1.\n   * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt. This can be used for on-chain order attribution to assist with analytics.\n   * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n   * @param options.listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.\n   * @param options.expirationTime Expiration time for the order, in UTC seconds.\n   * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to ETH\n   * @param options.buyerAddress Optional address that's allowed to purchase this item. If specified, no other address will be able to take the order, unless its value is the null address.\n   * @param options.englishAuction If true, the order will be listed as an English auction.\n   * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the listing. Default: false.\n   * @param options.zone The zone to use for the order.  For order protection, pass SIGNED_ZONE. If unspecified, defaults to no zone.\n   * @returns The {@link OrderV2} that was created.\n   *\n   * @throws Error if the asset does not contain a token id.\n   * @throws Error if the accountAddress is not available through wallet or provider.\n   * @throws Error if the startAmount is not greater than 0.\n   * @throws Error if paymentTokenAddress is not WETH on anything other than Ethereum mainnet.\n   */\n  public async createListing({\n    asset,\n    accountAddress,\n    startAmount,\n    endAmount,\n    quantity = 1,\n    domain,\n    salt,\n    listingTime,\n    expirationTime,\n    paymentTokenAddress = ethers.ZeroAddress,\n    buyerAddress,\n    englishAuction,\n    excludeOptionalCreatorFees = false,\n    zone = ZeroAddress,\n  }: {\n    asset: AssetWithTokenId;\n    accountAddress: string;\n    startAmount: BigNumberish;\n    endAmount?: BigNumberish;\n    quantity?: BigNumberish;\n    domain?: string;\n    salt?: BigNumberish;\n    listingTime?: number;\n    expirationTime?: number;\n    paymentTokenAddress?: string;\n    buyerAddress?: string;\n    englishAuction?: boolean;\n    excludeOptionalCreatorFees?: boolean;\n    zone?: string;\n  }): Promise<OrderV2> {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const { nft } = await this.api.getNFT(asset.tokenAddress, asset.tokenId);\n    const offerAssetItems = this.getNFTItems([nft], [BigInt(quantity ?? 1)]);\n\n    if (englishAuction && paymentTokenAddress == ethers.ZeroAddress) {\n      throw new Error(\n        `English auctions must use wrapped ETH or an ERC-20 token.`,\n      );\n    }\n\n    const { basePrice, endPrice } = await this._getPriceParameters(\n      OrderSide.LISTING,\n      paymentTokenAddress,\n      expirationTime ?? getMaxOrderExpirationTimestamp(),\n      startAmount,\n      endAmount ?? undefined,\n    );\n\n    const collection = await this.api.getCollection(nft.collection);\n\n    const considerationFeeItems = await this.getFees({\n      collection,\n      seller: accountAddress,\n      paymentTokenAddress,\n      startAmount: basePrice,\n      endAmount: endPrice,\n      excludeOptionalCreatorFees,\n    });\n\n    if (buyerAddress) {\n      considerationFeeItems.push(\n        ...getPrivateListingConsiderations(offerAssetItems, buyerAddress),\n      );\n    }\n\n    if (englishAuction) {\n      zone = isTestChain(this.chain)\n        ? ENGLISH_AUCTION_ZONE_TESTNETS\n        : ENGLISH_AUCTION_ZONE_MAINNETS;\n    } else if (collection.requiredZone) {\n      zone = collection.requiredZone;\n    }\n\n    const { executeAllActions } = await this.seaport_v1_6.createOrder(\n      {\n        offer: offerAssetItems,\n        consideration: considerationFeeItems,\n        startTime: listingTime?.toString(),\n        endTime:\n          expirationTime?.toString() ??\n          getMaxOrderExpirationTimestamp().toString(),\n        zone,\n        domain,\n        salt: BigInt(salt ?? 0).toString(),\n        restrictedByZone: zone !== ZeroAddress,\n        allowPartialFills: englishAuction ? false : true,\n      },\n      accountAddress,\n    );\n    const order = await executeAllActions();\n\n    return this.api.postOrder(order, {\n      protocol: \"seaport\",\n      protocolAddress: DEFAULT_SEAPORT_CONTRACT_ADDRESS,\n      side: OrderSide.LISTING,\n    });\n  }\n\n  /**\n   * Create and submit a collection offer.\n   * @param options\n   * @param options.collectionSlug Identifier for the collection.\n   * @param options.accountAddress Address of the wallet making the offer.\n   * @param options.amount Value of the offer in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified).\n   * @param options.quantity The number of assets to bid for (if fungible or semi-fungible).\n   * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt. This can be used for on-chain order attribution to assist with analytics.\n   * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n   * @param options.expirationTime Expiration time for the order, in UTC seconds.\n   * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to WETH.\n   * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the offer. Default: false.\n   * @param options.offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.\n   * @param options.traitType If defined, the trait name to create the collection offer for.\n   * @param options.traitValue If defined, the trait value to create the collection offer for.\n   * @returns The {@link CollectionOffer} that was created.\n   */\n  public async createCollectionOffer({\n    collectionSlug,\n    accountAddress,\n    amount,\n    quantity,\n    domain,\n    salt,\n    expirationTime,\n    paymentTokenAddress = getWETHAddress(this.chain),\n    excludeOptionalCreatorFees = false,\n    offerProtectionEnabled = true,\n    traitType,\n    traitValue,\n  }: {\n    collectionSlug: string;\n    accountAddress: string;\n    amount: BigNumberish;\n    quantity: number;\n    domain?: string;\n    salt?: BigNumberish;\n    expirationTime?: number | string;\n    paymentTokenAddress: string;\n    excludeOptionalCreatorFees?: boolean;\n    offerProtectionEnabled?: boolean;\n    traitType?: string;\n    traitValue?: string;\n  }): Promise<CollectionOffer | null> {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const collection = await this.api.getCollection(collectionSlug);\n    const buildOfferResult = await this.api.buildOffer(\n      accountAddress,\n      quantity,\n      collectionSlug,\n      offerProtectionEnabled,\n      traitType,\n      traitValue,\n    );\n    const item = buildOfferResult.partialParameters.consideration[0];\n    const convertedConsiderationItem = {\n      itemType: item.itemType,\n      token: item.token,\n      identifier: item.identifierOrCriteria,\n      amount: item.startAmount,\n    };\n\n    const { basePrice } = await this._getPriceParameters(\n      OrderSide.LISTING,\n      paymentTokenAddress,\n      expirationTime ?? getMaxOrderExpirationTimestamp(),\n      amount,\n    );\n    const considerationFeeItems = await this.getFees({\n      collection,\n      paymentTokenAddress,\n      startAmount: basePrice,\n      endAmount: basePrice,\n      excludeOptionalCreatorFees,\n    });\n\n    const considerationItems = [\n      convertedConsiderationItem,\n      ...considerationFeeItems,\n    ];\n\n    const payload = {\n      offerer: accountAddress,\n      offer: [\n        {\n          token: paymentTokenAddress,\n          amount: basePrice.toString(),\n        },\n      ],\n      consideration: considerationItems,\n      endTime:\n        expirationTime?.toString() ??\n        getMaxOrderExpirationTimestamp().toString(),\n      zone: buildOfferResult.partialParameters.zone,\n      domain,\n      salt: BigInt(salt ?? 0).toString(),\n      restrictedByZone: true,\n      allowPartialFills: true,\n    };\n\n    const { executeAllActions } = await this.seaport_v1_6.createOrder(\n      payload,\n      accountAddress,\n    );\n    const order = await executeAllActions();\n\n    return this.api.postCollectionOffer(\n      order,\n      collectionSlug,\n      traitType,\n      traitValue,\n    );\n  }\n\n  /**\n   * Fulfill a private order for a designated address.\n   * @param options\n   * @param options.order The order to fulfill\n   * @param options.accountAddress Address of the wallet taking the order.\n   * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.\n   *                       This can be used for on-chain order attribution to assist with analytics.\n   * @param options.overrides Transaction overrides, ignored if not set.\n   * @returns Transaction hash of the order.\n   */\n  private async fulfillPrivateOrder({\n    order,\n    accountAddress,\n    domain,\n    overrides,\n  }: {\n    order: OrderV2;\n    accountAddress: string;\n    domain?: string;\n    overrides?: Overrides;\n  }): Promise<string> {\n    if (!order.taker?.address) {\n      throw new Error(\n        \"Order is not a private listing - must have a taker address\",\n      );\n    }\n    const counterOrder = constructPrivateListingCounterOrder(\n      order.protocolData,\n      order.taker.address,\n    );\n    const fulfillments = getPrivateListingFulfillments(order.protocolData);\n    const seaport = this.getSeaport(order.protocolAddress);\n    const transaction = await seaport\n      .matchOrders({\n        orders: [order.protocolData, counterOrder],\n        fulfillments,\n        overrides: {\n          ...overrides,\n          value: counterOrder.parameters.offer[0].startAmount,\n        },\n        accountAddress,\n        domain,\n      })\n      .transact();\n    const transactionReceipt = await transaction.wait();\n    if (!transactionReceipt) {\n      throw new Error(\"Missing transaction receipt\");\n    }\n\n    await this._confirmTransaction(\n      transactionReceipt.hash,\n      EventType.MatchOrders,\n      \"Fulfilling order\",\n    );\n    return transactionReceipt.hash;\n  }\n\n  /**\n   * Fulfill an order for an asset. The order can be either a listing or an offer.\n   * @param options\n   * @param options.order The order to fulfill, a.k.a. \"take\"\n   * @param options.accountAddress Address of the wallet taking the offer.\n   * @param options.recipientAddress The optional address to receive the order's item(s) or currencies. If not specified, defaults to accountAddress.\n   * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.\n   * @param options.overrides Transaction overrides, ignored if not set.\n   * @returns Transaction hash of the order.\n   *\n   * @throws Error if the accountAddress is not available through wallet or provider.\n   * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n   * @throws Error if attempting to fulfill the order with a recipient address which does not match a private listing.\n   */\n  public async fulfillOrder({\n    order,\n    accountAddress,\n    recipientAddress,\n    domain,\n    overrides,\n  }: {\n    order: OrderV2 | Order;\n    accountAddress: string;\n    recipientAddress?: string;\n    domain?: string;\n    overrides?: Overrides;\n  }): Promise<string> {\n    await this._requireAccountIsAvailable(accountAddress);\n\n    const protocolAddress =\n      (order as OrderV2).protocolAddress ?? (order as Order).protocol_address;\n    requireValidProtocol(protocolAddress);\n\n    const orderHash =\n      (order as OrderV2).orderHash ?? (order as Order).order_hash;\n\n    const side =\n      (order as OrderV2).side ??\n      ([OrderType.BASIC, OrderType.ENGLISH].includes((order as Listing).type)\n        ? OrderSide.LISTING\n        : OrderSide.OFFER);\n\n    let extraData: string | undefined = undefined;\n\n    const protocolData =\n      (order as OrderV2).protocolData ?? (order as Order).protocol_data;\n\n    if (orderHash) {\n      const result = await this.api.generateFulfillmentData(\n        accountAddress,\n        orderHash,\n        protocolAddress,\n        side,\n      );\n\n      // If the order is using offer protection, the extraData\n      // must be included with the order to successfully fulfill.\n      const inputData = result.fulfillment_data.transaction.input_data;\n      if (\"orders\" in inputData && \"extraData\" in inputData.orders[0]) {\n        extraData = (inputData.orders[0] as AdvancedOrder).extraData;\n      }\n      const signature = result.fulfillment_data.orders[0].signature;\n      protocolData.signature = signature;\n    }\n\n    const isPrivateListing = \"taker\" in order ? !!order.taker : false;\n    if (isPrivateListing) {\n      if (recipientAddress) {\n        throw new Error(\n          \"Private listings cannot be fulfilled with a recipient address\",\n        );\n      }\n      return this.fulfillPrivateOrder({\n        order: order as OrderV2,\n        accountAddress,\n        domain,\n        overrides,\n      });\n    }\n\n    const seaport = this.getSeaport(protocolAddress);\n    const { executeAllActions } = await seaport.fulfillOrder({\n      order: protocolData,\n      accountAddress,\n      recipientAddress,\n      extraData,\n      domain,\n      overrides,\n    });\n    const transaction = await executeAllActions();\n\n    const transactionHash = ethers.Transaction.from(transaction).hash;\n    if (!transactionHash) {\n      throw new Error(\"Missing transaction hash\");\n    }\n\n    await this._confirmTransaction(\n      transactionHash,\n      EventType.MatchOrders,\n      \"Fulfilling order\",\n    );\n    return transactionHash;\n  }\n\n  /**\n   * Utility function to get the Seaport client based on the address.\n   * @param protocolAddress The Seaport address.\n   */\n  private getSeaport(protocolAddress: string): Seaport {\n    const checksummedProtocolAddress = ethers.getAddress(protocolAddress);\n    switch (checksummedProtocolAddress) {\n      case CROSS_CHAIN_SEAPORT_V1_5_ADDRESS:\n        return this.seaport_v1_5;\n      case CROSS_CHAIN_SEAPORT_V1_6_ADDRESS:\n        return this.seaport_v1_6;\n      default:\n        throw new Error(`Unsupported protocol address: ${protocolAddress}`);\n    }\n  }\n\n  /**\n   * Cancel orders onchain, preventing them from being fulfilled.\n   * @param options\n   * @param options.orders The orders to cancel\n   * @param options.accountAddress The account address cancelling the orders.\n   * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.\n   *                       This can be used for on-chain order attribution to assist with analytics.\n   * @param options.overrides Transaction overrides, ignored if not set.\n   * @returns Transaction hash of the order.\n   */\n  private async cancelSeaportOrders({\n    orders,\n    accountAddress,\n    domain,\n    protocolAddress = DEFAULT_SEAPORT_CONTRACT_ADDRESS,\n    overrides,\n  }: {\n    orders: OrderComponents[];\n    accountAddress: string;\n    domain?: string;\n    protocolAddress?: string;\n    overrides?: Overrides;\n  }): Promise<string> {\n    const seaport = this.getSeaport(protocolAddress);\n\n    const transaction = await seaport\n      .cancelOrders(orders, accountAddress, domain, overrides)\n      .transact();\n\n    return transaction.hash;\n  }\n\n  /**\n   * Cancel an order onchain, preventing it from ever being fulfilled.\n   * @param options\n   * @param options.order The order to cancel\n   * @param options.accountAddress The account address that will be cancelling the order.\n   * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.\n   *\n   * @throws Error if the accountAddress is not available through wallet or provider.\n   * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n   */\n  public async cancelOrder({\n    order,\n    accountAddress,\n    domain,\n  }: {\n    order: OrderV2;\n    accountAddress: string;\n    domain?: string;\n  }) {\n    await this._requireAccountIsAvailable(accountAddress);\n    requireValidProtocol(order.protocolAddress);\n\n    this._dispatch(EventType.CancelOrder, { orderV2: order, accountAddress });\n\n    // Transact and get the transaction hash\n    const transactionHash = await this.cancelSeaportOrders({\n      orders: [order.protocolData.parameters],\n      accountAddress,\n      domain,\n      protocolAddress: order.protocolAddress,\n    });\n\n    // Await transaction confirmation\n    await this._confirmTransaction(\n      transactionHash,\n      EventType.CancelOrder,\n      \"Cancelling order\",\n    );\n  }\n\n  private _getSeaportVersion(protocolAddress: string) {\n    const protocolAddressChecksummed = ethers.getAddress(protocolAddress);\n    switch (protocolAddressChecksummed) {\n      case CROSS_CHAIN_SEAPORT_V1_6_ADDRESS:\n        return \"1.6\";\n      case CROSS_CHAIN_SEAPORT_V1_5_ADDRESS:\n        return \"1.5\";\n      default:\n        throw new Error(\"Unknown or unsupported protocol address\");\n    }\n  }\n\n  /**\n   * Get the offerer signature for canceling an order offchain.\n   * The signature will only be valid if the signer address is the address of the order's offerer.\n   */\n  private async _getOffererSignature(\n    protocolAddress: string,\n    orderHash: string,\n    chain: Chain,\n  ) {\n    const chainId = getChainId(chain);\n    const name = \"Seaport\";\n    const version = this._getSeaportVersion(protocolAddress);\n\n    if (\n      typeof (this._signerOrProvider as Signer).signTypedData == \"undefined\"\n    ) {\n      throw new Error(\n        \"Please pass an ethers Signer into this sdk to derive an offerer signature\",\n      );\n    }\n\n    return (this._signerOrProvider as Signer).signTypedData(\n      { chainId, name, version, verifyingContract: protocolAddress },\n      { OrderHash: [{ name: \"orderHash\", type: \"bytes32\" }] },\n      { orderHash },\n    );\n  }\n\n  /**\n   * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.\n   * Protocol and Chain are required to prevent hash collisions.\n   * Please note cancellation is only assured if a fulfillment signature was not vended prior to cancellation.\n   * @param protocolAddress The Seaport address for the order.\n   * @param orderHash The order hash, or external identifier, of the order.\n   * @param chain The chain where the order is located.\n   * @param offererSignature An EIP-712 signature from the offerer of the order.\n   *                         If this is not provided, the user associated with the API Key will be checked instead.\n   *                         The signature must be a EIP-712 signature consisting of the order's Seaport contract's\n   *                         name, version, address, and chain. The struct to sign is `OrderHash` containing a\n   *                         single bytes32 field.\n   * @param useSignerToDeriveOffererSignature Derive the offererSignature from the Ethers signer passed into this sdk.\n   * @returns The response from the API.\n   */\n  public async offchainCancelOrder(\n    protocolAddress: string,\n    orderHash: string,\n    chain: Chain = this.chain,\n    offererSignature?: string,\n    useSignerToDeriveOffererSignature?: boolean,\n  ) {\n    if (useSignerToDeriveOffererSignature) {\n      offererSignature = await this._getOffererSignature(\n        protocolAddress,\n        orderHash,\n        chain,\n      );\n    }\n    return this.api.offchainCancelOrder(\n      protocolAddress,\n      orderHash,\n      chain,\n      offererSignature,\n    );\n  }\n\n  /**\n   * Returns whether an order is fulfillable.\n   * An order may not be fulfillable if a target item's transfer function\n   * is locked for some reason, e.g. an item is being rented within a game\n   * or trading has been locked for an item type.\n   * @param options\n   * @param options.order Order to check\n   * @param options.accountAddress The account address that will be fulfilling the order\n   * @returns True if the order is fulfillable, else False.\n   *\n   * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n   */\n  public async isOrderFulfillable({\n    order,\n    accountAddress,\n  }: {\n    order: OrderV2;\n    accountAddress: string;\n  }): Promise<boolean> {\n    requireValidProtocol(order.protocolAddress);\n\n    const seaport = this.getSeaport(order.protocolAddress);\n\n    try {\n      const isValid = await seaport\n        .validate([order.protocolData], accountAddress)\n        .staticCall();\n      return !!isValid;\n    } catch (error) {\n      if (hasErrorCode(error) && error.code === \"CALL_EXCEPTION\") {\n        return false;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get an account's balance of any Asset. This asset can be an ERC20, ERC1155, or ERC721.\n   * @param options\n   * @param options.accountAddress Account address to check\n   * @param options.asset The Asset to check balance for. tokenStandard must be set.\n   * @returns The balance of the asset for the account.\n   *\n   * @throws Error if the token standard does not support balanceOf.\n   */\n  public async getBalance({\n    accountAddress,\n    asset,\n  }: {\n    accountAddress: string;\n    asset: AssetWithTokenStandard;\n  }): Promise<bigint> {\n    switch (asset.tokenStandard) {\n      case TokenStandard.ERC20: {\n        const contract = ERC20__factory.connect(\n          asset.tokenAddress,\n          this.provider,\n        );\n        return await contract.balanceOf.staticCall(accountAddress);\n      }\n      case TokenStandard.ERC1155: {\n        if (asset.tokenId === undefined || asset.tokenId === null) {\n          throw new Error(\"Missing ERC1155 tokenId for getBalance\");\n        }\n        const contract = ERC1155__factory.connect(\n          asset.tokenAddress,\n          this.provider,\n        );\n        return await contract.balanceOf.staticCall(\n          accountAddress,\n          asset.tokenId,\n        );\n      }\n      case TokenStandard.ERC721: {\n        if (asset.tokenId === undefined || asset.tokenId === null) {\n          throw new Error(\"Missing ERC721 tokenId for getBalance\");\n        }\n        const contract = ERC721__factory.connect(\n          asset.tokenAddress,\n          this.provider,\n        );\n        try {\n          const owner = await contract.ownerOf.staticCall(asset.tokenId);\n          return BigInt(owner.toLowerCase() == accountAddress.toLowerCase());\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } catch (error: any) {\n          this.logger(\n            `Failed to get ownerOf ERC721: ${error.message ?? error}`,\n          );\n          return 0n;\n        }\n      }\n      default:\n        throw new Error(\"Unsupported token standard for getBalance\");\n    }\n  }\n\n  /**\n   * Transfer an asset. This asset can be an ERC20, ERC1155, or ERC721.\n   * @param options\n   * @param options.asset The Asset to transfer. tokenStandard must be set.\n   * @param options.amount Amount of asset to transfer. Not used for ERC721.\n   * @param options.fromAddress The address to transfer from\n   * @param options.toAddress The address to transfer to\n   * @param options.overrides Transaction overrides, ignored if not set.\n   */\n  public async transfer({\n    asset,\n    amount,\n    fromAddress,\n    toAddress,\n    overrides,\n  }: {\n    asset: AssetWithTokenStandard;\n    amount?: BigNumberish;\n    fromAddress: string;\n    toAddress: string;\n    overrides?: Overrides;\n  }): Promise<void> {\n    await this._requireAccountIsAvailable(fromAddress);\n    overrides = { ...overrides, from: fromAddress };\n    let transaction: Promise<ContractTransactionResponse>;\n\n    switch (asset.tokenStandard) {\n      case TokenStandard.ERC20: {\n        if (!amount) {\n          throw new Error(\"Missing ERC20 amount for transfer\");\n        }\n        const contract = ERC20__factory.connect(\n          asset.tokenAddress,\n          this._signerOrProvider,\n        );\n        transaction = contract.transfer(toAddress, amount, overrides);\n        break;\n      }\n      case TokenStandard.ERC1155: {\n        if (asset.tokenId === undefined || asset.tokenId === null) {\n          throw new Error(\"Missing ERC1155 tokenId for transfer\");\n        }\n        if (!amount) {\n          throw new Error(\"Missing ERC1155 amount for transfer\");\n        }\n        const contract = ERC1155__factory.connect(\n          asset.tokenAddress,\n          this._signerOrProvider,\n        );\n        transaction = contract.safeTransferFrom(\n          fromAddress,\n          toAddress,\n          asset.tokenId,\n          amount,\n          \"\",\n          overrides,\n        );\n        break;\n      }\n      case TokenStandard.ERC721: {\n        if (asset.tokenId === undefined || asset.tokenId === null) {\n          throw new Error(\"Missing ERC721 tokenId for transfer\");\n        }\n        const contract = ERC721__factory.connect(\n          asset.tokenAddress,\n          this._signerOrProvider,\n        );\n        transaction = contract.transferFrom(\n          fromAddress,\n          toAddress,\n          asset.tokenId,\n          overrides,\n        );\n        break;\n      }\n      default:\n        throw new Error(\"Unsupported token standard for transfer\");\n    }\n\n    try {\n      const transactionResponse = await transaction;\n      await this._confirmTransaction(\n        transactionResponse.hash,\n        EventType.Transfer,\n        \"Transferring asset\",\n      );\n    } catch (error) {\n      console.error(error);\n      this._dispatch(EventType.TransactionDenied, {\n        error,\n        accountAddress: fromAddress,\n      });\n    }\n  }\n\n  /**\n   * Instead of signing an off-chain order, this methods allows you to approve an order\n   * with on on-chain transaction.\n   * @param order Order to approve\n   * @param domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.\n   * @returns Transaction hash of the approval transaction\n   *\n   * @throws Error if the accountAddress is not available through wallet or provider.\n   * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.\n   */\n  public async approveOrder(order: OrderV2, domain?: string) {\n    await this._requireAccountIsAvailable(order.maker.address);\n    requireValidProtocol(order.protocolAddress);\n\n    this._dispatch(EventType.ApproveOrder, {\n      orderV2: order,\n      accountAddress: order.maker.address,\n    });\n\n    const seaport = this.getSeaport(order.protocolAddress);\n    const transaction = await seaport\n      .validate([order.protocolData], order.maker.address, domain)\n      .transact();\n\n    await this._confirmTransaction(\n      transaction.hash,\n      EventType.ApproveOrder,\n      \"Approving order\",\n    );\n\n    return transaction.hash;\n  }\n\n  /**\n   * Compute the `basePrice` and `endPrice` parameters to be used to price an order.\n   * Also validates the expiration time and auction type.\n   * @param tokenAddress Address of the ERC-20 token to use for trading. Use the null address for ETH.\n   * @param expirationTime When the auction expires, or 0 if never.\n   * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)\n   * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei)\n   */\n  private async _getPriceParameters(\n    orderSide: OrderSide,\n    tokenAddress: string,\n    expirationTime: BigNumberish,\n    startAmount: BigNumberish,\n    endAmount?: BigNumberish,\n  ) {\n    tokenAddress = tokenAddress.toLowerCase();\n    const isEther = tokenAddress === ethers.ZeroAddress;\n    let decimals = 18;\n    if (!isEther) {\n      if (tokenAddress in this._cachedPaymentTokenDecimals) {\n        decimals = this._cachedPaymentTokenDecimals[tokenAddress];\n      } else {\n        const paymentToken = await this.api.getPaymentToken(tokenAddress);\n        this._cachedPaymentTokenDecimals[tokenAddress] = paymentToken.decimals;\n        decimals = paymentToken.decimals;\n      }\n    }\n\n    const startAmountWei = ethers.parseUnits(startAmount.toString(), decimals);\n    const endAmountWei = endAmount\n      ? ethers.parseUnits(endAmount.toString(), decimals)\n      : undefined;\n    const priceDiffWei =\n      endAmountWei !== undefined ? startAmountWei - endAmountWei : 0n;\n\n    const basePrice = startAmountWei;\n    const endPrice = endAmountWei;\n\n    // Validation\n    if (startAmount == null || startAmountWei < 0) {\n      throw new Error(\"Starting price must be a number >= 0\");\n    }\n    if (isEther && orderSide === OrderSide.OFFER) {\n      throw new Error(\"Offers must use wrapped ETH or an ERC-20 token.\");\n    }\n    if (priceDiffWei < 0) {\n      throw new Error(\n        \"End price must be less than or equal to the start price.\",\n      );\n    }\n    if (priceDiffWei > 0 && BigInt(expirationTime) === 0n) {\n      throw new Error(\n        \"Expiration time must be set if order will change in price.\",\n      );\n    }\n    return { basePrice, endPrice };\n  }\n\n  private _dispatch(event: EventType, data: EventData) {\n    this._emitter.emit(event, data);\n  }\n\n  /** Get the accounts available from the signer or provider. */\n  private async _getAvailableAccounts() {\n    const availableAccounts: string[] = [];\n\n    if (\"address\" in this._signerOrProvider) {\n      availableAccounts.push(this._signerOrProvider.address as string);\n    } else if (\"listAccounts\" in this._signerOrProvider) {\n      const addresses = (await this._signerOrProvider.listAccounts()).map(\n        (acct) => acct.address,\n      );\n      availableAccounts.push(...addresses);\n    } else if (\"getAddress\" in this._signerOrProvider) {\n      availableAccounts.push(await this._signerOrProvider.getAddress());\n    }\n\n    return availableAccounts;\n  }\n\n  /**\n   * Throws an error if an account is not available through the provider.\n   * @param accountAddress The account address to check is available.\n   */\n  private async _requireAccountIsAvailable(accountAddress: string) {\n    const accountAddressChecksummed = ethers.getAddress(accountAddress);\n    const availableAccounts = await this._getAvailableAccounts();\n\n    if (availableAccounts.includes(accountAddressChecksummed)) {\n      return;\n    }\n\n    throw new Error(\n      `Specified accountAddress is not available through wallet or provider: ${accountAddressChecksummed}. Accounts available: ${\n        availableAccounts.length > 0 ? availableAccounts.join(\", \") : \"none\"\n      }`,\n    );\n  }\n\n  /**\n   * Wait for a transaction to confirm and log the success or failure.\n   * @param transactionHash The transaction hash to wait for.\n   * @param event The event type to log.\n   * @param description The description of the transaction.\n   */\n  private async _confirmTransaction(\n    transactionHash: string,\n    event: EventType,\n    description: string,\n  ): Promise<void> {\n    const transactionEventData = { transactionHash, event };\n    this.logger(`Transaction started: ${description}`);\n\n    try {\n      this._dispatch(EventType.TransactionCreated, transactionEventData);\n      await this.provider.waitForTransaction(transactionHash);\n      this.logger(`Transaction succeeded: ${description}`);\n      this._dispatch(EventType.TransactionConfirmed, transactionEventData);\n    } catch (error) {\n      this.logger(`Transaction failed: ${description}`);\n      this._dispatch(EventType.TransactionFailed, {\n        ...transactionEventData,\n        error,\n      });\n      throw error;\n    }\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3860b26b3c9bfdb4b0159a902226fc5c50c0f739"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_i250qerm0=function(){return actualCoverage;};}return actualCoverage;}cov_i250qerm0();cov_i250qerm0().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_i250qerm0().s[1]++;exports.OpenSeaSDK=void 0;const EventEmitter=(cov_i250qerm0().s[2]++,require("events"));const seaport_js_1=(cov_i250qerm0().s[3]++,require("@opensea/seaport-js"));const constants_1=(cov_i250qerm0().s[4]++,require("@opensea/seaport-js/lib/constants"));const ethers_1=(cov_i250qerm0().s[5]++,require("ethers"));const api_1=(cov_i250qerm0().s[6]++,require("./api/api"));const constants_2=(cov_i250qerm0().s[7]++,require("./constants"));const privateListings_1=(cov_i250qerm0().s[8]++,require("./orders/privateListings"));const types_1=(cov_i250qerm0().s[9]++,require("./orders/types"));const utils_1=(cov_i250qerm0().s[10]++,require("./orders/utils"));const contracts_1=(cov_i250qerm0().s[11]++,require("./typechain/contracts"));const types_2=(cov_i250qerm0().s[12]++,require("./types"));const utils_2=(cov_i250qerm0().s[13]++,require("./utils/utils"));/**
 * The OpenSea SDK main class.
 * @category Main Classes
 */class OpenSeaSDK{/**
     * Create a new instance of OpenSeaSDK.
     * @param signerOrProvider Signer or provider to use for transactions. For example:
     * `new ethers.providers.JsonRpcProvider('https://mainnet.infura.io')` or
     * `new ethers.Wallet(privKey, provider)`
     * @param apiConfig configuration options, including `chain`
     * @param logger optional function for logging debug strings. defaults to no logging
     */constructor(signerOrProvider,apiConfig=(cov_i250qerm0().b[0][0]++,{}),logger){cov_i250qerm0().f[0]++;cov_i250qerm0().s[14]++;/** Internal cache of decimals for payment tokens to save network requests */this._cachedPaymentTokenDecimals={};cov_i250qerm0().s[15]++;this.getAmountWithBasisPointsApplied=(amount,basisPoints)=>{cov_i250qerm0().f[1]++;cov_i250qerm0().s[16]++;return(amount*basisPoints/constants_2.INVERSE_BASIS_POINT).toString();};// API config
cov_i250qerm0().s[17]++;(cov_i250qerm0().b[1][0]++,apiConfig.chain)??(cov_i250qerm0().b[1][1]++,apiConfig.chain=types_2.Chain.Mainnet);cov_i250qerm0().s[18]++;this.chain=apiConfig.chain;cov_i250qerm0().s[19]++;this.api=new api_1.OpenSeaAPI(apiConfig);cov_i250qerm0().s[20]++;this.provider=(cov_i250qerm0().b[2][0]++,signerOrProvider.provider)??(cov_i250qerm0().b[2][1]++,signerOrProvider);cov_i250qerm0().s[21]++;this._signerOrProvider=(cov_i250qerm0().b[3][0]++,signerOrProvider)??(cov_i250qerm0().b[3][1]++,this.provider);// eslint-disable-next-line @typescript-eslint/no-explicit-any
cov_i250qerm0().s[22]++;this.seaport_v1_5=new seaport_js_1.Seaport(this._signerOrProvider,{overrides:{contractAddress:constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS,seaportVersion:"1.5",defaultConduitKey:constants_1.OPENSEA_CONDUIT_KEY}});// eslint-disable-next-line @typescript-eslint/no-explicit-any
cov_i250qerm0().s[23]++;this.seaport_v1_6=new seaport_js_1.Seaport(this._signerOrProvider,{overrides:{defaultConduitKey:constants_1.OPENSEA_CONDUIT_KEY}});// Emit events
cov_i250qerm0().s[24]++;this._emitter=new EventEmitter();// Logger: default to no logging if fn not provided
cov_i250qerm0().s[25]++;this.logger=(cov_i250qerm0().b[4][0]++,logger)??(cov_i250qerm0().b[4][1]++,arg=>{cov_i250qerm0().f[2]++;cov_i250qerm0().s[26]++;return arg;});// Cache decimals for WETH payment token to skip network request
cov_i250qerm0().s[27]++;try{const wethAddress=(cov_i250qerm0().s[28]++,(0,utils_2.getWETHAddress)(this.chain).toLowerCase());cov_i250qerm0().s[29]++;this._cachedPaymentTokenDecimals[wethAddress]=18;// eslint-disable-next-line @typescript-eslint/no-explicit-any
}catch(error){cov_i250qerm0().s[30]++;if(error.message.includes("Unknown WETH address")){cov_i250qerm0().b[5][0]++;}// Ignore
else{cov_i250qerm0().b[5][1]++;cov_i250qerm0().s[31]++;console.error(error);}}}/**
     * Add a listener for events emitted by the SDK.
     * @param event The {@link EventType} to listen to.
     * @param listener A callback that will accept an object with {@link EventData}\
     * @param once Whether the listener should only be called once, or continue listening until removed.
     */addListener(event,listener,once=(cov_i250qerm0().b[6][0]++,false)){cov_i250qerm0().f[3]++;cov_i250qerm0().s[32]++;if(once){cov_i250qerm0().b[7][0]++;cov_i250qerm0().s[33]++;this._emitter.once(event,listener);}else{cov_i250qerm0().b[7][1]++;cov_i250qerm0().s[34]++;this._emitter.addListener(event,listener);}}/**
     * Remove an event listener by calling `.removeListener()` on an event and listener.
     * @param event The {@link EventType} to remove a listener for\
     * @param listener The listener to remove
     */removeListener(event,listener){cov_i250qerm0().f[4]++;cov_i250qerm0().s[35]++;this._emitter.removeListener(event,listener);}/**
     * Remove all event listeners. This should be called when you're unmounting
     * a component that listens to events to make UI updates.
     * @param event Optional EventType to remove listeners for
     */removeAllListeners(event){cov_i250qerm0().f[5]++;cov_i250qerm0().s[36]++;this._emitter.removeAllListeners(event);}/**
     * Wrap ETH into WETH.
     * W-ETH is needed for making offers.
     * @param options
     * @param options.amountInEth Amount of ether to wrap
     * @param options.accountAddress Address of the user's wallet containing the ether
     */async wrapEth({amountInEth,accountAddress}){cov_i250qerm0().f[6]++;cov_i250qerm0().s[37]++;await this._requireAccountIsAvailable(accountAddress);const value=(cov_i250qerm0().s[38]++,(0,ethers_1.parseEther)(ethers_1.FixedNumber.fromValue(amountInEth).toString()));cov_i250qerm0().s[39]++;this._dispatch(types_2.EventType.WrapEth,{accountAddress,amount:value});const wethContract=(cov_i250qerm0().s[40]++,new ethers_1.Contract((0,utils_2.getWETHAddress)(this.chain),["function deposit() payable"],this._signerOrProvider));cov_i250qerm0().s[41]++;try{const transaction=(cov_i250qerm0().s[42]++,await wethContract.deposit({value}));cov_i250qerm0().s[43]++;await this._confirmTransaction(transaction.hash,types_2.EventType.WrapEth,"Wrapping ETH");}catch(error){cov_i250qerm0().s[44]++;console.error(error);cov_i250qerm0().s[45]++;this._dispatch(types_2.EventType.TransactionDenied,{error,accountAddress});}}/**
     * Unwrap WETH into ETH.
     * Emits the `UnwrapWeth` event when the transaction is prompted.
     * @param options
     * @param options.amountInEth How much WETH to unwrap
     * @param options.accountAddress Address of the user's wallet containing the WETH
     */async unwrapWeth({amountInEth,accountAddress}){cov_i250qerm0().f[7]++;cov_i250qerm0().s[46]++;await this._requireAccountIsAvailable(accountAddress);const amount=(cov_i250qerm0().s[47]++,(0,ethers_1.parseEther)(ethers_1.FixedNumber.fromValue(amountInEth).toString()));cov_i250qerm0().s[48]++;this._dispatch(types_2.EventType.UnwrapWeth,{accountAddress,amount});const wethContract=(cov_i250qerm0().s[49]++,new ethers_1.Contract((0,utils_2.getWETHAddress)(this.chain),["function withdraw(uint wad) public"],this._signerOrProvider));cov_i250qerm0().s[50]++;try{const transaction=(cov_i250qerm0().s[51]++,await wethContract.withdraw(amount));cov_i250qerm0().s[52]++;await this._confirmTransaction(transaction.hash,types_2.EventType.UnwrapWeth,"Unwrapping W-ETH");}catch(error){cov_i250qerm0().s[53]++;console.error(error);cov_i250qerm0().s[54]++;this._dispatch(types_2.EventType.TransactionDenied,{error,accountAddress});}}async getFees({collection,seller,paymentTokenAddress,startAmount,endAmount,excludeOptionalCreatorFees}){cov_i250qerm0().f[8]++;let collectionFees=(cov_i250qerm0().s[55]++,collection.fees);cov_i250qerm0().s[56]++;if(excludeOptionalCreatorFees){cov_i250qerm0().b[8][0]++;cov_i250qerm0().s[57]++;collectionFees=collectionFees.filter(fee=>{cov_i250qerm0().f[9]++;cov_i250qerm0().s[58]++;return fee.required;});}else{cov_i250qerm0().b[8][1]++;}const collectionFeesBasisPoints=(cov_i250qerm0().s[59]++,(0,utils_2.totalBasisPointsForFees)(collectionFees));const sellerBasisPoints=(cov_i250qerm0().s[60]++,constants_2.INVERSE_BASIS_POINT-collectionFeesBasisPoints);cov_i250qerm0().s[61]++;const getConsiderationItem=(basisPoints,recipient)=>{cov_i250qerm0().f[10]++;cov_i250qerm0().s[62]++;return{token:paymentTokenAddress,amount:this.getAmountWithBasisPointsApplied(startAmount,basisPoints),endAmount:this.getAmountWithBasisPointsApplied((cov_i250qerm0().b[9][0]++,endAmount)??(cov_i250qerm0().b[9][1]++,startAmount),basisPoints),recipient};};const considerationItems=(cov_i250qerm0().s[63]++,[]);cov_i250qerm0().s[64]++;if(seller){cov_i250qerm0().b[10][0]++;cov_i250qerm0().s[65]++;considerationItems.push(getConsiderationItem(sellerBasisPoints,seller));}else{cov_i250qerm0().b[10][1]++;}cov_i250qerm0().s[66]++;if(collectionFeesBasisPoints>0){cov_i250qerm0().b[11][0]++;cov_i250qerm0().s[67]++;for(const fee of collectionFees){cov_i250qerm0().s[68]++;considerationItems.push(getConsiderationItem((0,utils_2.basisPointsForFee)(fee),fee.recipient));}}else{cov_i250qerm0().b[11][1]++;}cov_i250qerm0().s[69]++;return considerationItems;}getNFTItems(nfts,quantities=(cov_i250qerm0().b[12][0]++,[])){cov_i250qerm0().f[11]++;cov_i250qerm0().s[70]++;return nfts.map((nft,index)=>{cov_i250qerm0().f[12]++;cov_i250qerm0().s[71]++;return{itemType:(0,utils_2.getAssetItemType)(nft.token_standard.toUpperCase()),token:(0,utils_2.getAddressAfterRemappingSharedStorefrontAddressToLazyMintAdapterAddress)(nft.contract),identifier:(cov_i250qerm0().b[13][0]++,nft.identifier)??(cov_i250qerm0().b[13][1]++,undefined),amount:(cov_i250qerm0().b[14][0]++,quantities[index].toString())??(cov_i250qerm0().b[14][1]++,"1")};});}/**
     * Create and submit an offer on an asset.
     * @param options
     * @param options.asset The asset to trade. tokenAddress and tokenId must be defined.
     * @param options.accountAddress Address of the wallet making the offer.
     * @param options.startAmount Value of the offer in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified)
     * @param options.quantity The number of assets to bid for (if fungible or semi-fungible). Defaults to 1.
     * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt.
     * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.
     * @param options.expirationTime Expiration time for the order, in UTC seconds
     * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to WETH
     * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the offer. Default: true.
     * @param options.zone The zone to use for the order. For order protection, pass SIGNED_ZONE. If unspecified, defaults to no zone.
     *
     * @returns The {@link OrderV2} that was created.
     *
     * @throws Error if the asset does not contain a token id.
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the startAmount is not greater than 0.
     * @throws Error if paymentTokenAddress is not WETH on anything other than Ethereum mainnet.
     */async createOffer({asset,accountAddress,startAmount,quantity=(cov_i250qerm0().b[15][0]++,1),domain,salt,expirationTime,paymentTokenAddress=(cov_i250qerm0().b[16][0]++,(0,utils_2.getWETHAddress)(this.chain)),excludeOptionalCreatorFees=(cov_i250qerm0().b[17][0]++,true),zone=(cov_i250qerm0().b[18][0]++,ethers_1.ZeroAddress)}){cov_i250qerm0().f[13]++;cov_i250qerm0().s[72]++;await this._requireAccountIsAvailable(accountAddress);const{nft}=(cov_i250qerm0().s[73]++,await this.api.getNFT(asset.tokenAddress,asset.tokenId));const considerationAssetItems=(cov_i250qerm0().s[74]++,this.getNFTItems([nft],[BigInt((cov_i250qerm0().b[19][0]++,quantity)??(cov_i250qerm0().b[19][1]++,1))]));const{basePrice}=(cov_i250qerm0().s[75]++,await this._getPriceParameters(types_2.OrderSide.OFFER,paymentTokenAddress,(cov_i250qerm0().b[20][0]++,expirationTime)??(cov_i250qerm0().b[20][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)()),startAmount));const collection=(cov_i250qerm0().s[76]++,await this.api.getCollection(nft.collection));const considerationFeeItems=(cov_i250qerm0().s[77]++,await this.getFees({collection,paymentTokenAddress,startAmount:basePrice,excludeOptionalCreatorFees}));cov_i250qerm0().s[78]++;if(collection.requiredZone){cov_i250qerm0().b[21][0]++;cov_i250qerm0().s[79]++;zone=collection.requiredZone;}else{cov_i250qerm0().b[21][1]++;}const{executeAllActions}=(cov_i250qerm0().s[80]++,await this.seaport_v1_6.createOrder({offer:[{token:paymentTokenAddress,amount:basePrice.toString()}],consideration:[...considerationAssetItems,...considerationFeeItems],endTime:expirationTime!==undefined?(cov_i250qerm0().b[22][0]++,BigInt(expirationTime).toString()):(cov_i250qerm0().b[22][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)().toString()),zone,domain,salt:BigInt((cov_i250qerm0().b[23][0]++,salt)??(cov_i250qerm0().b[23][1]++,0)).toString(),restrictedByZone:zone!==ethers_1.ZeroAddress,allowPartialFills:true},accountAddress));const order=(cov_i250qerm0().s[81]++,await executeAllActions());cov_i250qerm0().s[82]++;return this.api.postOrder(order,{protocol:"seaport",protocolAddress:utils_1.DEFAULT_SEAPORT_CONTRACT_ADDRESS,side:types_2.OrderSide.OFFER});}/**
     * Create and submit a listing for an asset.
     * @param options
     * @param options.asset The asset to trade. tokenAddress and tokenId must be defined.
     * @param options.accountAddress  Address of the wallet making the listing
     * @param options.startAmount Value of the listing at the start of the auction in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified)
     * @param options.endAmount Value of the listing at the end of the auction. If specified, price will change linearly between startAmount and endAmount as time progresses.
     * @param options.quantity The number of assets to list (if fungible or semi-fungible). Defaults to 1.
     * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt. This can be used for on-chain order attribution to assist with analytics.
     * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.
     * @param options.listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
     * @param options.expirationTime Expiration time for the order, in UTC seconds.
     * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to ETH
     * @param options.buyerAddress Optional address that's allowed to purchase this item. If specified, no other address will be able to take the order, unless its value is the null address.
     * @param options.englishAuction If true, the order will be listed as an English auction.
     * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the listing. Default: false.
     * @param options.zone The zone to use for the order.  For order protection, pass SIGNED_ZONE. If unspecified, defaults to no zone.
     * @returns The {@link OrderV2} that was created.
     *
     * @throws Error if the asset does not contain a token id.
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the startAmount is not greater than 0.
     * @throws Error if paymentTokenAddress is not WETH on anything other than Ethereum mainnet.
     */async createListing({asset,accountAddress,startAmount,endAmount,quantity=(cov_i250qerm0().b[24][0]++,1),domain,salt,listingTime,expirationTime,paymentTokenAddress=(cov_i250qerm0().b[25][0]++,ethers_1.ethers.ZeroAddress),buyerAddress,englishAuction,excludeOptionalCreatorFees=(cov_i250qerm0().b[26][0]++,false),zone=(cov_i250qerm0().b[27][0]++,ethers_1.ZeroAddress)}){cov_i250qerm0().f[14]++;cov_i250qerm0().s[83]++;await this._requireAccountIsAvailable(accountAddress);const{nft}=(cov_i250qerm0().s[84]++,await this.api.getNFT(asset.tokenAddress,asset.tokenId));const offerAssetItems=(cov_i250qerm0().s[85]++,this.getNFTItems([nft],[BigInt((cov_i250qerm0().b[28][0]++,quantity)??(cov_i250qerm0().b[28][1]++,1))]));cov_i250qerm0().s[86]++;if((cov_i250qerm0().b[30][0]++,englishAuction)&&(cov_i250qerm0().b[30][1]++,paymentTokenAddress==ethers_1.ethers.ZeroAddress)){cov_i250qerm0().b[29][0]++;cov_i250qerm0().s[87]++;throw new Error(`English auctions must use wrapped ETH or an ERC-20 token.`);}else{cov_i250qerm0().b[29][1]++;}const{basePrice,endPrice}=(cov_i250qerm0().s[88]++,await this._getPriceParameters(types_2.OrderSide.LISTING,paymentTokenAddress,(cov_i250qerm0().b[31][0]++,expirationTime)??(cov_i250qerm0().b[31][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)()),startAmount,(cov_i250qerm0().b[32][0]++,endAmount)??(cov_i250qerm0().b[32][1]++,undefined)));const collection=(cov_i250qerm0().s[89]++,await this.api.getCollection(nft.collection));const considerationFeeItems=(cov_i250qerm0().s[90]++,await this.getFees({collection,seller:accountAddress,paymentTokenAddress,startAmount:basePrice,endAmount:endPrice,excludeOptionalCreatorFees}));cov_i250qerm0().s[91]++;if(buyerAddress){cov_i250qerm0().b[33][0]++;cov_i250qerm0().s[92]++;considerationFeeItems.push(...(0,privateListings_1.getPrivateListingConsiderations)(offerAssetItems,buyerAddress));}else{cov_i250qerm0().b[33][1]++;}cov_i250qerm0().s[93]++;if(englishAuction){cov_i250qerm0().b[34][0]++;cov_i250qerm0().s[94]++;zone=(0,utils_2.isTestChain)(this.chain)?(cov_i250qerm0().b[35][0]++,constants_2.ENGLISH_AUCTION_ZONE_TESTNETS):(cov_i250qerm0().b[35][1]++,constants_2.ENGLISH_AUCTION_ZONE_MAINNETS);}else{cov_i250qerm0().b[34][1]++;cov_i250qerm0().s[95]++;if(collection.requiredZone){cov_i250qerm0().b[36][0]++;cov_i250qerm0().s[96]++;zone=collection.requiredZone;}else{cov_i250qerm0().b[36][1]++;}}const{executeAllActions}=(cov_i250qerm0().s[97]++,await this.seaport_v1_6.createOrder({offer:offerAssetItems,consideration:considerationFeeItems,startTime:listingTime?.toString(),endTime:(cov_i250qerm0().b[37][0]++,expirationTime?.toString())??(cov_i250qerm0().b[37][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)().toString()),zone,domain,salt:BigInt((cov_i250qerm0().b[38][0]++,salt)??(cov_i250qerm0().b[38][1]++,0)).toString(),restrictedByZone:zone!==ethers_1.ZeroAddress,allowPartialFills:englishAuction?(cov_i250qerm0().b[39][0]++,false):(cov_i250qerm0().b[39][1]++,true)},accountAddress));const order=(cov_i250qerm0().s[98]++,await executeAllActions());cov_i250qerm0().s[99]++;return this.api.postOrder(order,{protocol:"seaport",protocolAddress:utils_1.DEFAULT_SEAPORT_CONTRACT_ADDRESS,side:types_2.OrderSide.LISTING});}/**
     * Create and submit a collection offer.
     * @param options
     * @param options.collectionSlug Identifier for the collection.
     * @param options.accountAddress Address of the wallet making the offer.
     * @param options.amount Value of the offer in units, not base units e.g. not wei, of the payment token (or WETH if no payment token address specified).
     * @param options.quantity The number of assets to bid for (if fungible or semi-fungible).
     * @param options.domain An optional domain to be hashed and included in the first four bytes of the random salt. This can be used for on-chain order attribution to assist with analytics.
     * @param options.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.
     * @param options.expirationTime Expiration time for the order, in UTC seconds.
     * @param options.paymentTokenAddress ERC20 address for the payment token in the order. If unspecified, defaults to WETH.
     * @param options.excludeOptionalCreatorFees If true, optional creator fees will be excluded from the offer. Default: false.
     * @param options.offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.
     * @param options.traitType If defined, the trait name to create the collection offer for.
     * @param options.traitValue If defined, the trait value to create the collection offer for.
     * @returns The {@link CollectionOffer} that was created.
     */async createCollectionOffer({collectionSlug,accountAddress,amount,quantity,domain,salt,expirationTime,paymentTokenAddress=(cov_i250qerm0().b[40][0]++,(0,utils_2.getWETHAddress)(this.chain)),excludeOptionalCreatorFees=(cov_i250qerm0().b[41][0]++,false),offerProtectionEnabled=(cov_i250qerm0().b[42][0]++,true),traitType,traitValue}){cov_i250qerm0().f[15]++;cov_i250qerm0().s[100]++;await this._requireAccountIsAvailable(accountAddress);const collection=(cov_i250qerm0().s[101]++,await this.api.getCollection(collectionSlug));const buildOfferResult=(cov_i250qerm0().s[102]++,await this.api.buildOffer(accountAddress,quantity,collectionSlug,offerProtectionEnabled,traitType,traitValue));const item=(cov_i250qerm0().s[103]++,buildOfferResult.partialParameters.consideration[0]);const convertedConsiderationItem=(cov_i250qerm0().s[104]++,{itemType:item.itemType,token:item.token,identifier:item.identifierOrCriteria,amount:item.startAmount});const{basePrice}=(cov_i250qerm0().s[105]++,await this._getPriceParameters(types_2.OrderSide.LISTING,paymentTokenAddress,(cov_i250qerm0().b[43][0]++,expirationTime)??(cov_i250qerm0().b[43][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)()),amount));const considerationFeeItems=(cov_i250qerm0().s[106]++,await this.getFees({collection,paymentTokenAddress,startAmount:basePrice,endAmount:basePrice,excludeOptionalCreatorFees}));const considerationItems=(cov_i250qerm0().s[107]++,[convertedConsiderationItem,...considerationFeeItems]);const payload=(cov_i250qerm0().s[108]++,{offerer:accountAddress,offer:[{token:paymentTokenAddress,amount:basePrice.toString()}],consideration:considerationItems,endTime:(cov_i250qerm0().b[44][0]++,expirationTime?.toString())??(cov_i250qerm0().b[44][1]++,(0,utils_2.getMaxOrderExpirationTimestamp)().toString()),zone:buildOfferResult.partialParameters.zone,domain,salt:BigInt((cov_i250qerm0().b[45][0]++,salt)??(cov_i250qerm0().b[45][1]++,0)).toString(),restrictedByZone:true,allowPartialFills:true});const{executeAllActions}=(cov_i250qerm0().s[109]++,await this.seaport_v1_6.createOrder(payload,accountAddress));const order=(cov_i250qerm0().s[110]++,await executeAllActions());cov_i250qerm0().s[111]++;return this.api.postCollectionOffer(order,collectionSlug,traitType,traitValue);}/**
     * Fulfill a private order for a designated address.
     * @param options
     * @param options.order The order to fulfill
     * @param options.accountAddress Address of the wallet taking the order.
     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.
     *                       This can be used for on-chain order attribution to assist with analytics.
     * @param options.overrides Transaction overrides, ignored if not set.
     * @returns Transaction hash of the order.
     */async fulfillPrivateOrder({order,accountAddress,domain,overrides}){cov_i250qerm0().f[16]++;cov_i250qerm0().s[112]++;if(!order.taker?.address){cov_i250qerm0().b[46][0]++;cov_i250qerm0().s[113]++;throw new Error("Order is not a private listing - must have a taker address");}else{cov_i250qerm0().b[46][1]++;}const counterOrder=(cov_i250qerm0().s[114]++,(0,privateListings_1.constructPrivateListingCounterOrder)(order.protocolData,order.taker.address));const fulfillments=(cov_i250qerm0().s[115]++,(0,privateListings_1.getPrivateListingFulfillments)(order.protocolData));const seaport=(cov_i250qerm0().s[116]++,this.getSeaport(order.protocolAddress));const transaction=(cov_i250qerm0().s[117]++,await seaport.matchOrders({orders:[order.protocolData,counterOrder],fulfillments,overrides:{...overrides,value:counterOrder.parameters.offer[0].startAmount},accountAddress,domain}).transact());const transactionReceipt=(cov_i250qerm0().s[118]++,await transaction.wait());cov_i250qerm0().s[119]++;if(!transactionReceipt){cov_i250qerm0().b[47][0]++;cov_i250qerm0().s[120]++;throw new Error("Missing transaction receipt");}else{cov_i250qerm0().b[47][1]++;}cov_i250qerm0().s[121]++;await this._confirmTransaction(transactionReceipt.hash,types_2.EventType.MatchOrders,"Fulfilling order");cov_i250qerm0().s[122]++;return transactionReceipt.hash;}/**
     * Fulfill an order for an asset. The order can be either a listing or an offer.
     * @param options
     * @param options.order The order to fulfill, a.k.a. "take"
     * @param options.accountAddress Address of the wallet taking the offer.
     * @param options.recipientAddress The optional address to receive the order's item(s) or currencies. If not specified, defaults to accountAddress.
     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.
     * @param options.overrides Transaction overrides, ignored if not set.
     * @returns Transaction hash of the order.
     *
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     * @throws Error if attempting to fulfill the order with a recipient address which does not match a private listing.
     */async fulfillOrder({order,accountAddress,recipientAddress,domain,overrides}){cov_i250qerm0().f[17]++;cov_i250qerm0().s[123]++;await this._requireAccountIsAvailable(accountAddress);const protocolAddress=(cov_i250qerm0().s[124]++,(cov_i250qerm0().b[48][0]++,order.protocolAddress)??(cov_i250qerm0().b[48][1]++,order.protocol_address));cov_i250qerm0().s[125]++;(0,utils_2.requireValidProtocol)(protocolAddress);const orderHash=(cov_i250qerm0().s[126]++,(cov_i250qerm0().b[49][0]++,order.orderHash)??(cov_i250qerm0().b[49][1]++,order.order_hash));const side=(cov_i250qerm0().s[127]++,(cov_i250qerm0().b[50][0]++,order.side)??(cov_i250qerm0().b[50][1]++,[types_1.OrderType.BASIC,types_1.OrderType.ENGLISH].includes(order.type)?(cov_i250qerm0().b[51][0]++,types_2.OrderSide.LISTING):(cov_i250qerm0().b[51][1]++,types_2.OrderSide.OFFER)));let extraData=(cov_i250qerm0().s[128]++,undefined);const protocolData=(cov_i250qerm0().s[129]++,(cov_i250qerm0().b[52][0]++,order.protocolData)??(cov_i250qerm0().b[52][1]++,order.protocol_data));cov_i250qerm0().s[130]++;if(orderHash){cov_i250qerm0().b[53][0]++;const result=(cov_i250qerm0().s[131]++,await this.api.generateFulfillmentData(accountAddress,orderHash,protocolAddress,side));// If the order is using offer protection, the extraData
// must be included with the order to successfully fulfill.
const inputData=(cov_i250qerm0().s[132]++,result.fulfillment_data.transaction.input_data);cov_i250qerm0().s[133]++;if((cov_i250qerm0().b[55][0]++,"orders"in inputData)&&(cov_i250qerm0().b[55][1]++,"extraData"in inputData.orders[0])){cov_i250qerm0().b[54][0]++;cov_i250qerm0().s[134]++;extraData=inputData.orders[0].extraData;}else{cov_i250qerm0().b[54][1]++;}const signature=(cov_i250qerm0().s[135]++,result.fulfillment_data.orders[0].signature);cov_i250qerm0().s[136]++;protocolData.signature=signature;}else{cov_i250qerm0().b[53][1]++;}const isPrivateListing=(cov_i250qerm0().s[137]++,"taker"in order?(cov_i250qerm0().b[56][0]++,!!order.taker):(cov_i250qerm0().b[56][1]++,false));cov_i250qerm0().s[138]++;if(isPrivateListing){cov_i250qerm0().b[57][0]++;cov_i250qerm0().s[139]++;if(recipientAddress){cov_i250qerm0().b[58][0]++;cov_i250qerm0().s[140]++;throw new Error("Private listings cannot be fulfilled with a recipient address");}else{cov_i250qerm0().b[58][1]++;}cov_i250qerm0().s[141]++;return this.fulfillPrivateOrder({order:order,accountAddress,domain,overrides});}else{cov_i250qerm0().b[57][1]++;}const seaport=(cov_i250qerm0().s[142]++,this.getSeaport(protocolAddress));const{executeAllActions}=(cov_i250qerm0().s[143]++,await seaport.fulfillOrder({order:protocolData,accountAddress,recipientAddress,extraData,domain,overrides}));const transaction=(cov_i250qerm0().s[144]++,await executeAllActions());const transactionHash=(cov_i250qerm0().s[145]++,ethers_1.ethers.Transaction.from(transaction).hash);cov_i250qerm0().s[146]++;if(!transactionHash){cov_i250qerm0().b[59][0]++;cov_i250qerm0().s[147]++;throw new Error("Missing transaction hash");}else{cov_i250qerm0().b[59][1]++;}cov_i250qerm0().s[148]++;await this._confirmTransaction(transactionHash,types_2.EventType.MatchOrders,"Fulfilling order");cov_i250qerm0().s[149]++;return transactionHash;}/**
     * Utility function to get the Seaport client based on the address.
     * @param protocolAddress The Seaport address.
     */getSeaport(protocolAddress){cov_i250qerm0().f[18]++;const checksummedProtocolAddress=(cov_i250qerm0().s[150]++,ethers_1.ethers.getAddress(protocolAddress));cov_i250qerm0().s[151]++;switch(checksummedProtocolAddress){case constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS:cov_i250qerm0().b[60][0]++;cov_i250qerm0().s[152]++;return this.seaport_v1_5;case constants_1.CROSS_CHAIN_SEAPORT_V1_6_ADDRESS:cov_i250qerm0().b[60][1]++;cov_i250qerm0().s[153]++;return this.seaport_v1_6;default:cov_i250qerm0().b[60][2]++;cov_i250qerm0().s[154]++;throw new Error(`Unsupported protocol address: ${protocolAddress}`);}}/**
     * Cancel orders onchain, preventing them from being fulfilled.
     * @param options
     * @param options.orders The orders to cancel
     * @param options.accountAddress The account address cancelling the orders.
     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.
     *                       This can be used for on-chain order attribution to assist with analytics.
     * @param options.overrides Transaction overrides, ignored if not set.
     * @returns Transaction hash of the order.
     */async cancelSeaportOrders({orders,accountAddress,domain,protocolAddress=(cov_i250qerm0().b[61][0]++,utils_1.DEFAULT_SEAPORT_CONTRACT_ADDRESS),overrides}){cov_i250qerm0().f[19]++;const seaport=(cov_i250qerm0().s[155]++,this.getSeaport(protocolAddress));const transaction=(cov_i250qerm0().s[156]++,await seaport.cancelOrders(orders,accountAddress,domain,overrides).transact());cov_i250qerm0().s[157]++;return transaction.hash;}/**
     * Cancel an order onchain, preventing it from ever being fulfilled.
     * @param options
     * @param options.order The order to cancel
     * @param options.accountAddress The account address that will be cancelling the order.
     * @param options.domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.
     *
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     */async cancelOrder({order,accountAddress,domain}){cov_i250qerm0().f[20]++;cov_i250qerm0().s[158]++;await this._requireAccountIsAvailable(accountAddress);cov_i250qerm0().s[159]++;(0,utils_2.requireValidProtocol)(order.protocolAddress);cov_i250qerm0().s[160]++;this._dispatch(types_2.EventType.CancelOrder,{orderV2:order,accountAddress});// Transact and get the transaction hash
const transactionHash=(cov_i250qerm0().s[161]++,await this.cancelSeaportOrders({orders:[order.protocolData.parameters],accountAddress,domain,protocolAddress:order.protocolAddress}));// Await transaction confirmation
cov_i250qerm0().s[162]++;await this._confirmTransaction(transactionHash,types_2.EventType.CancelOrder,"Cancelling order");}_getSeaportVersion(protocolAddress){cov_i250qerm0().f[21]++;const protocolAddressChecksummed=(cov_i250qerm0().s[163]++,ethers_1.ethers.getAddress(protocolAddress));cov_i250qerm0().s[164]++;switch(protocolAddressChecksummed){case constants_1.CROSS_CHAIN_SEAPORT_V1_6_ADDRESS:cov_i250qerm0().b[62][0]++;cov_i250qerm0().s[165]++;return"1.6";case constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS:cov_i250qerm0().b[62][1]++;cov_i250qerm0().s[166]++;return"1.5";default:cov_i250qerm0().b[62][2]++;cov_i250qerm0().s[167]++;throw new Error("Unknown or unsupported protocol address");}}/**
     * Get the offerer signature for canceling an order offchain.
     * The signature will only be valid if the signer address is the address of the order's offerer.
     */async _getOffererSignature(protocolAddress,orderHash,chain){cov_i250qerm0().f[22]++;const chainId=(cov_i250qerm0().s[168]++,(0,utils_2.getChainId)(chain));const name=(cov_i250qerm0().s[169]++,"Seaport");const version=(cov_i250qerm0().s[170]++,this._getSeaportVersion(protocolAddress));cov_i250qerm0().s[171]++;if(typeof this._signerOrProvider.signTypedData=="undefined"){cov_i250qerm0().b[63][0]++;cov_i250qerm0().s[172]++;throw new Error("Please pass an ethers Signer into this sdk to derive an offerer signature");}else{cov_i250qerm0().b[63][1]++;}cov_i250qerm0().s[173]++;return this._signerOrProvider.signTypedData({chainId,name,version,verifyingContract:protocolAddress},{OrderHash:[{name:"orderHash",type:"bytes32"}]},{orderHash});}/**
     * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.
     * Protocol and Chain are required to prevent hash collisions.
     * Please note cancellation is only assured if a fulfillment signature was not vended prior to cancellation.
     * @param protocolAddress The Seaport address for the order.
     * @param orderHash The order hash, or external identifier, of the order.
     * @param chain The chain where the order is located.
     * @param offererSignature An EIP-712 signature from the offerer of the order.
     *                         If this is not provided, the user associated with the API Key will be checked instead.
     *                         The signature must be a EIP-712 signature consisting of the order's Seaport contract's
     *                         name, version, address, and chain. The struct to sign is `OrderHash` containing a
     *                         single bytes32 field.
     * @param useSignerToDeriveOffererSignature Derive the offererSignature from the Ethers signer passed into this sdk.
     * @returns The response from the API.
     */async offchainCancelOrder(protocolAddress,orderHash,chain=(cov_i250qerm0().b[64][0]++,this.chain),offererSignature,useSignerToDeriveOffererSignature){cov_i250qerm0().f[23]++;cov_i250qerm0().s[174]++;if(useSignerToDeriveOffererSignature){cov_i250qerm0().b[65][0]++;cov_i250qerm0().s[175]++;offererSignature=await this._getOffererSignature(protocolAddress,orderHash,chain);}else{cov_i250qerm0().b[65][1]++;}cov_i250qerm0().s[176]++;return this.api.offchainCancelOrder(protocolAddress,orderHash,chain,offererSignature);}/**
     * Returns whether an order is fulfillable.
     * An order may not be fulfillable if a target item's transfer function
     * is locked for some reason, e.g. an item is being rented within a game
     * or trading has been locked for an item type.
     * @param options
     * @param options.order Order to check
     * @param options.accountAddress The account address that will be fulfilling the order
     * @returns True if the order is fulfillable, else False.
     *
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     */async isOrderFulfillable({order,accountAddress}){cov_i250qerm0().f[24]++;cov_i250qerm0().s[177]++;(0,utils_2.requireValidProtocol)(order.protocolAddress);const seaport=(cov_i250qerm0().s[178]++,this.getSeaport(order.protocolAddress));cov_i250qerm0().s[179]++;try{const isValid=(cov_i250qerm0().s[180]++,await seaport.validate([order.protocolData],accountAddress).staticCall());cov_i250qerm0().s[181]++;return!!isValid;}catch(error){cov_i250qerm0().s[182]++;if((cov_i250qerm0().b[67][0]++,(0,utils_2.hasErrorCode)(error))&&(cov_i250qerm0().b[67][1]++,error.code==="CALL_EXCEPTION")){cov_i250qerm0().b[66][0]++;cov_i250qerm0().s[183]++;return false;}else{cov_i250qerm0().b[66][1]++;}cov_i250qerm0().s[184]++;throw error;}}/**
     * Get an account's balance of any Asset. This asset can be an ERC20, ERC1155, or ERC721.
     * @param options
     * @param options.accountAddress Account address to check
     * @param options.asset The Asset to check balance for. tokenStandard must be set.
     * @returns The balance of the asset for the account.
     *
     * @throws Error if the token standard does not support balanceOf.
     */async getBalance({accountAddress,asset}){cov_i250qerm0().f[25]++;cov_i250qerm0().s[185]++;switch(asset.tokenStandard){case types_2.TokenStandard.ERC20:cov_i250qerm0().b[68][0]++;{const contract=(cov_i250qerm0().s[186]++,contracts_1.ERC20__factory.connect(asset.tokenAddress,this.provider));cov_i250qerm0().s[187]++;return await contract.balanceOf.staticCall(accountAddress);}case types_2.TokenStandard.ERC1155:cov_i250qerm0().b[68][1]++;{cov_i250qerm0().s[188]++;if((cov_i250qerm0().b[70][0]++,asset.tokenId===undefined)||(cov_i250qerm0().b[70][1]++,asset.tokenId===null)){cov_i250qerm0().b[69][0]++;cov_i250qerm0().s[189]++;throw new Error("Missing ERC1155 tokenId for getBalance");}else{cov_i250qerm0().b[69][1]++;}const contract=(cov_i250qerm0().s[190]++,contracts_1.ERC1155__factory.connect(asset.tokenAddress,this.provider));cov_i250qerm0().s[191]++;return await contract.balanceOf.staticCall(accountAddress,asset.tokenId);}case types_2.TokenStandard.ERC721:cov_i250qerm0().b[68][2]++;{cov_i250qerm0().s[192]++;if((cov_i250qerm0().b[72][0]++,asset.tokenId===undefined)||(cov_i250qerm0().b[72][1]++,asset.tokenId===null)){cov_i250qerm0().b[71][0]++;cov_i250qerm0().s[193]++;throw new Error("Missing ERC721 tokenId for getBalance");}else{cov_i250qerm0().b[71][1]++;}const contract=(cov_i250qerm0().s[194]++,contracts_1.ERC721__factory.connect(asset.tokenAddress,this.provider));cov_i250qerm0().s[195]++;try{const owner=(cov_i250qerm0().s[196]++,await contract.ownerOf.staticCall(asset.tokenId));cov_i250qerm0().s[197]++;return BigInt(owner.toLowerCase()==accountAddress.toLowerCase());// eslint-disable-next-line @typescript-eslint/no-explicit-any
}catch(error){cov_i250qerm0().s[198]++;this.logger(`Failed to get ownerOf ERC721: ${(cov_i250qerm0().b[73][0]++,error.message)??(cov_i250qerm0().b[73][1]++,error)}`);cov_i250qerm0().s[199]++;return 0n;}}default:cov_i250qerm0().b[68][3]++;cov_i250qerm0().s[200]++;throw new Error("Unsupported token standard for getBalance");}}/**
     * Transfer an asset. This asset can be an ERC20, ERC1155, or ERC721.
     * @param options
     * @param options.asset The Asset to transfer. tokenStandard must be set.
     * @param options.amount Amount of asset to transfer. Not used for ERC721.
     * @param options.fromAddress The address to transfer from
     * @param options.toAddress The address to transfer to
     * @param options.overrides Transaction overrides, ignored if not set.
     */async transfer({asset,amount,fromAddress,toAddress,overrides}){cov_i250qerm0().f[26]++;cov_i250qerm0().s[201]++;await this._requireAccountIsAvailable(fromAddress);cov_i250qerm0().s[202]++;overrides={...overrides,from:fromAddress};let transaction;cov_i250qerm0().s[203]++;switch(asset.tokenStandard){case types_2.TokenStandard.ERC20:cov_i250qerm0().b[74][0]++;{cov_i250qerm0().s[204]++;if(!amount){cov_i250qerm0().b[75][0]++;cov_i250qerm0().s[205]++;throw new Error("Missing ERC20 amount for transfer");}else{cov_i250qerm0().b[75][1]++;}const contract=(cov_i250qerm0().s[206]++,contracts_1.ERC20__factory.connect(asset.tokenAddress,this._signerOrProvider));cov_i250qerm0().s[207]++;transaction=contract.transfer(toAddress,amount,overrides);cov_i250qerm0().s[208]++;break;}case types_2.TokenStandard.ERC1155:cov_i250qerm0().b[74][1]++;{cov_i250qerm0().s[209]++;if((cov_i250qerm0().b[77][0]++,asset.tokenId===undefined)||(cov_i250qerm0().b[77][1]++,asset.tokenId===null)){cov_i250qerm0().b[76][0]++;cov_i250qerm0().s[210]++;throw new Error("Missing ERC1155 tokenId for transfer");}else{cov_i250qerm0().b[76][1]++;}cov_i250qerm0().s[211]++;if(!amount){cov_i250qerm0().b[78][0]++;cov_i250qerm0().s[212]++;throw new Error("Missing ERC1155 amount for transfer");}else{cov_i250qerm0().b[78][1]++;}const contract=(cov_i250qerm0().s[213]++,contracts_1.ERC1155__factory.connect(asset.tokenAddress,this._signerOrProvider));cov_i250qerm0().s[214]++;transaction=contract.safeTransferFrom(fromAddress,toAddress,asset.tokenId,amount,"",overrides);cov_i250qerm0().s[215]++;break;}case types_2.TokenStandard.ERC721:cov_i250qerm0().b[74][2]++;{cov_i250qerm0().s[216]++;if((cov_i250qerm0().b[80][0]++,asset.tokenId===undefined)||(cov_i250qerm0().b[80][1]++,asset.tokenId===null)){cov_i250qerm0().b[79][0]++;cov_i250qerm0().s[217]++;throw new Error("Missing ERC721 tokenId for transfer");}else{cov_i250qerm0().b[79][1]++;}const contract=(cov_i250qerm0().s[218]++,contracts_1.ERC721__factory.connect(asset.tokenAddress,this._signerOrProvider));cov_i250qerm0().s[219]++;transaction=contract.transferFrom(fromAddress,toAddress,asset.tokenId,overrides);cov_i250qerm0().s[220]++;break;}default:cov_i250qerm0().b[74][3]++;cov_i250qerm0().s[221]++;throw new Error("Unsupported token standard for transfer");}cov_i250qerm0().s[222]++;try{const transactionResponse=(cov_i250qerm0().s[223]++,await transaction);cov_i250qerm0().s[224]++;await this._confirmTransaction(transactionResponse.hash,types_2.EventType.Transfer,"Transferring asset");}catch(error){cov_i250qerm0().s[225]++;console.error(error);cov_i250qerm0().s[226]++;this._dispatch(types_2.EventType.TransactionDenied,{error,accountAddress:fromAddress});}}/**
     * Instead of signing an off-chain order, this methods allows you to approve an order
     * with on on-chain transaction.
     * @param order Order to approve
     * @param domain An optional domain to be hashed and included at the end of fulfillment calldata.  This can be used for on-chain order attribution to assist with analytics.
     * @returns Transaction hash of the approval transaction
     *
     * @throws Error if the accountAddress is not available through wallet or provider.
     * @throws Error if the order's protocol address is not supported by OpenSea. See {@link isValidProtocol}.
     */async approveOrder(order,domain){cov_i250qerm0().f[27]++;cov_i250qerm0().s[227]++;await this._requireAccountIsAvailable(order.maker.address);cov_i250qerm0().s[228]++;(0,utils_2.requireValidProtocol)(order.protocolAddress);cov_i250qerm0().s[229]++;this._dispatch(types_2.EventType.ApproveOrder,{orderV2:order,accountAddress:order.maker.address});const seaport=(cov_i250qerm0().s[230]++,this.getSeaport(order.protocolAddress));const transaction=(cov_i250qerm0().s[231]++,await seaport.validate([order.protocolData],order.maker.address,domain).transact());cov_i250qerm0().s[232]++;await this._confirmTransaction(transaction.hash,types_2.EventType.ApproveOrder,"Approving order");cov_i250qerm0().s[233]++;return transaction.hash;}/**
     * Compute the `basePrice` and `endPrice` parameters to be used to price an order.
     * Also validates the expiration time and auction type.
     * @param tokenAddress Address of the ERC-20 token to use for trading. Use the null address for ETH.
     * @param expirationTime When the auction expires, or 0 if never.
     * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)
     * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei)
     */async _getPriceParameters(orderSide,tokenAddress,expirationTime,startAmount,endAmount){cov_i250qerm0().f[28]++;cov_i250qerm0().s[234]++;tokenAddress=tokenAddress.toLowerCase();const isEther=(cov_i250qerm0().s[235]++,tokenAddress===ethers_1.ethers.ZeroAddress);let decimals=(cov_i250qerm0().s[236]++,18);cov_i250qerm0().s[237]++;if(!isEther){cov_i250qerm0().b[81][0]++;cov_i250qerm0().s[238]++;if(tokenAddress in this._cachedPaymentTokenDecimals){cov_i250qerm0().b[82][0]++;cov_i250qerm0().s[239]++;decimals=this._cachedPaymentTokenDecimals[tokenAddress];}else{cov_i250qerm0().b[82][1]++;const paymentToken=(cov_i250qerm0().s[240]++,await this.api.getPaymentToken(tokenAddress));cov_i250qerm0().s[241]++;this._cachedPaymentTokenDecimals[tokenAddress]=paymentToken.decimals;cov_i250qerm0().s[242]++;decimals=paymentToken.decimals;}}else{cov_i250qerm0().b[81][1]++;}const startAmountWei=(cov_i250qerm0().s[243]++,ethers_1.ethers.parseUnits(startAmount.toString(),decimals));const endAmountWei=(cov_i250qerm0().s[244]++,endAmount?(cov_i250qerm0().b[83][0]++,ethers_1.ethers.parseUnits(endAmount.toString(),decimals)):(cov_i250qerm0().b[83][1]++,undefined));const priceDiffWei=(cov_i250qerm0().s[245]++,endAmountWei!==undefined?(cov_i250qerm0().b[84][0]++,startAmountWei-endAmountWei):(cov_i250qerm0().b[84][1]++,0n));const basePrice=(cov_i250qerm0().s[246]++,startAmountWei);const endPrice=(cov_i250qerm0().s[247]++,endAmountWei);// Validation
cov_i250qerm0().s[248]++;if((cov_i250qerm0().b[86][0]++,startAmount==null)||(cov_i250qerm0().b[86][1]++,startAmountWei<0)){cov_i250qerm0().b[85][0]++;cov_i250qerm0().s[249]++;throw new Error("Starting price must be a number >= 0");}else{cov_i250qerm0().b[85][1]++;}cov_i250qerm0().s[250]++;if((cov_i250qerm0().b[88][0]++,isEther)&&(cov_i250qerm0().b[88][1]++,orderSide===types_2.OrderSide.OFFER)){cov_i250qerm0().b[87][0]++;cov_i250qerm0().s[251]++;throw new Error("Offers must use wrapped ETH or an ERC-20 token.");}else{cov_i250qerm0().b[87][1]++;}cov_i250qerm0().s[252]++;if(priceDiffWei<0){cov_i250qerm0().b[89][0]++;cov_i250qerm0().s[253]++;throw new Error("End price must be less than or equal to the start price.");}else{cov_i250qerm0().b[89][1]++;}cov_i250qerm0().s[254]++;if((cov_i250qerm0().b[91][0]++,priceDiffWei>0)&&(cov_i250qerm0().b[91][1]++,BigInt(expirationTime)===0n)){cov_i250qerm0().b[90][0]++;cov_i250qerm0().s[255]++;throw new Error("Expiration time must be set if order will change in price.");}else{cov_i250qerm0().b[90][1]++;}cov_i250qerm0().s[256]++;return{basePrice,endPrice};}_dispatch(event,data){cov_i250qerm0().f[29]++;cov_i250qerm0().s[257]++;this._emitter.emit(event,data);}/** Get the accounts available from the signer or provider. */async _getAvailableAccounts(){cov_i250qerm0().f[30]++;const availableAccounts=(cov_i250qerm0().s[258]++,[]);cov_i250qerm0().s[259]++;if("address"in this._signerOrProvider){cov_i250qerm0().b[92][0]++;cov_i250qerm0().s[260]++;availableAccounts.push(this._signerOrProvider.address);}else{cov_i250qerm0().b[92][1]++;cov_i250qerm0().s[261]++;if("listAccounts"in this._signerOrProvider){cov_i250qerm0().b[93][0]++;const addresses=(cov_i250qerm0().s[262]++,(await this._signerOrProvider.listAccounts()).map(acct=>{cov_i250qerm0().f[31]++;cov_i250qerm0().s[263]++;return acct.address;}));cov_i250qerm0().s[264]++;availableAccounts.push(...addresses);}else{cov_i250qerm0().b[93][1]++;cov_i250qerm0().s[265]++;if("getAddress"in this._signerOrProvider){cov_i250qerm0().b[94][0]++;cov_i250qerm0().s[266]++;availableAccounts.push(await this._signerOrProvider.getAddress());}else{cov_i250qerm0().b[94][1]++;}}}cov_i250qerm0().s[267]++;return availableAccounts;}/**
     * Throws an error if an account is not available through the provider.
     * @param accountAddress The account address to check is available.
     */async _requireAccountIsAvailable(accountAddress){cov_i250qerm0().f[32]++;const accountAddressChecksummed=(cov_i250qerm0().s[268]++,ethers_1.ethers.getAddress(accountAddress));const availableAccounts=(cov_i250qerm0().s[269]++,await this._getAvailableAccounts());cov_i250qerm0().s[270]++;if(availableAccounts.includes(accountAddressChecksummed)){cov_i250qerm0().b[95][0]++;cov_i250qerm0().s[271]++;return;}else{cov_i250qerm0().b[95][1]++;}cov_i250qerm0().s[272]++;throw new Error(`Specified accountAddress is not available through wallet or provider: ${accountAddressChecksummed}. Accounts available: ${availableAccounts.length>0?(cov_i250qerm0().b[96][0]++,availableAccounts.join(", ")):(cov_i250qerm0().b[96][1]++,"none")}`);}/**
     * Wait for a transaction to confirm and log the success or failure.
     * @param transactionHash The transaction hash to wait for.
     * @param event The event type to log.
     * @param description The description of the transaction.
     */async _confirmTransaction(transactionHash,event,description){cov_i250qerm0().f[33]++;const transactionEventData=(cov_i250qerm0().s[273]++,{transactionHash,event});cov_i250qerm0().s[274]++;this.logger(`Transaction started: ${description}`);cov_i250qerm0().s[275]++;try{cov_i250qerm0().s[276]++;this._dispatch(types_2.EventType.TransactionCreated,transactionEventData);cov_i250qerm0().s[277]++;await this.provider.waitForTransaction(transactionHash);cov_i250qerm0().s[278]++;this.logger(`Transaction succeeded: ${description}`);cov_i250qerm0().s[279]++;this._dispatch(types_2.EventType.TransactionConfirmed,transactionEventData);}catch(error){cov_i250qerm0().s[280]++;this.logger(`Transaction failed: ${description}`);cov_i250qerm0().s[281]++;this._dispatch(types_2.EventType.TransactionFailed,{...transactionEventData,error});cov_i250qerm0().s[282]++;throw error;}}}cov_i250qerm0().s[283]++;exports.OpenSeaSDK=OpenSeaSDK;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,