"use strict";function cov_1r76ud9kcq(){var path="/Users/rg/dev/opensea-js/src/api/api.ts";var hash="fbbcaf174f595c51ee573aba83b702bbf0e539e2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rg/dev/opensea-js/src/api/api.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:28}},"2":{start:{line:4,column:17},end:{line:4,column:34}},"3":{start:{line:5,column:19},end:{line:5,column:40}},"4":{start:{line:6,column:16},end:{line:6,column:34}},"5":{start:{line:7,column:20},end:{line:7,column:43}},"6":{start:{line:8,column:16},end:{line:8,column:42}},"7":{start:{line:9,column:16},end:{line:9,column:35}},"8":{start:{line:10,column:16},end:{line:10,column:41}},"9":{start:{line:25,column:8},end:{line:25,column:27}},"10":{start:{line:26,column:8},end:{line:26,column:36}},"11":{start:{line:27,column:8},end:{line:27,column:59}},"12":{start:{line:28,column:8},end:{line:35,column:9}},"13":{start:{line:29,column:12},end:{line:29,column:48}},"14":{start:{line:32,column:12},end:{line:34,column:47}},"15":{start:{line:37,column:8},end:{line:37,column:47}},"16":{start:{line:37,column:42},end:{line:37,column:45}},"17":{start:{line:58,column:27},end:{line:63,column:11}},"18":{start:{line:64,column:8},end:{line:66,column:9}},"19":{start:{line:65,column:12},end:{line:65,column:66}},"20":{start:{line:67,column:8},end:{line:67,column:56}},"21":{start:{line:86,column:25},end:{line:91,column:11}},"22":{start:{line:92,column:8},end:{line:95,column:10}},"23":{start:{line:105,column:25},end:{line:108,column:10}},"24":{start:{line:109,column:8},end:{line:109,column:24}},"25":{start:{line:119,column:25},end:{line:122,column:10}},"26":{start:{line:123,column:8},end:{line:123,column:24}},"27":{start:{line:132,column:25},end:{line:132,column:101}},"28":{start:{line:133,column:8},end:{line:133,column:24}},"29":{start:{line:142,column:25},end:{line:142,column:103}},"30":{start:{line:143,column:8},end:{line:143,column:24}},"31":{start:{line:153,column:25},end:{line:156,column:10}},"32":{start:{line:157,column:8},end:{line:157,column:24}},"33":{start:{line:168,column:22},end:{line:168,column:26}},"34":{start:{line:169,column:8},end:{line:174,column:9}},"35":{start:{line:170,column:12},end:{line:170,column:118}},"36":{start:{line:173,column:12},end:{line:173,column:116}},"37":{start:{line:175,column:25},end:{line:175,column:92}},"38":{start:{line:176,column:8},end:{line:176,column:24}},"39":{start:{line:189,column:64},end:{line:189,column:74}},"40":{start:{line:191,column:8},end:{line:193,column:9}},"41":{start:{line:192,column:12},end:{line:192,column:59}},"42":{start:{line:194,column:8},end:{line:196,column:9}},"43":{start:{line:195,column:12},end:{line:195,column:70}},"44":{start:{line:197,column:8},end:{line:199,column:9}},"45":{start:{line:198,column:12},end:{line:198,column:54}},"46":{start:{line:201,column:8},end:{line:203,column:9}},"47":{start:{line:202,column:12},end:{line:202,column:78}},"48":{start:{line:205,column:8},end:{line:207,column:9}},"49":{start:{line:206,column:12},end:{line:206,column:66}},"50":{start:{line:209,column:8},end:{line:211,column:9}},"51":{start:{line:210,column:12},end:{line:210,column:63}},"52":{start:{line:212,column:25},end:{line:212,column:151}},"53":{start:{line:213,column:8},end:{line:213,column:61}},"54":{start:{line:226,column:8},end:{line:230,column:9}},"55":{start:{line:227,column:12},end:{line:229,column:13}},"56":{start:{line:228,column:16},end:{line:228,column:100}},"57":{start:{line:231,column:24},end:{line:231,column:156}},"58":{start:{line:232,column:25},end:{line:232,column:86}},"59":{start:{line:233,column:8},end:{line:233,column:24}},"60":{start:{line:241,column:8},end:{line:241,column:77}},"61":{start:{line:252,column:24},end:{line:252,column:102}},"62":{start:{line:253,column:8},end:{line:253,column:86}},"63":{start:{line:263,column:25},end:{line:266,column:10}},"64":{start:{line:267,column:8},end:{line:267,column:24}},"65":{start:{line:278,column:25},end:{line:281,column:10}},"66":{start:{line:282,column:8},end:{line:282,column:24}},"67":{start:{line:293,column:25},end:{line:296,column:10}},"68":{start:{line:297,column:8},end:{line:297,column:24}},"69":{start:{line:307,column:25},end:{line:307,column:95}},"70":{start:{line:308,column:8},end:{line:308,column:24}},"71":{start:{line:316,column:21},end:{line:316,column:60}},"72":{start:{line:317,column:25},end:{line:317,column:45}},"73":{start:{line:318,column:8},end:{line:318,column:57}},"74":{start:{line:331,column:21},end:{line:331,column:57}},"75":{start:{line:332,column:21},end:{line:339,column:9}},"76":{start:{line:340,column:25},end:{line:340,column:51}},"77":{start:{line:341,column:8},end:{line:341,column:117}},"78":{start:{line:341,column:72},end:{line:341,column:115}},"79":{start:{line:342,column:8},end:{line:342,column:24}},"80":{start:{line:350,column:21},end:{line:350,column:65}},"81":{start:{line:351,column:25},end:{line:351,column:45}},"82":{start:{line:352,column:8},end:{line:352,column:24}},"83":{start:{line:361,column:21},end:{line:361,column:88}},"84":{start:{line:362,column:8},end:{line:362,column:55}},"85":{start:{line:371,column:21},end:{line:371,column:76}},"86":{start:{line:372,column:8},end:{line:372,column:50}},"87":{start:{line:382,column:25},end:{line:382,column:112}},"88":{start:{line:383,column:8},end:{line:383,column:24}},"89":{start:{line:400,column:25},end:{line:400,column:133}},"90":{start:{line:401,column:8},end:{line:401,column:24}},"91":{start:{line:410,column:19},end:{line:410,column:51}},"92":{start:{line:411,column:20},end:{line:411,column:56}},"93":{start:{line:412,column:8},end:{line:412,column:38}},"94":{start:{line:422,column:20},end:{line:422,column:50}},"95":{start:{line:423,column:8},end:{line:423,column:50}},"96":{start:{line:426,column:32},end:{line:426,column:53}},"97":{start:{line:427,column:8},end:{line:434,column:11}},"98":{start:{line:428,column:12},end:{line:433,column:13}},"99":{start:{line:429,column:16},end:{line:429,column:83}},"100":{start:{line:429,column:40},end:{line:429,column:81}},"101":{start:{line:431,column:17},end:{line:433,column:13}},"102":{start:{line:432,column:16},end:{line:432,column:51}},"103":{start:{line:435,column:8},end:{line:435,column:42}},"104":{start:{line:444,column:20},end:{line:444,column:57}},"105":{start:{line:446,column:8},end:{line:450,column:10}},"106":{start:{line:451,column:8},end:{line:453,column:9}},"107":{start:{line:452,column:12},end:{line:452,column:38}},"108":{start:{line:455,column:8},end:{line:457,column:9}},"109":{start:{line:456,column:12},end:{line:456,column:28}},"110":{start:{line:459,column:8},end:{line:459,column:54}},"111":{start:{line:460,column:8},end:{line:463,column:14}},"112":{start:{line:464,column:25},end:{line:464,column:41}},"113":{start:{line:465,column:8},end:{line:480,column:9}},"114":{start:{line:467,column:27},end:{line:467,column:52}},"115":{start:{line:468,column:12},end:{line:479,column:13}},"116":{start:{line:469,column:35},end:{line:469,column:52}},"117":{start:{line:470,column:16},end:{line:472,column:17}},"118":{start:{line:471,column:20},end:{line:471,column:58}},"119":{start:{line:473,column:16},end:{line:473,column:65}},"120":{start:{line:478,column:16},end:{line:478,column:36}},"121":{start:{line:481,column:8},end:{line:481,column:33}},"122":{start:{line:484,column:0},end:{line:484,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:32},end:{line:38,column:5}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:37,column:33},end:{line:37,column:34}},loc:{start:{line:37,column:42},end:{line:37,column:45}},line:37},"2":{name:"(anonymous_2)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:118},end:{line:68,column:5}},line:57},"3":{name:"(anonymous_3)",decl:{start:{line:85,column:4},end:{line:85,column:5}},loc:{start:{line:85,column:119},end:{line:96,column:5}},line:85},"4":{name:"(anonymous_4)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:52},end:{line:110,column:5}},line:104},"5":{name:"(anonymous_5)",decl:{start:{line:118,column:4},end:{line:118,column:5}},loc:{start:{line:118,column:54},end:{line:124,column:5}},line:118},"6":{name:"(anonymous_6)",decl:{start:{line:131,column:4},end:{line:131,column:5}},loc:{start:{line:131,column:48},end:{line:134,column:5}},line:131},"7":{name:"(anonymous_7)",decl:{start:{line:141,column:4},end:{line:141,column:5}},loc:{start:{line:141,column:50},end:{line:144,column:5}},line:141},"8":{name:"(anonymous_8)",decl:{start:{line:152,column:4},end:{line:152,column:5}},loc:{start:{line:152,column:55},end:{line:158,column:5}},line:152},"9":{name:"(anonymous_9)",decl:{start:{line:167,column:4},end:{line:167,column:5}},loc:{start:{line:167,column:86},end:{line:177,column:5}},line:167},"10":{name:"(anonymous_10)",decl:{start:{line:188,column:4},end:{line:188,column:5}},loc:{start:{line:188,column:39},end:{line:214,column:5}},line:188},"11":{name:"(anonymous_11)",decl:{start:{line:225,column:4},end:{line:225,column:5}},loc:{start:{line:225,column:117},end:{line:234,column:5}},line:225},"12":{name:"(anonymous_12)",decl:{start:{line:240,column:4},end:{line:240,column:5}},loc:{start:{line:240,column:36},end:{line:242,column:5}},line:240},"13":{name:"(anonymous_13)",decl:{start:{line:251,column:4},end:{line:251,column:5}},loc:{start:{line:251,column:66},end:{line:254,column:5}},line:251},"14":{name:"(anonymous_14)",decl:{start:{line:262,column:4},end:{line:262,column:5}},loc:{start:{line:262,column:73},end:{line:268,column:5}},line:262},"15":{name:"(anonymous_15)",decl:{start:{line:277,column:4},end:{line:277,column:5}},loc:{start:{line:277,column:94},end:{line:283,column:5}},line:277},"16":{name:"(anonymous_16)",decl:{start:{line:292,column:4},end:{line:292,column:5}},loc:{start:{line:292,column:93},end:{line:298,column:5}},line:292},"17":{name:"(anonymous_17)",decl:{start:{line:306,column:4},end:{line:306,column:5}},loc:{start:{line:306,column:58},end:{line:309,column:5}},line:306},"18":{name:"(anonymous_18)",decl:{start:{line:315,column:4},end:{line:315,column:5}},loc:{start:{line:315,column:30},end:{line:319,column:5}},line:315},"19":{name:"(anonymous_19)",decl:{start:{line:330,column:4},end:{line:330,column:5}},loc:{start:{line:330,column:141},end:{line:343,column:5}},line:330},"20":{name:"(anonymous_20)",decl:{start:{line:341,column:56},end:{line:341,column:57}},loc:{start:{line:341,column:72},end:{line:341,column:115}},line:341},"21":{name:"(anonymous_21)",decl:{start:{line:349,column:4},end:{line:349,column:5}},loc:{start:{line:349,column:35},end:{line:353,column:5}},line:349},"22":{name:"(anonymous_22)",decl:{start:{line:360,column:4},end:{line:360,column:5}},loc:{start:{line:360,column:55},end:{line:363,column:5}},line:360},"23":{name:"(anonymous_23)",decl:{start:{line:370,column:4},end:{line:370,column:5}},loc:{start:{line:370,column:30},end:{line:373,column:5}},line:370},"24":{name:"(anonymous_24)",decl:{start:{line:381,column:4},end:{line:381,column:5}},loc:{start:{line:381,column:70},end:{line:384,column:5}},line:381},"25":{name:"(anonymous_25)",decl:{start:{line:399,column:4},end:{line:399,column:5}},loc:{start:{line:399,column:96},end:{line:402,column:5}},line:399},"26":{name:"(anonymous_26)",decl:{start:{line:409,column:4},end:{line:409,column:5}},loc:{start:{line:409,column:35},end:{line:413,column:5}},line:409},"27":{name:"(anonymous_27)",decl:{start:{line:421,column:4},end:{line:421,column:5}},loc:{start:{line:421,column:36},end:{line:424,column:5}},line:421},"28":{name:"(anonymous_28)",decl:{start:{line:425,column:4},end:{line:425,column:5}},loc:{start:{line:425,column:38},end:{line:436,column:5}},line:425},"29":{name:"(anonymous_29)",decl:{start:{line:427,column:39},end:{line:427,column:40}},loc:{start:{line:427,column:57},end:{line:434,column:9}},line:427},"30":{name:"(anonymous_30)",decl:{start:{line:429,column:30},end:{line:429,column:31}},loc:{start:{line:429,column:40},end:{line:429,column:81}},line:429},"31":{name:"(anonymous_31)",decl:{start:{line:442,column:4},end:{line:442,column:5}},loc:{start:{line:442,column:37},end:{line:482,column:5}},line:442}},branchMap:{"0":{loc:{start:{line:27,column:21},end:{line:27,column:58}},type:"binary-expr",locations:[{start:{line:27,column:21},end:{line:27,column:33}},{start:{line:27,column:37},end:{line:27,column:58}}],line:27},"1":{loc:{start:{line:28,column:8},end:{line:35,column:9}},type:"if",locations:[{start:{line:28,column:8},end:{line:35,column:9}},{start:{line:31,column:13},end:{line:35,column:9}}],line:28},"2":{loc:{start:{line:32,column:30},end:{line:34,column:46}},type:"cond-expr",locations:[{start:{line:33,column:18},end:{line:33,column:46}},{start:{line:34,column:18},end:{line:34,column:46}}],line:32},"3":{loc:{start:{line:37,column:22},end:{line:37,column:46}},type:"binary-expr",locations:[{start:{line:37,column:22},end:{line:37,column:28}},{start:{line:37,column:33},end:{line:37,column:45}}],line:37},"4":{loc:{start:{line:57,column:27},end:{line:57,column:47}},type:"default-arg",locations:[{start:{line:57,column:38},end:{line:57,column:47}}],line:57},"5":{loc:{start:{line:57,column:49},end:{line:57,column:72}},type:"default-arg",locations:[{start:{line:57,column:66},end:{line:57,column:72}}],line:57},"6":{loc:{start:{line:57,column:74},end:{line:57,column:98}},type:"default-arg",locations:[{start:{line:57,column:84},end:{line:57,column:98}}],line:57},"7":{loc:{start:{line:64,column:8},end:{line:66,column:9}},type:"if",locations:[{start:{line:64,column:8},end:{line:66,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:64},"8":{loc:{start:{line:85,column:28},end:{line:85,column:48}},type:"default-arg",locations:[{start:{line:85,column:39},end:{line:85,column:48}}],line:85},"9":{loc:{start:{line:85,column:50},end:{line:85,column:73}},type:"default-arg",locations:[{start:{line:85,column:67},end:{line:85,column:73}}],line:85},"10":{loc:{start:{line:85,column:75},end:{line:85,column:99}},type:"default-arg",locations:[{start:{line:85,column:85},end:{line:85,column:99}}],line:85},"11":{loc:{start:{line:169,column:8},end:{line:174,column:9}},type:"if",locations:[{start:{line:169,column:8},end:{line:174,column:9}},{start:{line:172,column:13},end:{line:174,column:9}}],line:169},"12":{loc:{start:{line:189,column:16},end:{line:189,column:36}},type:"default-arg",locations:[{start:{line:189,column:27},end:{line:189,column:36}}],line:189},"13":{loc:{start:{line:191,column:8},end:{line:193,column:9}},type:"if",locations:[{start:{line:191,column:8},end:{line:193,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:191},"14":{loc:{start:{line:194,column:8},end:{line:196,column:9}},type:"if",locations:[{start:{line:194,column:8},end:{line:196,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:194},"15":{loc:{start:{line:197,column:8},end:{line:199,column:9}},type:"if",locations:[{start:{line:197,column:8},end:{line:199,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:197},"16":{loc:{start:{line:201,column:8},end:{line:203,column:9}},type:"if",locations:[{start:{line:201,column:8},end:{line:203,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:201},"17":{loc:{start:{line:205,column:8},end:{line:207,column:9}},type:"if",locations:[{start:{line:205,column:8},end:{line:207,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:205},"18":{loc:{start:{line:205,column:12},end:{line:205,column:44}},type:"binary-expr",locations:[{start:{line:205,column:12},end:{line:205,column:26}},{start:{line:205,column:30},end:{line:205,column:44}}],line:205},"19":{loc:{start:{line:209,column:8},end:{line:211,column:9}},type:"if",locations:[{start:{line:209,column:8},end:{line:211,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:209},"20":{loc:{start:{line:225,column:63},end:{line:225,column:92}},type:"default-arg",locations:[{start:{line:225,column:88},end:{line:225,column:92}}],line:225},"21":{loc:{start:{line:226,column:8},end:{line:230,column:9}},type:"if",locations:[{start:{line:226,column:8},end:{line:230,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:226},"22":{loc:{start:{line:226,column:12},end:{line:226,column:35}},type:"binary-expr",locations:[{start:{line:226,column:12},end:{line:226,column:21}},{start:{line:226,column:25},end:{line:226,column:35}}],line:226},"23":{loc:{start:{line:227,column:12},end:{line:229,column:13}},type:"if",locations:[{start:{line:227,column:12},end:{line:229,column:13}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:227},"24":{loc:{start:{line:227,column:16},end:{line:227,column:41}},type:"binary-expr",locations:[{start:{line:227,column:16},end:{line:227,column:26}},{start:{line:227,column:30},end:{line:227,column:41}}],line:227},"25":{loc:{start:{line:262,column:36},end:{line:262,column:53}},type:"default-arg",locations:[{start:{line:262,column:44},end:{line:262,column:53}}],line:262},"26":{loc:{start:{line:262,column:55},end:{line:262,column:71}},type:"default-arg",locations:[{start:{line:262,column:62},end:{line:262,column:71}}],line:262},"27":{loc:{start:{line:277,column:37},end:{line:277,column:54}},type:"default-arg",locations:[{start:{line:277,column:45},end:{line:277,column:54}}],line:277},"28":{loc:{start:{line:277,column:56},end:{line:277,column:72}},type:"default-arg",locations:[{start:{line:277,column:63},end:{line:277,column:72}}],line:277},"29":{loc:{start:{line:277,column:74},end:{line:277,column:92}},type:"default-arg",locations:[{start:{line:277,column:82},end:{line:277,column:92}}],line:277},"30":{loc:{start:{line:292,column:36},end:{line:292,column:53}},type:"default-arg",locations:[{start:{line:292,column:44},end:{line:292,column:53}}],line:292},"31":{loc:{start:{line:292,column:55},end:{line:292,column:71}},type:"default-arg",locations:[{start:{line:292,column:62},end:{line:292,column:71}}],line:292},"32":{loc:{start:{line:292,column:73},end:{line:292,column:91}},type:"default-arg",locations:[{start:{line:292,column:81},end:{line:292,column:91}}],line:292},"33":{loc:{start:{line:306,column:38},end:{line:306,column:56}},type:"default-arg",locations:[{start:{line:306,column:46},end:{line:306,column:56}}],line:306},"34":{loc:{start:{line:330,column:25},end:{line:330,column:79}},type:"default-arg",locations:[{start:{line:330,column:35},end:{line:330,column:79}}],line:330},"35":{loc:{start:{line:330,column:105},end:{line:330,column:126}},type:"default-arg",locations:[{start:{line:330,column:121},end:{line:330,column:126}}],line:330},"36":{loc:{start:{line:360,column:35},end:{line:360,column:53}},type:"default-arg",locations:[{start:{line:360,column:43},end:{line:360,column:53}}],line:360},"37":{loc:{start:{line:381,column:50},end:{line:381,column:68}},type:"default-arg",locations:[{start:{line:381,column:58},end:{line:381,column:68}}],line:381},"38":{loc:{start:{line:399,column:58},end:{line:399,column:76}},type:"default-arg",locations:[{start:{line:399,column:66},end:{line:399,column:76}}],line:399},"39":{loc:{start:{line:409,column:23},end:{line:409,column:33}},type:"default-arg",locations:[{start:{line:409,column:31},end:{line:409,column:33}}],line:409},"40":{loc:{start:{line:425,column:25},end:{line:425,column:36}},type:"default-arg",locations:[{start:{line:425,column:34},end:{line:425,column:36}}],line:425},"41":{loc:{start:{line:428,column:12},end:{line:433,column:13}},type:"if",locations:[{start:{line:428,column:12},end:{line:433,column:13}},{start:{line:431,column:17},end:{line:433,column:13}}],line:428},"42":{loc:{start:{line:428,column:16},end:{line:428,column:45}},type:"binary-expr",locations:[{start:{line:428,column:16},end:{line:428,column:21}},{start:{line:428,column:25},end:{line:428,column:45}}],line:428},"43":{loc:{start:{line:429,column:40},end:{line:429,column:81}},type:"binary-expr",locations:[{start:{line:429,column:40},end:{line:429,column:44}},{start:{line:429,column:48},end:{line:429,column:81}}],line:429},"44":{loc:{start:{line:431,column:17},end:{line:433,column:13}},type:"if",locations:[{start:{line:431,column:17},end:{line:433,column:13}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:431},"45":{loc:{start:{line:448,column:16},end:{line:448,column:63}},type:"cond-expr",locations:[{start:{line:448,column:30},end:{line:448,column:58}},{start:{line:448,column:61},end:{line:448,column:63}}],line:448},"46":{loc:{start:{line:455,column:8},end:{line:457,column:9}},type:"if",locations:[{start:{line:455,column:8},end:{line:457,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:455},"47":{loc:{start:{line:465,column:8},end:{line:480,column:9}},type:"if",locations:[{start:{line:465,column:8},end:{line:480,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:465},"48":{loc:{start:{line:468,column:12},end:{line:479,column:13}},type:"if",locations:[{start:{line:468,column:12},end:{line:479,column:13}},{start:{line:475,column:17},end:{line:479,column:13}}],line:468},"49":{loc:{start:{line:470,column:16},end:{line:472,column:17}},type:"if",locations:[{start:{line:470,column:16},end:{line:472,column:17}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:470}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0],"5":[0],"6":[0],"7":[0,0],"8":[0],"9":[0],"10":[0],"11":[0,0],"12":[0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0],"26":[0],"27":[0],"28":[0],"29":[0],"30":[0],"31":[0],"32":[0],"33":[0],"34":[0],"35":[0],"36":[0],"37":[0],"38":[0],"39":[0],"40":[0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0]},inputSourceMap:{version:3,file:"/Users/rg/dev/opensea-js/src/api/api.ts",sources:["/Users/rg/dev/opensea-js/src/api/api.ts"],names:[],mappings:"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",sourcesContent:["import { ethers } from \"ethers\";\nimport {\n  getCollectionPath,\n  getCollectionsPath,\n  getOrdersAPIPath,\n  getPostCollectionOfferPath,\n  getBuildOfferPath,\n  getListNFTsByCollectionPath,\n  getListNFTsByContractPath,\n  getNFTPath,\n  getRefreshMetadataPath,\n  getCollectionOffersPath,\n  getListNFTsByAccountPath,\n  getBestOfferAPIPath,\n  getBestListingAPIPath,\n  getAllOffersAPIPath,\n  getAllListingsAPIPath,\n  getPaymentTokenPath,\n  getAccountPath,\n  getCollectionStatsPath,\n  getBestListingsAPIPath,\n  getCancelOrderPath,\n} from \"./apiPaths\";\nimport {\n  BuildOfferResponse,\n  GetCollectionResponse,\n  GetCollectionsResponse,\n  ListNFTsResponse,\n  GetNFTResponse,\n  ListCollectionOffersResponse,\n  GetOrdersResponse,\n  GetBestOfferResponse,\n  GetBestListingResponse,\n  GetOffersResponse,\n  GetListingsResponse,\n  CollectionOffer,\n  CollectionOrderByOption,\n  CancelOrderResponse,\n  GetCollectionsArgs,\n} from \"./types\";\nimport { API_BASE_MAINNET, API_BASE_TESTNET } from \"../constants\";\nimport {\n  FulfillmentDataResponse,\n  OrderAPIOptions,\n  OrdersPostQueryResponse,\n  OrdersQueryOptions,\n  OrdersQueryResponse,\n  OrderV2,\n  ProtocolData,\n} from \"../orders/types\";\nimport {\n  serializeOrdersQueryOptions,\n  deserializeOrder,\n  getFulfillmentDataPath,\n  getFulfillListingPayload,\n  getFulfillOfferPayload,\n  getBuildCollectionOfferPayload,\n  getPostCollectionOfferPayload,\n} from \"../orders/utils\";\nimport {\n  Chain,\n  OpenSeaAPIConfig,\n  OpenSeaAccount,\n  OpenSeaCollection,\n  OpenSeaCollectionStats,\n  OpenSeaPaymentToken,\n  OrderSide,\n} from \"../types\";\nimport {\n  paymentTokenFromJSON,\n  collectionFromJSON,\n  isTestChain,\n  accountFromJSON,\n} from \"../utils/utils\";\n\n/**\n * The API class for the OpenSea SDK.\n * @category Main Classes\n */\nexport class OpenSeaAPI {\n  /**\n   * Base url for the API\n   */\n  public readonly apiBaseUrl: string;\n  /**\n   * Default size to use for fetching orders\n   */\n  public pageSize = 20;\n  /**\n   * Logger function to use when debugging\n   */\n  public logger: (arg: string) => void;\n\n  private apiKey: string | undefined;\n  private chain: Chain;\n\n  /**\n   * Create an instance of the OpenSeaAPI\n   * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, Chain name, and base URL\n   * @param logger Optional function for logging debug strings before and after requests are made. Defaults to no logging\n   */\n  constructor(config: OpenSeaAPIConfig, logger?: (arg: string) => void) {\n    this.apiKey = config.apiKey;\n    this.chain = config.chain ?? Chain.Mainnet;\n\n    if (config.apiBaseUrl) {\n      this.apiBaseUrl = config.apiBaseUrl;\n    } else {\n      this.apiBaseUrl = isTestChain(this.chain)\n        ? API_BASE_TESTNET\n        : API_BASE_MAINNET;\n    }\n\n    // Debugging: default to nothing\n    this.logger = logger ?? ((arg: string) => arg);\n  }\n\n  /**\n   * Gets an order from API based on query options.\n   * @param options\n   * @param options.side The side of the order (listing or offer)\n   * @param options.protocol The protocol, typically seaport, to query orders for\n   * @param options.orderDirection The direction to sort the orders\n   * @param options.orderBy The field to sort the orders by\n   * @param options.limit The number of orders to retrieve\n   * @param options.maker Filter by the wallet address of the order maker\n   * @param options.taker Filter by  wallet address of the order taker\n   * @param options.asset_contract_address Address of the NFT's contract\n   * @param options.token_ids String array of token IDs to filter by.\n   * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds\n   * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds\n   * @returns The first {@link OrderV2} returned by the API\n   *\n   * @throws An error if there are no matching orders.\n   */\n  public async getOrder({\n    side,\n    protocol = \"seaport\",\n    orderDirection = \"desc\",\n    orderBy = \"created_date\",\n    ...restOptions\n  }: Omit<OrdersQueryOptions, \"limit\">): Promise<OrderV2> {\n    const { orders } = await this.get<OrdersQueryResponse>(\n      getOrdersAPIPath(this.chain, protocol, side),\n      serializeOrdersQueryOptions({\n        limit: 1,\n        orderBy,\n        orderDirection,\n        ...restOptions,\n      }),\n    );\n    if (orders.length === 0) {\n      throw new Error(\"Not found: no matching order found\");\n    }\n    return deserializeOrder(orders[0]);\n  }\n\n  /**\n   * Gets a list of orders from API based on query options.\n   * @param options\n   * @param options.side The side of the order (buy or sell)\n   * @param options.protocol The protocol, typically seaport, to query orders for\n   * @param options.orderDirection The direction to sort the orders\n   * @param options.orderBy The field to sort the orders by\n   * @param options.limit The number of orders to retrieve\n   * @param options.maker Filter by the wallet address of the order maker\n   * @param options.taker Filter by  wallet address of the order taker\n   * @param options.asset_contract_address Address of the NFT's contract\n   * @param options.token_ids String array of token IDs to filter by.\n   * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds\n   * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds\n   * @returns The {@link GetOrdersResponse} returned by the API.\n   */\n  public async getOrders({\n    side,\n    protocol = \"seaport\",\n    orderDirection = \"desc\",\n    orderBy = \"created_date\",\n    ...restOptions\n  }: Omit<OrdersQueryOptions, \"limit\">): Promise<GetOrdersResponse> {\n    const response = await this.get<OrdersQueryResponse>(\n      getOrdersAPIPath(this.chain, protocol, side),\n      serializeOrdersQueryOptions({\n        limit: this.pageSize,\n        orderBy,\n        orderDirection,\n        ...restOptions,\n      }),\n    );\n    return {\n      ...response,\n      orders: response.orders.map(deserializeOrder),\n    };\n  }\n\n  /**\n   * Gets all offers for a given collection.\n   * @param collectionSlug The slug of the collection.\n   * @param limit The number of offers to return. Must be between 1 and 100. Default: 100\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetOffersResponse} returned by the API.\n   */\n  public async getAllOffers(\n    collectionSlug: string,\n    limit?: number,\n    next?: string,\n  ): Promise<GetOffersResponse> {\n    const response = await this.get<GetOffersResponse>(\n      getAllOffersAPIPath(collectionSlug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Gets all listings for a given collection.\n   * @param collectionSlug The slug of the collection.\n   * @param limit The number of listings to return. Must be between 1 and 100. Default: 100\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetListingsResponse} returned by the API.\n   */\n  public async getAllListings(\n    collectionSlug: string,\n    limit?: number,\n    next?: string,\n  ): Promise<GetListingsResponse> {\n    const response = await this.get<GetListingsResponse>(\n      getAllListingsAPIPath(collectionSlug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Gets the best offer for a given token.\n   * @param collectionSlug The slug of the collection.\n   * @param tokenId The token identifier.\n   * @returns The {@link GetBestOfferResponse} returned by the API.\n   */\n  public async getBestOffer(\n    collectionSlug: string,\n    tokenId: string | number,\n  ): Promise<GetBestOfferResponse> {\n    const response = await this.get<GetBestOfferResponse>(\n      getBestOfferAPIPath(collectionSlug, tokenId),\n    );\n    return response;\n  }\n\n  /**\n   * Gets the best listing for a given token.\n   * @param collectionSlug The slug of the collection.\n   * @param tokenId The token identifier.\n   * @returns The {@link GetBestListingResponse} returned by the API.\n   */\n  public async getBestListing(\n    collectionSlug: string,\n    tokenId: string | number,\n  ): Promise<GetBestListingResponse> {\n    const response = await this.get<GetBestListingResponse>(\n      getBestListingAPIPath(collectionSlug, tokenId),\n    );\n    return response;\n  }\n\n  /**\n   * Gets the best listings for a given collection.\n   * @param collectionSlug The slug of the collection.\n   * @param limit The number of listings to return. Must be between 1 and 100. Default: 100\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetListingsResponse} returned by the API.\n   */\n  public async getBestListings(\n    collectionSlug: string,\n    limit?: number,\n    next?: string,\n  ): Promise<GetListingsResponse> {\n    const response = await this.get<GetListingsResponse>(\n      getBestListingsAPIPath(collectionSlug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Generate the data needed to fulfill a listing or an offer onchain.\n   * @param fulfillerAddress The wallet address which will be used to fulfill the order\n   * @param orderHash The hash of the order to fulfill\n   * @param protocolAddress The address of the seaport contract\n   * @side The side of the order (buy or sell)\n   * @returns The {@link FulfillmentDataResponse}\n   */\n  public async generateFulfillmentData(\n    fulfillerAddress: string,\n    orderHash: string,\n    protocolAddress: string,\n    side: OrderSide,\n  ): Promise<FulfillmentDataResponse> {\n    let payload: object | null = null;\n    if (side === OrderSide.LISTING) {\n      payload = getFulfillListingPayload(\n        fulfillerAddress,\n        orderHash,\n        protocolAddress,\n        this.chain,\n      );\n    } else {\n      payload = getFulfillOfferPayload(\n        fulfillerAddress,\n        orderHash,\n        protocolAddress,\n        this.chain,\n      );\n    }\n    const response = await this.post<FulfillmentDataResponse>(\n      getFulfillmentDataPath(side),\n      payload,\n    );\n    return response;\n  }\n\n  /**\n   * Post an order to OpenSea.\n   * @param order The order to post\n   * @param apiOptions\n   * @param apiOptions.protocol The protocol, typically seaport, to post the order to.\n   * @param apiOptions.side The side of the order (buy or sell).\n   * @param apiOptions.protocolAddress The address of the seaport contract.\n   * @param options\n   * @returns The {@link OrderV2} posted to the API.\n   */\n  public async postOrder(\n    order: ProtocolData,\n    apiOptions: OrderAPIOptions,\n  ): Promise<OrderV2> {\n    const { protocol = \"seaport\", side, protocolAddress } = apiOptions;\n\n    // Validate required fields\n    if (!side) {\n      throw new Error(\"apiOptions.side is required\");\n    }\n    if (!protocolAddress) {\n      throw new Error(\"apiOptions.protocolAddress is required\");\n    }\n    if (!order) {\n      throw new Error(\"order data is required\");\n    }\n\n    // Validate protocol value\n    if (protocol !== \"seaport\") {\n      throw new Error(\"Currently only 'seaport' protocol is supported\");\n    }\n\n    // Validate side value\n    if (side !== \"ask\" && side !== \"bid\") {\n      throw new Error(\"side must be either 'ask' or 'bid'\");\n    }\n\n    // Validate protocolAddress format\n    if (!/^0x[a-fA-F0-9]{40}$/.test(protocolAddress)) {\n      throw new Error(\"Invalid protocol address format\");\n    }\n\n    const response = await this.post<OrdersPostQueryResponse>(\n      getOrdersAPIPath(this.chain, protocol, side),\n      { ...order, protocol_address: protocolAddress },\n    );\n    return deserializeOrder(response.order);\n  }\n\n  /**\n   * Build a OpenSea collection offer.\n   * @param offererAddress The wallet address which is creating the offer.\n   * @param quantity The number of NFTs requested in the offer.\n   * @param collectionSlug The slug (identifier) of the collection to build the offer for.\n   * @param offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.\n   * @param traitType If defined, the trait name to create the collection offer for.\n   * @param traitValue If defined, the trait value to create the collection offer for.\n   * @returns The {@link BuildOfferResponse} returned by the API.\n   */\n  public async buildOffer(\n    offererAddress: string,\n    quantity: number,\n    collectionSlug: string,\n    offerProtectionEnabled = true,\n    traitType?: string,\n    traitValue?: string,\n  ): Promise<BuildOfferResponse> {\n    if (traitType || traitValue) {\n      if (!traitType || !traitValue) {\n        throw new Error(\n          \"Both traitType and traitValue must be defined if one is defined.\",\n        );\n      }\n    }\n    const payload = getBuildCollectionOfferPayload(\n      offererAddress,\n      quantity,\n      collectionSlug,\n      offerProtectionEnabled,\n      traitType,\n      traitValue,\n    );\n    const response = await this.post<BuildOfferResponse>(\n      getBuildOfferPath(),\n      payload,\n    );\n    return response;\n  }\n\n  /**\n   * Get a list collection offers for a given slug.\n   * @param slug The slug (identifier) of the collection to list offers for\n   * @returns The {@link ListCollectionOffersResponse} returned by the API.\n   */\n  public async getCollectionOffers(\n    slug: string,\n  ): Promise<ListCollectionOffersResponse | null> {\n    return await this.get<ListCollectionOffersResponse>(\n      getCollectionOffersPath(slug),\n    );\n  }\n\n  /**\n   * Post a collection offer to OpenSea.\n   * @param order The collection offer to post.\n   * @param slug The slug (identifier) of the collection to post the offer for.\n   * @param traitType If defined, the trait name to create the collection offer for.\n   * @param traitValue If defined, the trait value to create the collection offer for.\n   * @returns The {@link Offer} returned to the API.\n   */\n  public async postCollectionOffer(\n    order: ProtocolData,\n    slug: string,\n    traitType?: string,\n    traitValue?: string,\n  ): Promise<CollectionOffer | null> {\n    const payload = getPostCollectionOfferPayload(\n      slug,\n      order,\n      traitType,\n      traitValue,\n    );\n    return await this.post<CollectionOffer>(\n      getPostCollectionOfferPath(),\n      payload,\n    );\n  }\n\n  /**\n   * Fetch multiple NFTs for a collection.\n   * @param slug The slug (identifier) of the collection\n   * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n   * @param next Cursor to retrieve the next page of NFTs\n   * @returns The {@link ListNFTsResponse} returned by the API.\n   */\n  public async getNFTsByCollection(\n    slug: string,\n    limit: number | undefined = undefined,\n    next: string | undefined = undefined,\n  ): Promise<ListNFTsResponse> {\n    const response = await this.get<ListNFTsResponse>(\n      getListNFTsByCollectionPath(slug),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Fetch multiple NFTs for a contract.\n   * @param address The NFT's contract address.\n   * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n   * @param next Cursor to retrieve the next page of NFTs.\n   * @param chain The NFT's chain.\n   * @returns The {@link ListNFTsResponse} returned by the API.\n   */\n  public async getNFTsByContract(\n    address: string,\n    limit: number | undefined = undefined,\n    next: string | undefined = undefined,\n    chain: Chain = this.chain,\n  ): Promise<ListNFTsResponse> {\n    const response = await this.get<ListNFTsResponse>(\n      getListNFTsByContractPath(chain, address),\n      {\n        limit,\n        next,\n      },\n    );\n    return response;\n  }\n\n  /**\n   * Fetch NFTs owned by an account.\n   * @param address The address of the account\n   * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.\n   * @param next Cursor to retrieve the next page of NFTs\n   * @param chain The chain to query. Defaults to the chain set in the constructor.\n   * @returns The {@link ListNFTsResponse} returned by the API.\n   */\n  public async getNFTsByAccount(\n    address: string,\n    limit: number | undefined = undefined,\n    next: string | undefined = undefined,\n    chain = this.chain,\n  ): Promise<ListNFTsResponse> {\n    const response = await this.get<ListNFTsResponse>(\n      getListNFTsByAccountPath(chain, address),\n      {\n        limit,\n        next,\n      },\n    );\n\n    return response;\n  }\n\n  /**\n   * Fetch metadata, traits, ownership information, and rarity for a single NFT.\n   * @param address The NFT's contract address.\n   * @param identifier the identifier of the NFT (i.e. Token ID)\n   * @param chain The NFT's chain.\n   * @returns The {@link GetNFTResponse} returned by the API.\n   */\n  public async getNFT(\n    address: string,\n    identifier: string,\n    chain = this.chain,\n  ): Promise<GetNFTResponse> {\n    const response = await this.get<GetNFTResponse>(\n      getNFTPath(chain, address, identifier),\n    );\n    return response;\n  }\n\n  /**\n   * Fetch an OpenSea collection.\n   * @param slug The slug (identifier) of the collection.\n   * @returns The {@link OpenSeaCollection} returned by the API.\n   */\n  public async getCollection(slug: string): Promise<OpenSeaCollection> {\n    const path = getCollectionPath(slug);\n    const response = await this.get<GetCollectionResponse>(path);\n    return collectionFromJSON(response);\n  }\n\n  /**\n   * Fetch a list of OpenSea collections.\n   * @param orderBy The order to return the collections in. Default: CREATED_DATE\n   * @param chain The chain to filter the collections on. Default: all chains\n   * @param creatorUsername The creator's OpenSea username to filter the collections on.\n   * @param includeHidden If hidden collections should be returned. Default: false\n   * @param limit The limit of collections to return.\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns List of {@link OpenSeaCollection} returned by the API.\n   */\n  public async getCollections(\n    orderBy: CollectionOrderByOption = CollectionOrderByOption.CREATED_DATE,\n    chain?: Chain,\n    creatorUsername?: string,\n    includeHidden: boolean = false,\n    limit?: number,\n    next?: string,\n  ): Promise<GetCollectionsResponse> {\n    const path = getCollectionsPath();\n    const args: GetCollectionsArgs = {\n      order_by: orderBy,\n      chain,\n      creator_username: creatorUsername,\n      include_hidden: includeHidden,\n      limit,\n      next,\n    };\n    const response = await this.get<GetCollectionsResponse>(path, args);\n    response.collections = response.collections.map((collection) =>\n      collectionFromJSON(collection),\n    );\n    return response;\n  }\n\n  /**\n   * Fetch stats for an OpenSea collection.\n   * @param slug The slug (identifier) of the collection.\n   * @returns The {@link OpenSeaCollection} returned by the API.\n   */\n  public async getCollectionStats(\n    slug: string,\n  ): Promise<OpenSeaCollectionStats> {\n    const path = getCollectionStatsPath(slug);\n    const response = await this.get<OpenSeaCollectionStats>(path);\n    return response as OpenSeaCollectionStats;\n  }\n\n  /**\n   * Fetch a payment token.\n   * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link OpenSeaPaymentToken} returned by the API.\n   */\n  public async getPaymentToken(\n    address: string,\n    chain = this.chain,\n  ): Promise<OpenSeaPaymentToken> {\n    const json = await this.get<OpenSeaPaymentToken>(\n      getPaymentTokenPath(chain, address),\n    );\n    return paymentTokenFromJSON(json);\n  }\n\n  /**\n   * Fetch account for an address.\n   * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.\n   * @param next The cursor for the next page of results. This is returned from a previous request.\n   * @returns The {@link GetAccountResponse} returned by the API.\n   */\n  public async getAccount(address: string): Promise<OpenSeaAccount> {\n    const json = await this.get<OpenSeaAccount>(getAccountPath(address));\n    return accountFromJSON(json);\n  }\n\n  /**\n   * Force refresh the metadata for an NFT.\n   * @param address The address of the NFT's contract.\n   * @param identifier The identifier of the NFT.\n   * @param chain The chain where the NFT is located.\n   * @returns The response from the API.\n   */\n  public async refreshNFTMetadata(\n    address: string,\n    identifier: string,\n    chain: Chain = this.chain,\n  ): Promise<Response> {\n    const response = await this.post<Response>(\n      getRefreshMetadataPath(chain, address, identifier),\n      {},\n    );\n\n    return response;\n  }\n\n  /**\n   * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.\n   * Protocol and Chain are required to prevent hash collisions.\n   * Please note cancellation is only assured if a fulfillment signature was not vended prior to cancellation.\n   * @param protocolAddress The Seaport address for the order.\n   * @param orderHash The order hash, or external identifier, of the order.\n   * @param chain The chain where the order is located.\n   * @param offererSignature An EIP-712 signature from the offerer of the order.\n   *                         If this is not provided, the user associated with the API Key will be checked instead.\n   *                         The signature must be a EIP-712 signature consisting of the order's Seaport contract's\n   *                         name, version, address, and chain. The struct to sign is `OrderHash` containing a\n   *                         single bytes32 field.\n   * @returns The response from the API.\n   */\n  public async offchainCancelOrder(\n    protocolAddress: string,\n    orderHash: string,\n    chain: Chain = this.chain,\n    offererSignature?: string,\n  ): Promise<CancelOrderResponse> {\n    const response = await this.post<CancelOrderResponse>(\n      getCancelOrderPath(chain, protocolAddress, orderHash),\n      { offererSignature },\n    );\n    return response;\n  }\n\n  /**\n   * Generic fetch method for any API endpoint\n   * @param apiPath Path to URL endpoint under API\n   * @param query URL query params. Will be used to create a URLSearchParams object.\n   * @returns @typeParam T The response from the API.\n   */\n  public async get<T>(apiPath: string, query: object = {}): Promise<T> {\n    const qs = this.objectToSearchParams(query);\n    const url = `${this.apiBaseUrl}${apiPath}?${qs}`;\n    return await this._fetch(url);\n  }\n\n  /**\n   * Generic post method for any API endpoint.\n   * @param apiPath Path to URL endpoint under API\n   * @param body Data to send.\n   * @param opts ethers ConnectionInfo, similar to Fetch API.\n   * @returns @typeParam T The response from the API.\n   */\n  public async post<T>(\n    apiPath: string,\n    body?: object,\n    opts?: object,\n  ): Promise<T> {\n    const url = `${this.apiBaseUrl}${apiPath}`;\n    return await this._fetch(url, opts, body);\n  }\n\n  private objectToSearchParams(params: object = {}) {\n    const urlSearchParams = new URLSearchParams();\n\n    Object.entries(params).forEach(([key, value]) => {\n      if (value && Array.isArray(value)) {\n        value.forEach((item) => item && urlSearchParams.append(key, item));\n      } else if (value) {\n        urlSearchParams.append(key, value);\n      }\n    });\n\n    return urlSearchParams.toString();\n  }\n\n  /**\n   * Get from an API Endpoint, sending auth token in headers\n   * @param opts ethers ConnectionInfo, similar to Fetch API\n   * @param body Optional body to send. If set, will POST, otherwise GET\n   */\n  private async _fetch(url: string, headers?: object, body?: object) {\n    // Create the fetch request\n    const req = new ethers.FetchRequest(url);\n\n    // Set the headers\n    headers = {\n      \"x-app-id\": \"opensea-js\",\n      ...(this.apiKey ? { \"X-API-KEY\": this.apiKey } : {}),\n      ...headers,\n    };\n    for (const [key, value] of Object.entries(headers)) {\n      req.setHeader(key, value);\n    }\n\n    // Set the body if provided\n    if (body) {\n      req.body = body;\n    }\n\n    // Set the throttle params\n    req.setThrottleParams({ slotInterval: 1000 });\n\n    this.logger(\n      `Sending request: ${url} ${JSON.stringify({\n        request: req,\n        headers: req.headers,\n      })}`,\n    );\n\n    const response = await req.send();\n    if (!response.ok()) {\n      // If an errors array is returned, throw with the error messages.\n      const errors = response.bodyJson?.errors;\n      if (errors?.length > 0) {\n        let errorMessage = errors.join(\", \");\n        if (errorMessage === \"[object Object]\") {\n          errorMessage = JSON.stringify(errors);\n        }\n        throw new Error(`Server Error: ${errorMessage}`);\n      } else {\n        // Otherwise, let ethers throw a SERVER_ERROR since it will include\n        // more context about the request and response.\n        response.assertOk();\n      }\n    }\n    return response.bodyJson;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fbbcaf174f595c51ee573aba83b702bbf0e539e2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1r76ud9kcq=function(){return actualCoverage;};}return actualCoverage;}cov_1r76ud9kcq();cov_1r76ud9kcq().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1r76ud9kcq().s[1]++;exports.OpenSeaAPI=void 0;const ethers_1=(cov_1r76ud9kcq().s[2]++,require("ethers"));const apiPaths_1=(cov_1r76ud9kcq().s[3]++,require("./apiPaths"));const types_1=(cov_1r76ud9kcq().s[4]++,require("./types"));const constants_1=(cov_1r76ud9kcq().s[5]++,require("../constants"));const utils_1=(cov_1r76ud9kcq().s[6]++,require("../orders/utils"));const types_2=(cov_1r76ud9kcq().s[7]++,require("../types"));const utils_2=(cov_1r76ud9kcq().s[8]++,require("../utils/utils"));/**
 * The API class for the OpenSea SDK.
 * @category Main Classes
 */class OpenSeaAPI{/**
     * Create an instance of the OpenSeaAPI
     * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, Chain name, and base URL
     * @param logger Optional function for logging debug strings before and after requests are made. Defaults to no logging
     */constructor(config,logger){cov_1r76ud9kcq().f[0]++;cov_1r76ud9kcq().s[9]++;/**
         * Default size to use for fetching orders
         */this.pageSize=20;cov_1r76ud9kcq().s[10]++;this.apiKey=config.apiKey;cov_1r76ud9kcq().s[11]++;this.chain=(cov_1r76ud9kcq().b[0][0]++,config.chain)??(cov_1r76ud9kcq().b[0][1]++,types_2.Chain.Mainnet);cov_1r76ud9kcq().s[12]++;if(config.apiBaseUrl){cov_1r76ud9kcq().b[1][0]++;cov_1r76ud9kcq().s[13]++;this.apiBaseUrl=config.apiBaseUrl;}else{cov_1r76ud9kcq().b[1][1]++;cov_1r76ud9kcq().s[14]++;this.apiBaseUrl=(0,utils_2.isTestChain)(this.chain)?(cov_1r76ud9kcq().b[2][0]++,constants_1.API_BASE_TESTNET):(cov_1r76ud9kcq().b[2][1]++,constants_1.API_BASE_MAINNET);}// Debugging: default to nothing
cov_1r76ud9kcq().s[15]++;this.logger=(cov_1r76ud9kcq().b[3][0]++,logger)??(cov_1r76ud9kcq().b[3][1]++,arg=>{cov_1r76ud9kcq().f[1]++;cov_1r76ud9kcq().s[16]++;return arg;});}/**
     * Gets an order from API based on query options.
     * @param options
     * @param options.side The side of the order (listing or offer)
     * @param options.protocol The protocol, typically seaport, to query orders for
     * @param options.orderDirection The direction to sort the orders
     * @param options.orderBy The field to sort the orders by
     * @param options.limit The number of orders to retrieve
     * @param options.maker Filter by the wallet address of the order maker
     * @param options.taker Filter by  wallet address of the order taker
     * @param options.asset_contract_address Address of the NFT's contract
     * @param options.token_ids String array of token IDs to filter by.
     * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds
     * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds
     * @returns The first {@link OrderV2} returned by the API
     *
     * @throws An error if there are no matching orders.
     */async getOrder({side,protocol=(cov_1r76ud9kcq().b[4][0]++,"seaport"),orderDirection=(cov_1r76ud9kcq().b[5][0]++,"desc"),orderBy=(cov_1r76ud9kcq().b[6][0]++,"created_date"),...restOptions}){cov_1r76ud9kcq().f[2]++;const{orders}=(cov_1r76ud9kcq().s[17]++,await this.get((0,apiPaths_1.getOrdersAPIPath)(this.chain,protocol,side),(0,utils_1.serializeOrdersQueryOptions)({limit:1,orderBy,orderDirection,...restOptions})));cov_1r76ud9kcq().s[18]++;if(orders.length===0){cov_1r76ud9kcq().b[7][0]++;cov_1r76ud9kcq().s[19]++;throw new Error("Not found: no matching order found");}else{cov_1r76ud9kcq().b[7][1]++;}cov_1r76ud9kcq().s[20]++;return(0,utils_1.deserializeOrder)(orders[0]);}/**
     * Gets a list of orders from API based on query options.
     * @param options
     * @param options.side The side of the order (buy or sell)
     * @param options.protocol The protocol, typically seaport, to query orders for
     * @param options.orderDirection The direction to sort the orders
     * @param options.orderBy The field to sort the orders by
     * @param options.limit The number of orders to retrieve
     * @param options.maker Filter by the wallet address of the order maker
     * @param options.taker Filter by  wallet address of the order taker
     * @param options.asset_contract_address Address of the NFT's contract
     * @param options.token_ids String array of token IDs to filter by.
     * @param options.listed_after Filter by orders listed after the Unix epoch timestamp in seconds
     * @param options.listed_before Filter by orders listed before the Unix epoch timestamp in seconds
     * @returns The {@link GetOrdersResponse} returned by the API.
     */async getOrders({side,protocol=(cov_1r76ud9kcq().b[8][0]++,"seaport"),orderDirection=(cov_1r76ud9kcq().b[9][0]++,"desc"),orderBy=(cov_1r76ud9kcq().b[10][0]++,"created_date"),...restOptions}){cov_1r76ud9kcq().f[3]++;const response=(cov_1r76ud9kcq().s[21]++,await this.get((0,apiPaths_1.getOrdersAPIPath)(this.chain,protocol,side),(0,utils_1.serializeOrdersQueryOptions)({limit:this.pageSize,orderBy,orderDirection,...restOptions})));cov_1r76ud9kcq().s[22]++;return{...response,orders:response.orders.map(utils_1.deserializeOrder)};}/**
     * Gets all offers for a given collection.
     * @param collectionSlug The slug of the collection.
     * @param limit The number of offers to return. Must be between 1 and 100. Default: 100
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetOffersResponse} returned by the API.
     */async getAllOffers(collectionSlug,limit,next){cov_1r76ud9kcq().f[4]++;const response=(cov_1r76ud9kcq().s[23]++,await this.get((0,apiPaths_1.getAllOffersAPIPath)(collectionSlug),{limit,next}));cov_1r76ud9kcq().s[24]++;return response;}/**
     * Gets all listings for a given collection.
     * @param collectionSlug The slug of the collection.
     * @param limit The number of listings to return. Must be between 1 and 100. Default: 100
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetListingsResponse} returned by the API.
     */async getAllListings(collectionSlug,limit,next){cov_1r76ud9kcq().f[5]++;const response=(cov_1r76ud9kcq().s[25]++,await this.get((0,apiPaths_1.getAllListingsAPIPath)(collectionSlug),{limit,next}));cov_1r76ud9kcq().s[26]++;return response;}/**
     * Gets the best offer for a given token.
     * @param collectionSlug The slug of the collection.
     * @param tokenId The token identifier.
     * @returns The {@link GetBestOfferResponse} returned by the API.
     */async getBestOffer(collectionSlug,tokenId){cov_1r76ud9kcq().f[6]++;const response=(cov_1r76ud9kcq().s[27]++,await this.get((0,apiPaths_1.getBestOfferAPIPath)(collectionSlug,tokenId)));cov_1r76ud9kcq().s[28]++;return response;}/**
     * Gets the best listing for a given token.
     * @param collectionSlug The slug of the collection.
     * @param tokenId The token identifier.
     * @returns The {@link GetBestListingResponse} returned by the API.
     */async getBestListing(collectionSlug,tokenId){cov_1r76ud9kcq().f[7]++;const response=(cov_1r76ud9kcq().s[29]++,await this.get((0,apiPaths_1.getBestListingAPIPath)(collectionSlug,tokenId)));cov_1r76ud9kcq().s[30]++;return response;}/**
     * Gets the best listings for a given collection.
     * @param collectionSlug The slug of the collection.
     * @param limit The number of listings to return. Must be between 1 and 100. Default: 100
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetListingsResponse} returned by the API.
     */async getBestListings(collectionSlug,limit,next){cov_1r76ud9kcq().f[8]++;const response=(cov_1r76ud9kcq().s[31]++,await this.get((0,apiPaths_1.getBestListingsAPIPath)(collectionSlug),{limit,next}));cov_1r76ud9kcq().s[32]++;return response;}/**
     * Generate the data needed to fulfill a listing or an offer onchain.
     * @param fulfillerAddress The wallet address which will be used to fulfill the order
     * @param orderHash The hash of the order to fulfill
     * @param protocolAddress The address of the seaport contract
     * @side The side of the order (buy or sell)
     * @returns The {@link FulfillmentDataResponse}
     */async generateFulfillmentData(fulfillerAddress,orderHash,protocolAddress,side){cov_1r76ud9kcq().f[9]++;let payload=(cov_1r76ud9kcq().s[33]++,null);cov_1r76ud9kcq().s[34]++;if(side===types_2.OrderSide.LISTING){cov_1r76ud9kcq().b[11][0]++;cov_1r76ud9kcq().s[35]++;payload=(0,utils_1.getFulfillListingPayload)(fulfillerAddress,orderHash,protocolAddress,this.chain);}else{cov_1r76ud9kcq().b[11][1]++;cov_1r76ud9kcq().s[36]++;payload=(0,utils_1.getFulfillOfferPayload)(fulfillerAddress,orderHash,protocolAddress,this.chain);}const response=(cov_1r76ud9kcq().s[37]++,await this.post((0,utils_1.getFulfillmentDataPath)(side),payload));cov_1r76ud9kcq().s[38]++;return response;}/**
     * Post an order to OpenSea.
     * @param order The order to post
     * @param apiOptions
     * @param apiOptions.protocol The protocol, typically seaport, to post the order to.
     * @param apiOptions.side The side of the order (buy or sell).
     * @param apiOptions.protocolAddress The address of the seaport contract.
     * @param options
     * @returns The {@link OrderV2} posted to the API.
     */async postOrder(order,apiOptions){cov_1r76ud9kcq().f[10]++;const{protocol=(cov_1r76ud9kcq().b[12][0]++,"seaport"),side,protocolAddress}=(cov_1r76ud9kcq().s[39]++,apiOptions);// Validate required fields
cov_1r76ud9kcq().s[40]++;if(!side){cov_1r76ud9kcq().b[13][0]++;cov_1r76ud9kcq().s[41]++;throw new Error("apiOptions.side is required");}else{cov_1r76ud9kcq().b[13][1]++;}cov_1r76ud9kcq().s[42]++;if(!protocolAddress){cov_1r76ud9kcq().b[14][0]++;cov_1r76ud9kcq().s[43]++;throw new Error("apiOptions.protocolAddress is required");}else{cov_1r76ud9kcq().b[14][1]++;}cov_1r76ud9kcq().s[44]++;if(!order){cov_1r76ud9kcq().b[15][0]++;cov_1r76ud9kcq().s[45]++;throw new Error("order data is required");}else{cov_1r76ud9kcq().b[15][1]++;}// Validate protocol value
cov_1r76ud9kcq().s[46]++;if(protocol!=="seaport"){cov_1r76ud9kcq().b[16][0]++;cov_1r76ud9kcq().s[47]++;throw new Error("Currently only 'seaport' protocol is supported");}else{cov_1r76ud9kcq().b[16][1]++;}// Validate side value
cov_1r76ud9kcq().s[48]++;if((cov_1r76ud9kcq().b[18][0]++,side!=="ask")&&(cov_1r76ud9kcq().b[18][1]++,side!=="bid")){cov_1r76ud9kcq().b[17][0]++;cov_1r76ud9kcq().s[49]++;throw new Error("side must be either 'ask' or 'bid'");}else{cov_1r76ud9kcq().b[17][1]++;}// Validate protocolAddress format
cov_1r76ud9kcq().s[50]++;if(!/^0x[a-fA-F0-9]{40}$/.test(protocolAddress)){cov_1r76ud9kcq().b[19][0]++;cov_1r76ud9kcq().s[51]++;throw new Error("Invalid protocol address format");}else{cov_1r76ud9kcq().b[19][1]++;}const response=(cov_1r76ud9kcq().s[52]++,await this.post((0,apiPaths_1.getOrdersAPIPath)(this.chain,protocol,side),{...order,protocol_address:protocolAddress}));cov_1r76ud9kcq().s[53]++;return(0,utils_1.deserializeOrder)(response.order);}/**
     * Build a OpenSea collection offer.
     * @param offererAddress The wallet address which is creating the offer.
     * @param quantity The number of NFTs requested in the offer.
     * @param collectionSlug The slug (identifier) of the collection to build the offer for.
     * @param offerProtectionEnabled Build the offer on OpenSea's signed zone to provide offer protections from receiving an item which is disabled from trading.
     * @param traitType If defined, the trait name to create the collection offer for.
     * @param traitValue If defined, the trait value to create the collection offer for.
     * @returns The {@link BuildOfferResponse} returned by the API.
     */async buildOffer(offererAddress,quantity,collectionSlug,offerProtectionEnabled=(cov_1r76ud9kcq().b[20][0]++,true),traitType,traitValue){cov_1r76ud9kcq().f[11]++;cov_1r76ud9kcq().s[54]++;if((cov_1r76ud9kcq().b[22][0]++,traitType)||(cov_1r76ud9kcq().b[22][1]++,traitValue)){cov_1r76ud9kcq().b[21][0]++;cov_1r76ud9kcq().s[55]++;if((cov_1r76ud9kcq().b[24][0]++,!traitType)||(cov_1r76ud9kcq().b[24][1]++,!traitValue)){cov_1r76ud9kcq().b[23][0]++;cov_1r76ud9kcq().s[56]++;throw new Error("Both traitType and traitValue must be defined if one is defined.");}else{cov_1r76ud9kcq().b[23][1]++;}}else{cov_1r76ud9kcq().b[21][1]++;}const payload=(cov_1r76ud9kcq().s[57]++,(0,utils_1.getBuildCollectionOfferPayload)(offererAddress,quantity,collectionSlug,offerProtectionEnabled,traitType,traitValue));const response=(cov_1r76ud9kcq().s[58]++,await this.post((0,apiPaths_1.getBuildOfferPath)(),payload));cov_1r76ud9kcq().s[59]++;return response;}/**
     * Get a list collection offers for a given slug.
     * @param slug The slug (identifier) of the collection to list offers for
     * @returns The {@link ListCollectionOffersResponse} returned by the API.
     */async getCollectionOffers(slug){cov_1r76ud9kcq().f[12]++;cov_1r76ud9kcq().s[60]++;return await this.get((0,apiPaths_1.getCollectionOffersPath)(slug));}/**
     * Post a collection offer to OpenSea.
     * @param order The collection offer to post.
     * @param slug The slug (identifier) of the collection to post the offer for.
     * @param traitType If defined, the trait name to create the collection offer for.
     * @param traitValue If defined, the trait value to create the collection offer for.
     * @returns The {@link Offer} returned to the API.
     */async postCollectionOffer(order,slug,traitType,traitValue){cov_1r76ud9kcq().f[13]++;const payload=(cov_1r76ud9kcq().s[61]++,(0,utils_1.getPostCollectionOfferPayload)(slug,order,traitType,traitValue));cov_1r76ud9kcq().s[62]++;return await this.post((0,apiPaths_1.getPostCollectionOfferPath)(),payload);}/**
     * Fetch multiple NFTs for a collection.
     * @param slug The slug (identifier) of the collection
     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.
     * @param next Cursor to retrieve the next page of NFTs
     * @returns The {@link ListNFTsResponse} returned by the API.
     */async getNFTsByCollection(slug,limit=(cov_1r76ud9kcq().b[25][0]++,undefined),next=(cov_1r76ud9kcq().b[26][0]++,undefined)){cov_1r76ud9kcq().f[14]++;const response=(cov_1r76ud9kcq().s[63]++,await this.get((0,apiPaths_1.getListNFTsByCollectionPath)(slug),{limit,next}));cov_1r76ud9kcq().s[64]++;return response;}/**
     * Fetch multiple NFTs for a contract.
     * @param address The NFT's contract address.
     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.
     * @param next Cursor to retrieve the next page of NFTs.
     * @param chain The NFT's chain.
     * @returns The {@link ListNFTsResponse} returned by the API.
     */async getNFTsByContract(address,limit=(cov_1r76ud9kcq().b[27][0]++,undefined),next=(cov_1r76ud9kcq().b[28][0]++,undefined),chain=(cov_1r76ud9kcq().b[29][0]++,this.chain)){cov_1r76ud9kcq().f[15]++;const response=(cov_1r76ud9kcq().s[65]++,await this.get((0,apiPaths_1.getListNFTsByContractPath)(chain,address),{limit,next}));cov_1r76ud9kcq().s[66]++;return response;}/**
     * Fetch NFTs owned by an account.
     * @param address The address of the account
     * @param limit The number of NFTs to retrieve. Must be greater than 0 and less than 51.
     * @param next Cursor to retrieve the next page of NFTs
     * @param chain The chain to query. Defaults to the chain set in the constructor.
     * @returns The {@link ListNFTsResponse} returned by the API.
     */async getNFTsByAccount(address,limit=(cov_1r76ud9kcq().b[30][0]++,undefined),next=(cov_1r76ud9kcq().b[31][0]++,undefined),chain=(cov_1r76ud9kcq().b[32][0]++,this.chain)){cov_1r76ud9kcq().f[16]++;const response=(cov_1r76ud9kcq().s[67]++,await this.get((0,apiPaths_1.getListNFTsByAccountPath)(chain,address),{limit,next}));cov_1r76ud9kcq().s[68]++;return response;}/**
     * Fetch metadata, traits, ownership information, and rarity for a single NFT.
     * @param address The NFT's contract address.
     * @param identifier the identifier of the NFT (i.e. Token ID)
     * @param chain The NFT's chain.
     * @returns The {@link GetNFTResponse} returned by the API.
     */async getNFT(address,identifier,chain=(cov_1r76ud9kcq().b[33][0]++,this.chain)){cov_1r76ud9kcq().f[17]++;const response=(cov_1r76ud9kcq().s[69]++,await this.get((0,apiPaths_1.getNFTPath)(chain,address,identifier)));cov_1r76ud9kcq().s[70]++;return response;}/**
     * Fetch an OpenSea collection.
     * @param slug The slug (identifier) of the collection.
     * @returns The {@link OpenSeaCollection} returned by the API.
     */async getCollection(slug){cov_1r76ud9kcq().f[18]++;const path=(cov_1r76ud9kcq().s[71]++,(0,apiPaths_1.getCollectionPath)(slug));const response=(cov_1r76ud9kcq().s[72]++,await this.get(path));cov_1r76ud9kcq().s[73]++;return(0,utils_2.collectionFromJSON)(response);}/**
     * Fetch a list of OpenSea collections.
     * @param orderBy The order to return the collections in. Default: CREATED_DATE
     * @param chain The chain to filter the collections on. Default: all chains
     * @param creatorUsername The creator's OpenSea username to filter the collections on.
     * @param includeHidden If hidden collections should be returned. Default: false
     * @param limit The limit of collections to return.
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns List of {@link OpenSeaCollection} returned by the API.
     */async getCollections(orderBy=(cov_1r76ud9kcq().b[34][0]++,types_1.CollectionOrderByOption.CREATED_DATE),chain,creatorUsername,includeHidden=(cov_1r76ud9kcq().b[35][0]++,false),limit,next){cov_1r76ud9kcq().f[19]++;const path=(cov_1r76ud9kcq().s[74]++,(0,apiPaths_1.getCollectionsPath)());const args=(cov_1r76ud9kcq().s[75]++,{order_by:orderBy,chain,creator_username:creatorUsername,include_hidden:includeHidden,limit,next});const response=(cov_1r76ud9kcq().s[76]++,await this.get(path,args));cov_1r76ud9kcq().s[77]++;response.collections=response.collections.map(collection=>{cov_1r76ud9kcq().f[20]++;cov_1r76ud9kcq().s[78]++;return(0,utils_2.collectionFromJSON)(collection);});cov_1r76ud9kcq().s[79]++;return response;}/**
     * Fetch stats for an OpenSea collection.
     * @param slug The slug (identifier) of the collection.
     * @returns The {@link OpenSeaCollection} returned by the API.
     */async getCollectionStats(slug){cov_1r76ud9kcq().f[21]++;const path=(cov_1r76ud9kcq().s[80]++,(0,apiPaths_1.getCollectionStatsPath)(slug));const response=(cov_1r76ud9kcq().s[81]++,await this.get(path));cov_1r76ud9kcq().s[82]++;return response;}/**
     * Fetch a payment token.
     * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link OpenSeaPaymentToken} returned by the API.
     */async getPaymentToken(address,chain=(cov_1r76ud9kcq().b[36][0]++,this.chain)){cov_1r76ud9kcq().f[22]++;const json=(cov_1r76ud9kcq().s[83]++,await this.get((0,apiPaths_1.getPaymentTokenPath)(chain,address)));cov_1r76ud9kcq().s[84]++;return(0,utils_2.paymentTokenFromJSON)(json);}/**
     * Fetch account for an address.
     * @param query Query to use for getting tokens. See {@link OpenSeaPaymentTokenQuery}.
     * @param next The cursor for the next page of results. This is returned from a previous request.
     * @returns The {@link GetAccountResponse} returned by the API.
     */async getAccount(address){cov_1r76ud9kcq().f[23]++;const json=(cov_1r76ud9kcq().s[85]++,await this.get((0,apiPaths_1.getAccountPath)(address)));cov_1r76ud9kcq().s[86]++;return(0,utils_2.accountFromJSON)(json);}/**
     * Force refresh the metadata for an NFT.
     * @param address The address of the NFT's contract.
     * @param identifier The identifier of the NFT.
     * @param chain The chain where the NFT is located.
     * @returns The response from the API.
     */async refreshNFTMetadata(address,identifier,chain=(cov_1r76ud9kcq().b[37][0]++,this.chain)){cov_1r76ud9kcq().f[24]++;const response=(cov_1r76ud9kcq().s[87]++,await this.post((0,apiPaths_1.getRefreshMetadataPath)(chain,address,identifier),{}));cov_1r76ud9kcq().s[88]++;return response;}/**
     * Offchain cancel an order, offer or listing, by its order hash when protected by the SignedZone.
     * Protocol and Chain are required to prevent hash collisions.
     * Please note cancellation is only assured if a fulfillment signature was not vended prior to cancellation.
     * @param protocolAddress The Seaport address for the order.
     * @param orderHash The order hash, or external identifier, of the order.
     * @param chain The chain where the order is located.
     * @param offererSignature An EIP-712 signature from the offerer of the order.
     *                         If this is not provided, the user associated with the API Key will be checked instead.
     *                         The signature must be a EIP-712 signature consisting of the order's Seaport contract's
     *                         name, version, address, and chain. The struct to sign is `OrderHash` containing a
     *                         single bytes32 field.
     * @returns The response from the API.
     */async offchainCancelOrder(protocolAddress,orderHash,chain=(cov_1r76ud9kcq().b[38][0]++,this.chain),offererSignature){cov_1r76ud9kcq().f[25]++;const response=(cov_1r76ud9kcq().s[89]++,await this.post((0,apiPaths_1.getCancelOrderPath)(chain,protocolAddress,orderHash),{offererSignature}));cov_1r76ud9kcq().s[90]++;return response;}/**
     * Generic fetch method for any API endpoint
     * @param apiPath Path to URL endpoint under API
     * @param query URL query params. Will be used to create a URLSearchParams object.
     * @returns @typeParam T The response from the API.
     */async get(apiPath,query=(cov_1r76ud9kcq().b[39][0]++,{})){cov_1r76ud9kcq().f[26]++;const qs=(cov_1r76ud9kcq().s[91]++,this.objectToSearchParams(query));const url=(cov_1r76ud9kcq().s[92]++,`${this.apiBaseUrl}${apiPath}?${qs}`);cov_1r76ud9kcq().s[93]++;return await this._fetch(url);}/**
     * Generic post method for any API endpoint.
     * @param apiPath Path to URL endpoint under API
     * @param body Data to send.
     * @param opts ethers ConnectionInfo, similar to Fetch API.
     * @returns @typeParam T The response from the API.
     */async post(apiPath,body,opts){cov_1r76ud9kcq().f[27]++;const url=(cov_1r76ud9kcq().s[94]++,`${this.apiBaseUrl}${apiPath}`);cov_1r76ud9kcq().s[95]++;return await this._fetch(url,opts,body);}objectToSearchParams(params=(cov_1r76ud9kcq().b[40][0]++,{})){cov_1r76ud9kcq().f[28]++;const urlSearchParams=(cov_1r76ud9kcq().s[96]++,new URLSearchParams());cov_1r76ud9kcq().s[97]++;Object.entries(params).forEach(([key,value])=>{cov_1r76ud9kcq().f[29]++;cov_1r76ud9kcq().s[98]++;if((cov_1r76ud9kcq().b[42][0]++,value)&&(cov_1r76ud9kcq().b[42][1]++,Array.isArray(value))){cov_1r76ud9kcq().b[41][0]++;cov_1r76ud9kcq().s[99]++;value.forEach(item=>{cov_1r76ud9kcq().f[30]++;cov_1r76ud9kcq().s[100]++;return(cov_1r76ud9kcq().b[43][0]++,item)&&(cov_1r76ud9kcq().b[43][1]++,urlSearchParams.append(key,item));});}else{cov_1r76ud9kcq().b[41][1]++;cov_1r76ud9kcq().s[101]++;if(value){cov_1r76ud9kcq().b[44][0]++;cov_1r76ud9kcq().s[102]++;urlSearchParams.append(key,value);}else{cov_1r76ud9kcq().b[44][1]++;}}});cov_1r76ud9kcq().s[103]++;return urlSearchParams.toString();}/**
     * Get from an API Endpoint, sending auth token in headers
     * @param opts ethers ConnectionInfo, similar to Fetch API
     * @param body Optional body to send. If set, will POST, otherwise GET
     */async _fetch(url,headers,body){cov_1r76ud9kcq().f[31]++;// Create the fetch request
const req=(cov_1r76ud9kcq().s[104]++,new ethers_1.ethers.FetchRequest(url));// Set the headers
cov_1r76ud9kcq().s[105]++;headers={"x-app-id":"opensea-js",...(this.apiKey?(cov_1r76ud9kcq().b[45][0]++,{"X-API-KEY":this.apiKey}):(cov_1r76ud9kcq().b[45][1]++,{})),...headers};cov_1r76ud9kcq().s[106]++;for(const[key,value]of Object.entries(headers)){cov_1r76ud9kcq().s[107]++;req.setHeader(key,value);}// Set the body if provided
cov_1r76ud9kcq().s[108]++;if(body){cov_1r76ud9kcq().b[46][0]++;cov_1r76ud9kcq().s[109]++;req.body=body;}else{cov_1r76ud9kcq().b[46][1]++;}// Set the throttle params
cov_1r76ud9kcq().s[110]++;req.setThrottleParams({slotInterval:1000});cov_1r76ud9kcq().s[111]++;this.logger(`Sending request: ${url} ${JSON.stringify({request:req,headers:req.headers})}`);const response=(cov_1r76ud9kcq().s[112]++,await req.send());cov_1r76ud9kcq().s[113]++;if(!response.ok()){cov_1r76ud9kcq().b[47][0]++;// If an errors array is returned, throw with the error messages.
const errors=(cov_1r76ud9kcq().s[114]++,response.bodyJson?.errors);cov_1r76ud9kcq().s[115]++;if(errors?.length>0){cov_1r76ud9kcq().b[48][0]++;let errorMessage=(cov_1r76ud9kcq().s[116]++,errors.join(", "));cov_1r76ud9kcq().s[117]++;if(errorMessage==="[object Object]"){cov_1r76ud9kcq().b[49][0]++;cov_1r76ud9kcq().s[118]++;errorMessage=JSON.stringify(errors);}else{cov_1r76ud9kcq().b[49][1]++;}cov_1r76ud9kcq().s[119]++;throw new Error(`Server Error: ${errorMessage}`);}else{cov_1r76ud9kcq().b[48][1]++;cov_1r76ud9kcq().s[120]++;// Otherwise, let ethers throw a SERVER_ERROR since it will include
// more context about the request and response.
response.assertOk();}}else{cov_1r76ud9kcq().b[47][1]++;}cov_1r76ud9kcq().s[121]++;return response.bodyJson;}}cov_1r76ud9kcq().s[122]++;exports.OpenSeaAPI=OpenSeaAPI;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,